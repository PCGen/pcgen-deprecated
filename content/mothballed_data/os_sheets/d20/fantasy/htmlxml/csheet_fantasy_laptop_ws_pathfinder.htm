<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<!--
PCGen Character Sheet Template
==============================

Author: Richard O'Doherty-Gregg
Email: OdGregg@bigpond.com
Modifications by: arcady
Email: arcady0@yahoo.com
Revisons: Barak  10/15/02
Email: barak@voyager.net
Revisons: Roger Host  11/05/02  Added Barbarian options
Email: rhost@dls.net
Revisons: Roger Host  11/xx/02  Added Defensive fighting options
Email: rhost@dls.net
Revisons: Roger Host  12/30/02  Added support for non-abilities.  Changed ordering of AC to Total:Flat:Touch
Email: rhost@dls.net
Revisons: Roger Host   1/ 6/03  Added new spell formats.  Added max skill header.
											Added the companion tables.  Added formatting to this HTM to make it easier
											to follow the layout of the tables.
Email: rhost@dls.net
Revisons: Roger Host   2/26/03  Added new style skill block to comprehensive skill listing (useable untrained flag)
										  Customized the turning table to fill in the values of the max HD of undead that may be turned.
										  Added filtering around some optional sub-tables (proficiencies, templates)
										  Updated weapon blocks to the new style
Email: rhost@dls.net
Revision: Thomas Jannes 09/08/03 Added the stat-modifying code & Corrected EQ% to EQ.%

Email:pcgen@chuckpint.com
Revisions: Chuck Pint 05/06/04 Fixed Javascript to work with Mozilla-based browsers by changing "document.all" to "document.getElementById".
								Changed all special characters (Wingdings) to UTF-8 characters
								Removed depeciated "font" and changed to CSS.
								Fixed Monk AC wisdom bonus with wisdom changes
								Updated all CSS to have only one standard.

Revisions: Chuck Pint 06/26/04 Fixed problems with buttons and printing.
							   Fixed HTML to bring up to XHTML 1.0

Revisions: Chuck Pint 07/04/04 Added base scores to abilities stat block
							   Added printout of "Notes" for equipment.
							   Added "FACE" to size line in header.
							   Changed "To Hit" to "Attack Bonus" or in some cases simply "Bonus".

Revisions: Chuck Pint 07/06/04 Fixed spacing problem with abilities stat block

Revisions: Chuck Pint 10/09/04 Added turn/rebuke plants
							   Added fix for sheets where there are less than 3 weapons
							   Changed checks to use correct base stat mod (.NOTEMP.NOEQUIP)
Revisions: Chuck Pint 10/17/04 Fixed modPlusMinusNone() to return "" for zero case - otherwise it returns "undefined"

Revisions: Chuck Pint 12/04/04 Fixed minor HTML warnings, Undead turning (again!), Barbarian rage times,  and Psionics.

Revisions: Eddy Anthony 1/16/06 Converted Will check to reference array number instead of name in preperation to converting the data to use "Will" as the check name

Revisions: Tir-Gwaith 25/10/07 Converted Barbarian away from purely 3.0, reference defined VARs in all instances.  Still needs more work.

Bugs: Money in two containers is not merged.

Branched from csheet_fantasy_combined.htm by: Mike Elliott (satinDOTknightsATyahooDOTcom) 14/7/09
 
Revisions: Tir-Gwaith 10/11/09 Breaking out Deflection from Misc AC bonus (in this sheet, lining up Deflection from PCGen to sheet)

Revisions: Mike Elliott 12/12/09 Updated to include CMB/CMD, added Compact Stats mode and many minor fixes.

Revisions: Mike Elliott 12/30/09 Added Show Sources to Feats, Special Attacks and Qualities, and Equipment,
                                 2917186 TIMEUNIT processing, .MAGIC~ to bold now, removed repeats of Special Attacks
                                 in the Special Qualities section, 2923219 seperated out AC.Dodge into it's own box.

Revisions: Mike Elliott 11/24/10 Added Temporary Bonuses Applied, Animal Tricks, Afflictions and Archetypes.
                                 Changed Pathfinder Barbarian to match new variables.  Feats now show seperate DESC and
				 BENEFIT views.  Deity/Domains now show DomainPowers abilities in its section.  Armor
				 block only shows barding for probably mount racetypes, animals and companions.  
				 Ranged weapons have associated ammo automatically bunched and added to damage roll.  
				 Extra energy damage on weapons is shown but not automatically rolled (yet). 
				 Comprehensive skills shows breakdown.


$Revision$
$Author$
$Date$
-->

<!--
	VERY IMPORTANT:

	The IIF, ELSE, ENDIF, FOR etc tokens cannot have whitespace in front of them
	otherwise they will not process correctly!
-->
<head>
<meta http-equiv="content-type" content="text-html; charset=utf-8" />
<title>|NAME|</title>
<style type="text/css">
@media print{
	table#config,
	td#config1,
	td#config2,
	td#config3,
	td#removeh,
	td#removea0,
	td#removea1,
	td#removea2,
	td#removea3,
	td#removea4,
	td#removea5,
	td#removeb0,
	td#removeb1,
	td#removeb2,
	td#removeb3,
	td#removeb4,
	td#removeb5 { display:none;}
}
</style>

<!--
	each syle type consists of the following:
	first : alignment type first is hozontal, second is vertical (c=center, l=left, r=right, b=bottom, t=top, m=middle)
	second : number is always the font size
	third : border type (m=no border s=1pt border, b=bottom border, t=top border r=right border, l=left border, g=light gray thick border, d=thick solid border)
	fourth : color changes (missing=black on white, w=white on black, g=black on light gray, l=black on light blue)
	a "B" on the end is for bold fonts.
	a "I" on the end is for Italic fonts.
	a "U" on the end is for Underline fonts.
-->
<style type="text/css">
	body  { font-family: Arial, sans-serif; font-size:6pt; text-align:left; color:black; background:#F4EAA4; font-weight:normal; margin: 0px; padding: 0px; }
	td    { font-family: Arial, sans-serif; font-size:6pt; text-align:left; font-weight:normal; }
	tr    { font-family: Arial, sans-serif; font-size:6pt; text-align:left; color:black; background:#F4EAA4; font-weight:normal; }
	table { font-family: Arial, sans-serif; font-size:6pt; text-align:left; color:black; background:#F4EAA4; font-weight:normal; }
	div   { font-family: Arial, sans-serif; font-size:6pt; text-align:left; color:black; background:#F4EAA4; font-weight:normal; }
	span  { font-family: Arial, sans-serif; font-size:6pt; text-align:left; font-weight:normal; }
	p     { font-family: Arial, sans-serif; font-size:8pt; text-align:left; color:black; background:#F4EAA4; font-weight:normal; }

	.l2   { font-size:2pt; text-align:left; }

	.c4   { font-size:4pt; text-align:center; }
	.c4s  { font-size:4pt; text-align:center; border:1px solid black; }
	.c4w  { font-size:4pt; text-align:center; color:white; background:black; }
	.c4wB { font-size:4pt; text-align:center; color:white; background:black; font-weight:bold; }
	.l4   { font-size:4pt; text-align:left; }
	.l4s  { font-size:4pt; text-align:left; border:1px solid black; }
	.lt4s { font-size:4pt; text-align:left; vertical-align:top; border:1px solid black; }

	.b5   { font-size:5pt; text-align:center; vertical-align:bottom; }
	.c5   { font-size:5pt; text-align:center; }
	.c5g  { font-size:5pt; text-align:center; border:5px solid #DDDDDD; }
	.c5w  { font-size:5pt; text-align:center; color:white; background:black; }
	.c5wB { font-size:5pt; text-align:center; color:white; background:black; font-weight:bold; }
	.cb5  { font-size:5pt; text-align:center; vertical-align:bottom; }
	.cm5swB{ font-size:5pt; text-align:center; vertical-align:middle; color:white; background:black; border:1px solid black; font-weight:bold; }
	.l5   { font-size:5pt; text-align:left; }
	.l5b  { font-size:5pt; text-align:left; border-bottom-width:1px; border-bottom:1pt solid black; }
	.l5s  { font-size:5pt; text-align:left; border:1px solid black; border-bottom-width:1px; }
	.lt5  { font-size:5pt; text-align:left; vertical-align:top; }
	.lt5s { font-size:5pt; text-align:left; vertical-align:top; border:1px solid black; border-bottom-width:1px; }
	.r5   { font-size:5pt; text-align:right; }
	.r5b  { font-size:5pt; text-align:right; border-bottom-width:1px; border-bottom:1pt solid black; }
	.r5s  { font-size:5pt; text-align:right; border:1px solid black; border-bottom-width:1px; }
	.rt5  { font-size:5pt; text-align:right; vertical-align:top; }

	.c6   { font-size:6pt; text-align:center; }
	.c6s  { font-size:6pt; text-align:center; border:1px solid black; }
	.c6w  { font-size:6pt; text-align:center; color:white; background:black; }
	.c6wB { font-size:6pt; text-align:center; color:white; background:black; font-weight:bold; }
	.ct6mB{ font-size:6pt; text-align:center; vertical-align:top; font-weight:bold; }
	.l6   { font-size:6pt; text-align:left; }
	.l6g  { font-size:6pt; text-align:left; background:#DDDDDD; }
	.l6s  { font-size:6pt; text-align:left; border:1px solid black; }
	.l6w  { font-size:6pt; text-align:left; color:white; background:black; }
	.lt6  { font-size:6pt; text-align:left; vertical-align:top; }
	.lt6b { font-size:6pt; text-align:left; vertical-align:top; border-bottom-width:1px; border-bottom:1pt solid black; }
	.lt6s { font-size:6pt; text-align:left; vertical-align:top; border:1px solid black; }
	.r6w  { font-size:6pt; text-align:right; color:white; background:black; }
	.t6tg { font-size:6pt; text-align:left; vertical-align:top; border-top-width:1px; border-top:1pt solid black; background:#CCCCCC; }

	.c7   { font-size:7pt; text-align:center; }
	.c7mB { font-size:7pt; text-align:center; font-weight:bold; }
	.c7sB { font-size:7pt; text-align:center; border:1px solid black; font-weight:bold; }
	.c7w  { font-size:7pt; text-align:center; color:white; background:black; }
	.c7wB { font-size:7pt; text-align:center; color:white; background:black; font-weight:bold; }
	.cb7  { font-size:7pt; text-align:center; vertical-align:bottom;}
	.cm7  { font-size:7pt; text-align:center; vertical-align:middle; }
	.cm7mB{ font-size:7pt; text-align:center; vertical-align:middle; font-weight:bold; }
	.ct7  { font-size:7pt; text-align:center; vertical-align:top; }
	.ct7b { font-size:7pt; text-align:center; vertical-align:top; border-bottom-width:1px; border-bottom:1pt solid black; }
	.l7   { font-size:7pt; text-align:left; }
	.l7b  { font-size:7pt; text-align:left; border-bottom-width:1px; border-bottom:1pt solid black; }
	.l7s  { font-size:7pt; text-align:left; border:1px solid black; }
	.l7s  A:hover { font-size:9pt; text-align:left; color:red;}
	.lb7  { font-size:7pt; text-align:left; vertical-align:bottom; }
	.lt7  { font-size:7pt; text-align:left; vertical-align:top; }
	.lt7b { font-size:7pt; text-align:left; vertical-align:top; border-bottom-width:1px; border-bottom:1pt solid black; }
	.lt7s { font-size:7pt; text-align:left; vertical-align:top; border:1px solid black; }
	.l7wB { font-size:7pt; text-align:left; color:white; background:black; font-weight:bold; }
	.r7   { font-size:7pt; text-align:right; }
	.r7w  { font-size:7pt; text-align:right; color:white; background:black; }
	.rt7  { font-size:7pt; text-align:right; vertical-align:top; }
	.t7s  { font-size:7pt; text-align:left; vertical-align:top; border:1px solid black; }

	.c8   { font-size:8pt; text-align:center; }
	.c8mB { font-size:8pt; text-align:center; font-weight:bold; }
	.c8s  { font-size:8pt; text-align:center; border:1px solid black; }
	.c8sB { font-size:8pt; text-align:center; border:1px solid black; font-weight:bold; }
	.c8sgB{ font-size:8pt; text-align:center; border:1px solid black; background:#DDDDDD; font-weight:bold; }
	.c8sw { font-size:8pt; text-align:center; border:1px solid black; }
	.c8swB{ font-size:8pt; text-align:center; border:1px solid black; font-weight:bold; }
	.c8wB { font-size:8pt; text-align:center; color:white; background:black; font-weight:bold; }
	.cb8b { font-size:8pt; text-align:center; vertical-align:bottom; border-bottom-width:1px; border-bottom:1pt solid black; }
	.cb8bB{ font-size:8pt; text-align:center; vertical-align:bottom; border-bottom-width:1px; border-bottom:1pt solid black; font-weight:bold; }
	.cb8mB{ font-size:8pt; text-align:center; vertical-align:bottom; font-weight:bold; }
	.ct8  { font-size:8pt; text-align:center; vertical-align:top; }
	.ct8mB{ font-size:8pt; text-align:center; vertical-align:top; font-weight:bold; }
	.ct8s { font-size:8pt; text-align:center; vertical-align:top; border:1px solid black; }
	.ct8sB{ font-size:8pt; text-align:center; vertical-align:top; border:1px solid black; font-weight:bold; }
	.ct8swB{ font-size:8pt; text-align:center; vertical-align:top; border:1px solid black; color:white; background:black; font-weight:bold; }
	.l8   { font-size:8pt; text-align:left; }
	.l8g  { font-size:8pt; text-align:left; background:#F0E0B9; }
	.l8mB { font-size:8pt; text-align:left; font-weight:bold; }
	.l8s  { font-size:8pt; text-align:left; vertical-align:top; border:1px solid black; }
	.l8sB { font-size:8pt; text-align:left; vertical-align:top; border:1px solid black; font-weight:bold; }
	.l8swB{ font-size:8pt; text-align:left; border:1px solid black; color:white; background:black; font-weight:bold; }
  	.l8tgB{ font-size:8pt; text-align:left; border-top-width:1px; border-top:1pt solid black; color:black; background:#CCCCCC; font-weight:bold; }
	.l8wB { font-size:8pt; text-align:left; color:white; background:black; font-weight:bold; }
	.l8w  { font-size:8pt; text-align:left; color:white; background:black; }
	.lb8  { font-size:8pt; text-align:left; vertical-align:bottom; }
	.lt8  { font-size:8pt; text-align:left; vertical-align:top; }
	.lt8  A:hover { font-size:9pt; text-align:left; color:red;}
	.lt8mB{ font-size:8pt; text-align:left; vertical-align:top; font-weight:bold; }
	.lt8s { font-size:8pt; text-align:left; vertical-align:top; border:1px solid black; }
	.lt8sB{ font-size:8pt; text-align:left; vertical-align:top; border:1px solid black; font-weight:bold; }
	.r8   { font-size:8pt; text-align:right; }
	.r8B  { font-size:8pt; text-align:right; font-weight:bold; }
	.rt8  { font-size:8pt; text-align:right; vertical-align:top; }
	.rt8s { font-size:8pt; text-align:right; vertical-align:top; border:1px solid black; }
	.rt8sB{ font-size:8pt; text-align:right; vertical-align:top; border:1px solid black; font-weight:bold; }
	.r8wB { font-size:8pt; text-align:right; color:white; background:black; font-weight:bold; }

	.c9   { font-size:9pt; text-align:center; }
	.c9g  { font-size:9pt; text-align:center; background:#DDDDDD; }
	.c9w  { font-size:9pt; text-align:center; color:white; background:black; }
	.c9B  { font-size:9pt; text-align:center; font-weight:bold; }
	.c9s  { font-size:9pt; text-align:center; border:1px solid black; }
	.c9sB { font-size:9pt; text-align:center; border:1px solid black; font-weight:bold; background:#F0E0B9; }
	.c9sBx{ font-size:9pt; text-align:center; border:1px solid black; font-weight:bold; }
	.c9swB{ font-size:9pt; text-align:center; border:1px solid black; color:white; background:black; font-weight:bold; }
	.c9wB { font-size:9pt; text-align:center; color:white; background:black; font-weight:bold; }
	.c9pB { font-size:9pt; text-align:center; color:#88DDFF; background:black; font-weight:bold; }
	.cb9s { font-size:9pt; text-align:center; vertical-align:bottom; border:1px solid black; }
	.cb9sB{ font-size:9pt; text-align:center; vertical-align:bottom; border:1px solid black; font-weight:bold; }
	.cm9dB{ font-size:9pt; text-align:center; vertical-align:middle; border:4px solid black; font-weight:bold; }
	.cm9swB{ font-size:9pt; text-align:center; vertical-align:middle; color:white; background:black; border:1px solid black; font-weight:bold; }
	.cm9sB{  font-size:9pt; text-align:center; vertical-align:middle; border:1px solid black; font-weight:bold; }
	.ct9  { font-size:9pt; text-align:center; vertical-align:top; }
	.ct9mU{ font-size:9pt; text-align:center; vertical-align:top; text-decoration:underline; }
	.l9   { font-size:9pt; text-align:left; }
	.l9 A:hover { font-size:9pt; text-align:left; color:red; }
	.l9s  { font-size:9pt; text-align:left; border:1px solid black; }
	.l9wB { font-size:9pt; text-align:left; color:white; background:black; font-weight:bold; }
	.lb9  { font-size:9pt; text-align:left; vertical-align:bottom; }
	.lh9  { font-size:9pt; text-align:left; color:green; font-weight:bold; }
	.lh9 A:hover { font-size:9pt; text-align:left; color:red; font-weight:bold; }
	.lt9  { font-size:9pt; text-align:left; vertical-align:top; }
	.lt9b { font-size:9pt; text-align:left; vertical-align:top; border-bottom-width:1px; border-bottom:1pt solid black; }
	.lt9bw{ font-size:9pt; text-align:left; vertical-align:top; border-bottom-width:1px; border-bottom:1pt solid black; color:white; background:black; }
	.lt9mB{ font-size:9pt; text-align:left; vertical-align:top; font-weight:bold; }
	.lt9s { font-size:9pt; text-align:left; vertical-align:top; border:1px solid black; }
	.lt9sB{ font-size:9pt; text-align:left; vertical-align:top; border:1px solid black; font-weight:bold; }
	.r9   { font-size:9pt; text-align:right; }
	.r9w  { font-size:9pt; text-align:center; color:white; background:black; }
	.r9wB { font-size:9pt; text-align:right; color:white; background:black; font-weight:bold; }

	.c10B  { font-size:10pt; text-align:center; font-weight:bold; }
	.c10gB { font-size:10pt; text-align:center; border:5px solid #DDDDDD; font-weight:bold; }
	.c10glB{ font-size:10pt; text-align:center; border:5px solid #DDDDDD; background:#CCCCFF; font-weight:bold; }
	.c10mB { font-size:10pt; text-align:center; color:white; background:black; font-weight:bold; }
	.c10s  { font-size:10pt; text-align:center; border:1px solid black; }
	.c10sBx{ font-size:10pt; text-align:center; border:1px solid black; font-weight:bold; }
	.c10sB { font-size:10pt; text-align:center; border:1px solid black; font-weight:bold; background:#F0E0B9; }
	.c10sgB{ font-size:10pt; text-align:center; border:1px solid black; font-weight:bold; color:#A0A0A0; }
	.c10sl { font-size:10pt; text-align:center; border:1px solid black; background:#CCCCFF; }
	.c10slB{ font-size:10pt; text-align:center; border:1px solid black; background:#CCCCFF; font-weight:bold; }
	.c10swB{ font-size:10pt; text-align:center; border:1px solid black; color:white; background:black; font-weight:bold; }
	.c10wB { font-size:10pt; text-align:center; color:white; background:black; font-weight:bold; }
	.c10B  { font-size:10pt; text-align:center; font-weight:bold; }
	.c10yB { font-size:10pt; text-align:center; color:#FFFF20; background:black; font-weight:bold; }
	.c10yB A:hover { font-size:10pt; text-align:center; color:#20FFFF; background:black; font-weight:bold; }
	.c10oB { font-size:10pt; text-align:center; color:#FFCC20; background:black; font-weight:bold; }
	.c10oB A:hover { font-size:10pt; text-align:center; color:#20CCFF; background:black; font-weight:bold; }
	.l10   { font-size:10pt; text-align:left; }
	.l10wB { font-size:10pt; text-align:left; color:white; background:black; font-weight:bold; }
	.l10wB A:hover { font-size:10pt; text-align:center; color:#20FFFF; background:black; font-weight:bold; }

	.l11swB{ font-size:11pt; text-align:left; border:1px solid black; color:white; background:black; font-weight:bold; }

	.c12w   { font-size:12pt; text-align:center; color:white; background:black; }
	.c12wB  { font-size:12pt; text-align:center; color:white; background:black; font-weight:bold; }
	.l12    { font-size:12pt; text-align:left; }
	.l12b   { font-size:12pt; text-align:left; border-bottom-width:1px; border-bottom:1pt solid black; }
	.l12mB  { font-size:12pt; text-align:left; font-weight:bold; }
	.lb12mB { font-size:12pt; text-align:left; vertical-align:bottom; font-weight:bold; }
	.r12b   { font-size:12pt; text-align:right; border-bottom-width:1px; border-bottom:1pt solid black; }
	.r12mB  { font-size:12pt; text-align:right; font-weight:bold; }

	.l14   { font-size:14pt; text-align:left; }
	.l14B  { font-size:14pt; text-align:left; font-weight:bold; }
	.l14b  { font-size:14pt; text-align:left; border-bottom-width:1px; border-bottom:1pt solid black; }

	.extlink           {font-size:11pt; text-align:left; border:1px solid black; color:white; background:black; font-weight:bold; }
	.extlink A:link    {font-size:11pt; text-align:left; color:#CCCCFF; background:black; font-weight:bold; }
	.extlink A:visited {font-size:11pt; text-align:left; color:#CCCCFF; background:black; font-weight:bold; }
	.extlink A:hover   {text-decoration: underline overline; font-size:11pt; text-align:left; color:#FFCCCC; background:black; font-weight:bold; }
	.extlink A:active  {text-decoration: underline overline; font-size:11pt; text-align:left; color:#FFCCFF; background:black; font-weight:bold; }

/* - The next line is not used, but somehow activates all the other hovers in IE7 to work as expected - */
	span.hovering :hover {color:#20FFFF;}

	INPUT.statmodbutton {
		COLOR:#000000;
		background-color:#DDDDDD;
		border:1px solid #333333;
		width:15px;
		FONT-FAMILY:arial, geneva;
		FONT-SIZE:8px;
		text-align:center;
		}
	INPUT.activeButton {
		background-color:#DDDDFF;
		}
	INPUT.greyButton {
		background-color:#808080;
		}
	.breakhere { font-size:7pt; text-align:center; page-break-before:always }
	.blkgry { display:block; background:#DDDDDD; }
	.blkwht { display:block; background:white; }
	.nobrkg { display:block; page-break-after:avoid; background:#DDDDDD; }
	.nobrkw { display:block; page-break-after:avoid; background:white; }
	.header { display:block; font-size:7pt; text-align:center; }
	span.notes p {margin-top:0; margin-bottom:0;}
</style>
<script language="javascript" type="text/javascript">
// <!--
var charName = "|NAME|";
var fileName = encodeURIComponent("|NAME|");
var RageStatus = "Normal";
var BarbLvl = 0;
var MonkLvl = 0;
var FALSE = 0;
var TRUE = 1;
// List of abilities
var STRindex = 0;
var DEXindex = 1;
var CONindex = 2;
var INTindex = 3;
var WISindex = 4;
var CHAindex = 5;
// A special case where both STR and DEX are checked.
var STRDEXindex = 6;
var AbArr = new Array();

// Ability modifiers
var ModToStat = new Array();
var ModToStatMod = new Array();
// List of Potential Skill Mastery Special Abilities
var PotentialSkillMasteryList = new Array();
// List of supported character states
var StateArr = new Array();
// List of all weapons
var WeapArr = new Array();
// Hardcoded Global Debug variable for now: 
// Show Aspect information will show Aspect values if Sources are also shown
var ShowAspects = 1;
// Now a user toggle
var ShowSources = 0;
// List of checks
var FORTindex = 0;
var REFindex = 1;
var WILLindex = 2;
var CheckArr = new Array();
// Attack types
var ATKArr = new Array();
// Skills
var SkillArr = new Array();
// Initiative
var Init = new InitObject(|INITIATIVEMOD|,|INITIATIVEBONUS|);
// Hits
var HP = new HPObject( |HP| );
var Subdual = new SubdualObject( '0' );
// AC object
var AC = new ACObject(|AC.Flatfooted|,|AC.Touch|,|AC.Total|,|AC.Base|,|AC.Armor|,|AC.Shield|,|AC.Ability|,|AC.Size|,|AC.NaturalArmor|,|AC.Deflection|,|AC.Dodge|,|AC.Misc|);
// List of skills forbidden to a raging Barb
var SkillsRedList = new Array("Alchemy","Appraise","Craft","Decipher Script","Diplomacy","Disable Device","Disguise","Escape Artist","Forgery","Gather Information","Handle Animal","Heal","Hide","Innuendo","Intuit Direction","Knowledge","Move Silently","Open Lock","Perform","Pick Pocket","Profession","Read Lips","Scry","Search","Sense Motive","Sleight of Hand","Spellcraft","Tumble","Use Magic Device");
// List of the supported states a char can be in.
StateArr[0] = new CharState( "Rage", BarbMods, BarbMods );
StateArr[1] = new CharState( "DefFighting", DefensiveCombatMods, DefensiveCombatMods );
StateArr[2] = new CharState( "SpellArmor1", SpellCombatMods, SpellCombatMods );
StateArr[3] = new CharState( "SpellArmor2", SpellCombatMods, SpellCombatMods );
StateArr[4] = new CharState( "SpellArmor3", SpellCombatMods, SpellCombatMods );
StateArr[5] = new CharState( "SpellArmor4", SpellCombatMods, SpellCombatMods );
StateArr[6] = new CharState( "SpellArmor5", SpellCombatMods, SpellCombatMods );
// And the globals to hold the current values...
spell_AC_bonus = 0;
spell_Defl_bonus = 0;
spell_Nat_bonus = 0;
spell_Dodge_bonus = 0;
spell_Shield_bonus = 0;
// Set up the table of information about stats
|FOR,%stat,0,COUNT[STATS]-1,1,1|
	AbArr[%stat] = new Ability("|STAT.%stat.NAME|","|STAT.%stat.LONGNAME|","|STAT.%stat.NOTEMP.NOEQUIP|",|STAT.%stat.MOD.NOTEMP.NOEQUIP|,"|STAT.%stat|",|STAT.%stat.MOD|,TRUE,%stat);
	//Set up stat modifier array
	ModToStat[%stat] = 0;
	ModToStatMod[%stat] = 0;
|ENDFOR|
// Some of these are bad values, but they are not going to be processed.  This is a hidden STAT that will combine STR and DEX bonuses.
AbArr[STRDEXindex] = new Ability("STRDEX","STR and DEX combined","|STAT.0.NOPOST.NOEQUIP|",|STAT.0.MOD.NOPOST.NOEQUIP|,"|STAT.0|",|STAT.0.MOD|, FALSE,STRDEXindex);
ModToStat[STRDEXindex] = 0;
ModToStatMod[STRDEXindex] = 0;
// Have to define this after AbArr is denfined.
var CurHP = new CurHPObject( |HP| );
// A class to hold the number of spells that are memorized for each spell caster class and its levels
var Memorized = new Array();
function MemSpellsLevel(nMax, nName, nLevel) 
{
	this.Name = nName;			// Cleric
	this.Level = nLevel;			// 1  (1st level)
	this.Max = nMax;				// 2  (spells)
	this.mem = MemSpellMem;		// Mark another as prepared
	this.cast = MemSpellCast;	// Clear mark because it was cast
	this.error = 0;				// Did *Mem or *Cast fail?
	this.Cur = 0;					// The number of spells at this level currently prepared.
}
function MemSpellMem()
{
	if(this.Cur < this.Max) {
		this.Cur = this.Cur + 1;
		this.error = 0;
	} else {
		alert("Error: You have already memorized " + this.Cur + " " + this.Name + " spells of level " + this.Level + ".");
		this.error = 1;
	}
}
function MemSpellCast()
{
	if(this.Cur > 0) {
		this.Cur = this.Cur - 1;
		this.error = 0;
	} else {
		alert("Error: You have no more " + this.Name + " spells of level " + this.Level + " to cast.");
		this.error = 1;
	}
}
function ParseEnergy(fooA, fooB)
{
	fooF = "";
	fooC = fooA + ", " + fooB; 
	var fooEnergy = new Array();
	fooEnergy = fooC.split(",");
	for (x=0; x<fooEnergy.length; x++) {
		if(fooEnergy[x] != "") {
			fooC = fooEnergy[x];
			if(fooC.indexOf("critical") != -1)  fooC = "";
			if(fooC.indexOf("\+") == -1)  fooC = "";
			// TODO: Weak attempt at stripping Bane, will fail if the Bane string is modifed
			if(fooC.indexOf("enhancement bonus and does +2d6 bonus") != -1)  fooC = "";
			if(fooC.indexOf(" damage") == -1) {
				fooC = "";
			} else {
				fooD = fooC.replace(/.*\+/, '+');
				fooG = fooD.replace(/damage against evil targets/, "holy damage");
				fooD = fooG.replace(/damage against good targets/, "unholy damage");
				fooG = fooD.replace(/damage against chaotic targets/, "axiomatic damage");
				fooD = fooG.replace(/damage against lawful targets/, "anarchic damage");
				fooC = fooD.replace(/damage.*/, "damage");
			}
			if(fooC != "") {
				if(fooF != "") fooF = fooF + ", ";
					fooF = fooF + fooC;
			}
		}
	}
	return(fooF);
}
function ParseEnchantment(haystack)
{
	retval = "0";
	searchstr = "PLUS";
	there = haystack.indexOf(searchstr);
	if(there != -1) {
		retval = String(parseInt(haystack.substr(there+4,2))); 
	}
	return(retval);
}

// Set up Skill Mastery List
// TODO When count("NAME.Name(sub name)) can be utilised then we can use that as the simple check
|FOR,%ability,0,count("ABILITIES")-1,1,1|
	PotentialSkillMasteryList[%ability] = new String("|ABILITY.Special Ability.%ability|");
|ENDFOR|

// ***********************************
// Weapons (including default unarmed)
// ***********************************
// The code below is 'interesting', the IIF and FOR statements
// _cannot_ have whitespace in front of them

// Used when constructing ranged information to add to weapons
var RangedStuff;

// Deal with Unarmed
WeapArr[0] = new Weapon( -1, "UNARMED", "Melee", "|WEAPONH.TOTALHIT|", "|WEAPONH.DAMAGE|", "T", "0&#39;", "|WEAPONH.CRIT|", "|WEAPONH.MULT|", "B", "T", "" );
WeapArr[0].setOutputFormat(2);
|IIF(EQ.MERGEALL.IS.AmuletOfMightyFists.0.EQUIPPED:Y)| 
	WeapArr[0].energy = ParseEnergy("", "|EQ.MERGEALL.IS.AmuletOfMightyFists.0.SPROP|"); 
	WeapArr[0].sprop = "|EQ.MERGEALL.IS.AmuletOfMightyFists.0.SPROP|"; 
|ENDIF|
WeapPos = 1;
// Loop through the weapons list three times.  First adding primary, then equipped weapons, then non-equipped.
|FOR,%weap,0,COUNT[EQTYPE.WEAPON]-1,1,0|
	if('x|WEAPON.EQUIPPED.%weap.HAND|' == 'xPrimary') {
		WeapArr[WeapPos] = new Weapon((WeapPos-1),"|WEAPON.EQUIPPED.%weap.NAME| (equipped)","|WEAPON.EQUIPPED.%weap.CATEGORY|","|WEAPON.EQUIPPED.%weap.TOTALHIT|","|WEAPON.EQUIPPED.%weap.DAMAGE|", FirstChar("|WEAPON.EQUIPPED.%weap.HAND|"), "|WEAPON.EQUIPPED.%weap.RANGE|", "|WEAPON.EQUIPPED.%weap.CRIT|", "|WEAPON.EQUIPPED.%weap.MULT|", "|WEAPON.EQUIPPED.%weap.TYPE|", "|WEAPON.EQUIPPED.%weap.SIZE|", "|WEAPON.EQUIPPED.%weap.SPROP|" );
|IIF(WEAPON.EQUIPPED.%weap.CATEGORY:Ranged)|
			WeapArr[WeapPos].setOutputFormat(1);
|IIF(WEAPON.EQUIPPED.%weap.ISTYPE.Bow:FALSE.AND.WEAPON.EQUIPPED.%weap.ISTYPE.Crossbow:FALSE.AND.WEAPON.EQUIPPED.%weap.ISTYPE.Blowgun:FALSE.AND.WEAPON.EQUIPPED.%weap.ISTYPE.Sling:FALSE)|
|IIF(WEAPON.EQUIPPED.%weap.CONTENTS:0)|
				fooF = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|ELSE|
|FOR,%ammo,0,WEAPON.EQUIPPED.%weap.CONTENTS,1,0|
					fooA = "|WEAPON.EQUIPPED.%weap.CONTENTS.%ammo|";
					fooB = "|WEAPON.EQUIPPED.%weap.CONTENTS.%ammo.SPROP|";
					fooF = ParseEnergy(fooB, "|WEAPON.EQUIPPED.%weap.SPROP|"); 
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.CONTENTS.%ammo.TOTALHIT|", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.CONTENTS.%ammo.DAMAGE|" );
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDFOR|
|ENDIF|
|ENDIF|
|IIF(WEAPON.EQUIPPED.%weap.ISTYPE.Bow:TRUE)|
				fooF = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGEALL.%equip1.TYPE:Arrow)|
					fooA = "|EQ.MERGEALL.%equip1.NAME|"; 
					fooB = "|EQ.MERGEALL.%equip1.SPROP|"; 
					fooF = ParseEnergy(fooB, "|WEAPON.EQUIPPED.%weap.SPROP|"); 
					enchantment = ParseEnchantment("|EQ.MERGEALL.%equip1.TYPE|");
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", modAttackBonusString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", enchantment), modDamageString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|", enchantment, "N"));
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDIF|
|ENDFOR|
|ENDIF|
|IIF(WEAPON.EQUIPPED.%weap.ISTYPE.Crossbow:TRUE)|
				fooF = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGEALL.%equip1.TYPE:Bolt)|
					fooA = "|EQ.MERGEALL.%equip1.NAME|"; 
					fooB = "|EQ.MERGEALL.%equip1.SPROP|"; 
					fooF = ParseEnergy(fooB, "|WEAPON.EQUIPPED.%weap.SPROP|"); 
					enchantment = ParseEnchantment("|EQ.MERGEALL.%equip1.TYPE|");
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", modAttackBonusString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", enchantment), modDamageString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|", enchantment, "N"));
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDIF|
|ENDFOR|
|ENDIF|
|IIF(WEAPON.EQUIPPED.%weap.ISTYPE.Blowgun:TRUE)|
				fooF = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGEALL.%equip1.TYPE:Dart)|
					fooA = "|EQ.MERGEALL.%equip1.NAME|"; 
					fooB = "|EQ.MERGEALL.%equip1.SPROP|"; 
					fooF = ParseEnergy(fooB, "|WEAPON.EQUIPPED.%weap.SPROP|"); 
					enchantment = ParseEnchantment("|EQ.MERGEALL.%equip1.TYPE|");
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", modAttackBonusString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", enchantment), modDamageString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|", enchantment, "N"));
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDIF|
|ENDFOR|
|ENDIF|
|IIF(WEAPON.EQUIPPED.%weap.ISTYPE.Sling:TRUE)|
				fooF = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGEALL.%equip1.TYPE:SlingStone)|
					fooA = "|EQ.MERGEALL.%equip1.NAME|"; 
					fooB = "|EQ.MERGEALL.%equip1.SPROP|"; 
					fooF = ParseEnergy(fooB, "|WEAPON.EQUIPPED.%weap.SPROP|"); 
					enchantment = ParseEnchantment("|EQ.MERGEALL.%equip1.TYPE|");
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", modAttackBonusString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", enchantment), modDamageString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|", enchantment, "N"));
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDIF|
|ENDFOR|
|ENDIF|
|ELSE|
|IIF(WEAPON.EQUIPPED.%weap.ISTYPE.Double.OR.WEAPON.EQUIPPED.%weap.CATEGORY:Non-Standard-Melee.OR.WEAPON.EQUIPPED.%weap.CATEGORY:NATURAL)|
				WeapArr[WeapPos].setOutputFormat(2);
				WeapArr[WeapPos].energy = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
|IIF(WEAPON.EQUIPPED.%weap.CATEGORY:NATURAL)|
|IIF(EQ.MERGEALL.IS.AmuletOfMightyFists.0.EQUIPPED:Y)| 
				WeapArr[WeapPos].energy = ParseEnergy("", "|EQ.MERGEALL.IS.AmuletOfMightyFists.0.SPROP|"); 
				WeapArr[WeapPos].sprop = "|EQ.MERGEALL.IS.AmuletOfMightyFists.0.SPROP|"; 
|ENDIF|
|ENDIF|
|ELSE|
				WeapArr[WeapPos].setOutputFormat(3);
				WeapArr[WeapPos].addMeleeVector("|WEAPON.EQUIPPED.%weap.BASEHIT|", "|WEAPON.EQUIPPED.%weap.OHHIT|", "|WEAPON.EQUIPPED.%weap.THHIT|", "|WEAPON.EQUIPPED.%weap.TWPHITH|", "|WEAPON.EQUIPPED.%weap.TWPHITL|", "|WEAPON.EQUIPPED.%weap.TWOHIT|", "|WEAPON.EQUIPPED.%weap.BASICDAMAGE|", "|WEAPON.EQUIPPED.%weap.OHDAMAGE|", "|WEAPON.EQUIPPED.%weap.THDAMAGE|", "|WEAPON.EQUIPPED.%weap.BASICDAMAGE|", "|WEAPON.EQUIPPED.%weap.BASICDAMAGE|", "|WEAPON.EQUIPPED.%weap.OHDAMAGE|" );
				WeapArr[WeapPos].energy = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
|ENDIF|
|ENDIF|
	WeapPos = WeapPos + 1;
	}
|ENDFOR|

// Second loop through the weapons.  Now effectively adding hand = off, or hand = both.
|FOR,%weap,0,COUNT[EQTYPE.WEAPON]-1,1,0|
	if(('|WEAPON.EQUIPPED.%weap.NAME|x' != 'x') && ('x|WEAPON.EQUIPPED.%weap.HAND|' != 'xPrimary')) {
		WeapArr[WeapPos] = new Weapon((WeapPos-1),"|WEAPON.EQUIPPED.%weap.NAME| (equipped)","|WEAPON.EQUIPPED.%weap.CATEGORY|","|WEAPON.EQUIPPED.%weap.TOTALHIT|","|WEAPON.EQUIPPED.%weap.DAMAGE|", FirstChar("|WEAPON.EQUIPPED.%weap.HAND|"), "|WEAPON.EQUIPPED.%weap.RANGE|", "|WEAPON.EQUIPPED.%weap.CRIT|", "|WEAPON.EQUIPPED.%weap.MULT|", "|WEAPON.EQUIPPED.%weap.TYPE|", "|WEAPON.EQUIPPED.%weap.SIZE|", "|WEAPON.EQUIPPED.%weap.SPROP|" );
|IIF(WEAPON.EQUIPPED.%weap.CATEGORY:Ranged)|
			WeapArr[WeapPos].setOutputFormat(1);
|IIF(WEAPON.EQUIPPED.%weap.ISTYPE.Bow:FALSE.AND.WEAPON.EQUIPPED.%weap.ISTYPE.Crossbow:FALSE.AND.WEAPON.EQUIPPED.%weap.ISTYPE.Blowgun:FALSE.AND.WEAPON.EQUIPPED.%weap.ISTYPE.Sling:FALSE)|
|IIF(WEAPON.EQUIPPED.%weap.CONTENTS:0)|
				fooF = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|ELSE|
|FOR,%ammo,0,WEAPON.EQUIPPED.%weap.CONTENTS,1,0|
					fooA = "|WEAPON.EQUIPPED.%weap.CONTENTS.%ammo|";
					fooB = "|WEAPON.EQUIPPED.%weap.CONTENTS.%ammo.SPROP|";
					fooF = ParseEnergy(fooB, "|WEAPON.EQUIPPED.%weap.SPROP|"); 
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.CONTENTS.%ammo.TOTALHIT|", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.CONTENTS.%ammo.DAMAGE|" );
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDFOR|
|ENDIF|
|ENDIF|
|IIF(WEAPON.EQUIPPED.%weap.ISTYPE.Bow:TRUE)|
				fooF = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGEALL.%equip1.TYPE:Arrow)|
					fooA = "|EQ.MERGEALL.%equip1.NAME|"; 
					fooB = "|EQ.MERGEALL.%equip1.SPROP|"; 
					fooF = ParseEnergy(fooB, "|WEAPON.EQUIPPED.%weap.SPROP|"); 
					enchantment = ParseEnchantment("|EQ.MERGEALL.%equip1.TYPE|");
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", modAttackBonusString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", enchantment), modDamageString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|", enchantment, "N"));
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDIF|
|ENDFOR|
|ENDIF|
|IIF(WEAPON.EQUIPPED.%weap.ISTYPE.Crossbow:TRUE)|
				fooF = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGEALL.%equip1.TYPE:Bolt)|
					fooA = "|EQ.MERGEALL.%equip1.NAME|"; 
					fooB = "|EQ.MERGEALL.%equip1.SPROP|"; 
					fooF = ParseEnergy(fooB, "|WEAPON.EQUIPPED.%weap.SPROP|"); 
					enchantment = ParseEnchantment("|EQ.MERGEALL.%equip1.TYPE|");
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", modAttackBonusString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", enchantment), modDamageString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|", enchantment, "N"));
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDIF|
|ENDFOR|
|ENDIF|
|IIF(WEAPON.EQUIPPED.%weap.ISTYPE.Blowgun:TRUE)|
				fooF = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGEALL.%equip1.TYPE:Dart)|
					fooA = "|EQ.MERGEALL.%equip1.NAME|"; 
					fooB = "|EQ.MERGEALL.%equip1.SPROP|"; 
					fooF = ParseEnergy(fooB, "|WEAPON.EQUIPPED.%weap.SPROP|"); 
					enchantment = ParseEnchantment("|EQ.MERGEALL.%equip1.TYPE|");
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", modAttackBonusString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", enchantment), modDamageString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|", enchantment, "N"));
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDIF|
|ENDFOR|
|ENDIF|
|IIF(WEAPON.EQUIPPED.%weap.ISTYPE.Sling:TRUE)|
				fooF = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGEALL.%equip1.TYPE:SlingStone)|
					fooA = "|EQ.MERGEALL.%equip1.NAME|"; 
					fooB = "|EQ.MERGEALL.%equip1.SPROP|"; 
					fooF = ParseEnergy(fooB, "|WEAPON.EQUIPPED.%weap.SPROP|"); 
					enchantment = ParseEnchantment("|EQ.MERGEALL.%equip1.TYPE|");
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.EQUIPPED.%weap.RANGELIST.%range|'", modAttackBonusString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", enchantment), modDamageString("|WEAPON.EQUIPPED.%weap.RANGELIST.%range.DAMAGE|", enchantment, "N"));
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDIF|
|ENDFOR|
|ENDIF|
|ELSE|
|IIF(WEAPON.EQUIPPED.%weap.ISTYPE.Double.OR.WEAPON.EQUIPPED.%weap.CATEGORY:Non-Standard-Melee.OR.WEAPON.EQUIPPED.%weap.CATEGORY:NATURAL)|
				WeapArr[WeapPos].setOutputFormat(2);
				WeapArr[WeapPos].energy = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
|IIF(WEAPON.EQUIPPED.%weap.CATEGORY:NATURAL)|
|IIF(EQ.MERGEALL.IS.AmuletOfMightyFists.0.EQUIPPED:Y)| 
				WeapArr[WeapPos].energy = ParseEnergy("", "|EQ.MERGEALL.IS.AmuletOfMightyFists.0.SPROP|"); 
				WeapArr[WeapPos].sprop = "|EQ.MERGEALL.IS.AmuletOfMightyFists.0.SPROP|"; 
|ENDIF|
|ENDIF|
|ELSE|
				WeapArr[WeapPos].setOutputFormat(3);
				WeapArr[WeapPos].addMeleeVector("|WEAPON.EQUIPPED.%weap.BASEHIT|", "|WEAPON.EQUIPPED.%weap.OHHIT|", "|WEAPON.EQUIPPED.%weap.THHIT|", "|WEAPON.EQUIPPED.%weap.TWPHITH|", "|WEAPON.EQUIPPED.%weap.TWPHITL|", "|WEAPON.EQUIPPED.%weap.TWOHIT|", "|WEAPON.EQUIPPED.%weap.BASICDAMAGE|", "|WEAPON.EQUIPPED.%weap.OHDAMAGE|", "|WEAPON.EQUIPPED.%weap.THDAMAGE|", "|WEAPON.EQUIPPED.%weap.BASICDAMAGE|", "|WEAPON.EQUIPPED.%weap.BASICDAMAGE|", "|WEAPON.EQUIPPED.%weap.OHDAMAGE|" );
				WeapArr[WeapPos].energy = ParseEnergy("", "|WEAPON.EQUIPPED.%weap.SPROP|"); 
|ENDIF|
|ENDIF|
	WeapPos = WeapPos + 1;
	}
|ENDFOR|

// And finally go through the non-equipped weapons in alphabetical order
|FOR,%weap,0,COUNT[EQTYPE.WEAPON]-1,1,0|
	if('|WEAPON.NOT_EQUIPPED.%weap.NAME|x' != 'x') {
			WeapArr[WeapPos] = new Weapon((WeapPos-1),"|WEAPON.NOT_EQUIPPED.%weap.NAME|","|WEAPON.NOT_EQUIPPED.%weap.CATEGORY|","|WEAPON.NOT_EQUIPPED.%weap.TOTALHIT|","|WEAPON.NOT_EQUIPPED.%weap.DAMAGE|", FirstChar("|WEAPON.NOT_EQUIPPED.%weap.HAND|"), "|WEAPON.NOT_EQUIPPED.%weap.RANGE|", "|WEAPON.NOT_EQUIPPED.%weap.CRIT|", "|WEAPON.NOT_EQUIPPED.%weap.MULT|", "|WEAPON.NOT_EQUIPPED.%weap.TYPE|", "|WEAPON.NOT_EQUIPPED.%weap.SIZE|", "|WEAPON.NOT_EQUIPPED.%weap.SPROP|" );
|IIF(WEAPON.NOT_EQUIPPED.%weap.CATEGORY:Ranged)|
				WeapArr[WeapPos].setOutputFormat(1);
|IIF(WEAPON.NOT_EQUIPPED.%weap.ISTYPE.Bow:FALSE.AND.WEAPON.NOT_EQUIPPED.%weap.ISTYPE.Crossbow:FALSE.AND.WEAPON.NOT_EQUIPPED.%weap.ISTYPE.Blowgun:FALSE.AND.WEAPON.NOT_EQUIPPED.%weap.ISTYPE.Sling:FALSE)|
|IIF(WEAPON.NOT_EQUIPPED.%weap.CONTENTS:0)|
				fooF = ParseEnergy("", "|WEAPON.NOT_EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|ELSE|
|FOR,%ammo,0,WEAPON.NOT_EQUIPPED.%weap.CONTENTS,1,0|
					fooA = "|WEAPON.NOT_EQUIPPED.%weap.CONTENTS.%ammo|";
					fooB = "|WEAPON.NOT_EQUIPPED.%weap.CONTENTS.%ammo.SPROP|";
					fooF = ParseEnergy(fooB, "|WEAPON.NOT_EQUIPPED.%weap.SPROP|"); 
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.CONTENTS.%ammo.TOTALHIT|", "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.CONTENTS.%ammo.DAMAGE|" );
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDFOR|
|ENDIF|
|ENDIF|
|IIF(WEAPON.NOT_EQUIPPED.%weap.ISTYPE.Bow:TRUE)|
				fooF = ParseEnergy("", "|WEAPON.NOT_EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGEALL.%equip1.TYPE:Arrow)|
					fooA = "|EQ.MERGEALL.%equip1.NAME|"; 
					fooB = "|EQ.MERGEALL.%equip1.SPROP|"; 
					fooF = ParseEnergy(fooB, "|WEAPON.NOT_EQUIPPED.%weap.SPROP|"); 
					enchantment = ParseEnchantment("|EQ.MERGEALL.%equip1.TYPE|");
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range|'", modAttackBonusString("|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", enchantment), modDamageString("|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.DAMAGE|", enchantment, "N"));
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDIF|
|ENDFOR|
|ENDIF|
|IIF(WEAPON.NOT_EQUIPPED.%weap.ISTYPE.Crossbow:TRUE)|
				fooF = ParseEnergy("", "|WEAPON.NOT_EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGEALL.%equip1.TYPE:Bolt)|
					fooA = "|EQ.MERGEALL.%equip1.NAME|"; 
					fooB = "|EQ.MERGEALL.%equip1.SPROP|"; 
					fooF = ParseEnergy(fooB, "|WEAPON.NOT_EQUIPPED.%weap.SPROP|"); 
					enchantment = ParseEnchantment("|EQ.MERGEALL.%equip1.TYPE|");
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range|'", modAttackBonusString("|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", enchantment), modDamageString("|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.DAMAGE|", enchantment, "N"));
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDIF|
|ENDFOR|
|ENDIF|
|IIF(WEAPON.NOT_EQUIPPED.%weap.ISTYPE.Blowgun:TRUE)|
				fooF = ParseEnergy("", "|WEAPON.NOT_EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGEALL.%equip1.TYPE:Dart)|
					fooA = "|EQ.MERGEALL.%equip1.NAME|"; 
					fooB = "|EQ.MERGEALL.%equip1.SPROP|"; 
					fooF = ParseEnergy(fooB, "|WEAPON.NOT_EQUIPPED.%weap.SPROP|"); 
					enchantment = ParseEnchantment("|EQ.MERGEALL.%equip1.TYPE|");
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range|'", modAttackBonusString("|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", enchantment), modDamageString("|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.DAMAGE|", enchantment, "N"));
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDIF|
|ENDFOR|
|ENDIF|
|IIF(WEAPON.NOT_EQUIPPED.%weap.ISTYPE.Sling:TRUE)|
				fooF = ParseEnergy("", "|WEAPON.NOT_EQUIPPED.%weap.SPROP|"); 
				RangedStuff = new WeaponRangedAmmoData( "", "", fooF );
|FOR,%range,0,4,1,0|
					RangedStuff.addRangeIncrement( "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range|'", "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.DAMAGE|" );
|ENDFOR|
				WeapArr[WeapPos].addRangedData( RangedStuff );
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGEALL.%equip1.TYPE:SlingStone)|
					fooA = "|EQ.MERGEALL.%equip1.NAME|"; 
					fooB = "|EQ.MERGEALL.%equip1.SPROP|"; 
					fooF = ParseEnergy(fooB, "|WEAPON.NOT_EQUIPPED.%weap.SPROP|"); 
					enchantment = ParseEnchantment("|EQ.MERGEALL.%equip1.TYPE|");
					if( fooA == "") fooA = "normal";
					RangedStuff = new WeaponRangedAmmoData( fooA, fooB, fooF );
|FOR,%range,0,4,1,0|
						RangedStuff.addRangeIncrement( "|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range|'", modAttackBonusString("|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.TOTALHIT|", enchantment), modDamageString("|WEAPON.NOT_EQUIPPED.%weap.RANGELIST.%range.DAMAGE|", enchantment, "N"));
|ENDFOR|
					WeapArr[WeapPos].addRangedData( RangedStuff );
|ENDIF|
|ENDFOR|
|ENDIF|
|ELSE|
|IIF(WEAPON.NOT_EQUIPPED.%weap.ISTYPE.Double.OR.WEAPON.NOT_EQUIPPED.%weap.CATEGORY:Non-Standard-Melee.OR.WEAPON.NOT_EQUIPPED.%weap.CATEGORY:NATURAL)|
				WeapArr[WeapPos].setOutputFormat(2);
				WeapArr[WeapPos].energy = ParseEnergy("", "|WEAPON.NOT_EQUIPPED.%weap.SPROP|"); 
|IIF(WEAPON.NOT_EQUIPPED.%weap.CATEGORY:NATURAL)|
|IIF(EQ.MERGEALL.IS.AmuletOfMightyFists.0.EQUIPPED:Y)| 
				WeapArr[WeapPos].energy = ParseEnergy("", "|EQ.MERGEALL.IS.AmuletOfMightyFists.0.SPROP|"); 
				WeapArr[WeapPos].sprop = "|EQ.MERGEALL.IS.AmuletOfMightyFists.0.SPROP|"; 
|ENDIF|
|ENDIF|
|ELSE|
				WeapArr[WeapPos].setOutputFormat(3);
				WeapArr[WeapPos].addMeleeVector("|WEAPON.NOT_EQUIPPED.%weap.BASEHIT|", "|WEAPON.NOT_EQUIPPED.%weap.OHHIT|", "|WEAPON.NOT_EQUIPPED.%weap.THHIT|", "|WEAPON.NOT_EQUIPPED.%weap.TWPHITH|", "|WEAPON.NOT_EQUIPPED.%weap.TWPHITL|", "|WEAPON.NOT_EQUIPPED.%weap.TWOHIT|", "|WEAPON.NOT_EQUIPPED.%weap.BASICDAMAGE|", "|WEAPON.NOT_EQUIPPED.%weap.OHDAMAGE|", "|WEAPON.NOT_EQUIPPED.%weap.THDAMAGE|", "|WEAPON.NOT_EQUIPPED.%weap.BASICDAMAGE|", "|WEAPON.NOT_EQUIPPED.%weap.BASICDAMAGE|", "|WEAPON.NOT_EQUIPPED.%weap.OHDAMAGE|" );
				WeapArr[WeapPos].energy = ParseEnergy("", "|WEAPON.NOT_EQUIPPED.%weap.SPROP|"); 
|ENDIF|
|ENDIF|
		WeapPos = WeapPos + 1;
	}
|ENDFOR|

// Set up the table of information about the checks
CheckArr[FORTindex] = new Check("Fortitude", "Constitution", |CHECK.FORTITUDE.TOTAL|, |CHECK.FORTITUDE.BASE|,2,|CHECK.FORTITUDE.MAGIC|,|CHECK.FORTITUDE.EPIC|,|CHECK.FORTITUDE.MISC.NOMAGIC.NOSTAT|);
CheckArr[REFindex] = new Check("Reflex", "Dexterity", |CHECK.REFLEX.TOTAL|, |CHECK.REFLEX.BASE|,1,|CHECK.REFLEX.MAGIC|,|CHECK.REFLEX.EPIC|,|CHECK.REFLEX.MISC.NOMAGIC.NOSTAT|);
CheckArr[WILLindex] = new Check("Will", "Wisdom", |CHECK.WILL.TOTAL|, |CHECK.WILL.BASE|,4,|CHECK.WILL.MAGIC|,|CHECK.WILL.EPIC|,|CHECK.WILL.MISC.NOMAGIC.NOSTAT|);
// Set up the attack information table
ATKArr[0] = new ATK("Melee","|ATTACK.MELEE.TOTAL|","|ATTACK.MELEE|",STRindex,|ATTACK.MELEE.SIZE|,|ATTACK.MELEE.EPIC|,|ATTACK.MELEE.MISC|);
ATKArr[1] = new ATK("Ranged","|ATTACK.RANGED.TOTAL|","|ATTACK.RANGED|",DEXindex,|ATTACK.RANGED.SIZE|,|ATTACK.RANGED.EPIC|,|ATTACK.RANGED.MISC|);
|IIF(VAR.UseCombatManueverBonus:1)|
CMB_Pos = 2;
ATKArr[2] = new ATK("CMB","|VAR.CMB.INTVAL.SIGN|","|ATTACK.MELEE.BASE|",STRindex,|VAR.CM_SizeMod.INTVAL.SIGN|,|VAR.CMB_Epic.INTVAL.SIGN|,|VAR.CMB_Misc.INTVAL.SIGN|);
CMD_Pos = 3;
ATKArr[3] = new ATK("CMD","|VAR.CMD.INTVAL.SIGN|","|ATTACK.MELEE.BASE|",STRDEXindex,|VAR.CM_SizeMod.INTVAL.SIGN|,|VAR.CMD_Epic.INTVAL.SIGN|,|VAR.CMD_Misc.INTVAL.SIGN|);
|ELSE|
ATKArr[2] = new ATK("Grapple","|ATTACK.GRAPPLE.TOTAL|","|ATTACK.GRAPPLE|",STRindex,|ATTACK.GRAPPLE.SIZE|,|ATTACK.GRAPPLE.EPIC|,|ATTACK.GRAPPLE.MISC|);
|ENDIF|
// Now, set up the list of skills
|FOR,%skill,0,${count("SKILLSIT", "VIEW=VISIBLE_EXPORT")-1},1,0|
SkillArr[%skill] = new Skill("|SKILL.%skill|","|SKILL.%skill.ABILITY|",|SKILL.%skill.TOTAL|,|SKILL.%skill.ABMOD|,|SKILL.%skill.RANK|,|SKILL.%skill.MISC|,"|SKILL.%skill.UNTRAINED|","|SKILL.%skill.EXPLAIN|");
|ENDFOR|
// A variable of type Ability supports the following
// Only those marked with * should be modified after creation
//  name           string    RW STR
//  longname       string    RW Strength
//  Base           int       RW base value       16 or "*" (undead or construct or whatever)
//  BaseMod        int??     RW base modifier     3
//  val            int       RW start value       16 or "*" (undead or construct or whatever)
//  modifier       int??     RW start modifier     3
// *tempvalue      int       RW modified value   18
// *tempmodifier   int??     RW modified modifier 4
//  hasTempMod     bool      RO true if object is in a modified (non-default) state
//  curmodifier    int       RO gives the current modifier taking current state into account
//  curModifierDiff int      RO gives the difference between tempmodifier and modifier
//  visible        bool      RO is this stat visible in the statblock output 
//  indexNum       int       RO Which stat index is this?  If STRDEX, we compute total from STR and DEX.
function Ability(nName,nLongName,nBase,nBaseMod,nValue,nMod,nVisible,nIndex){
	this.name = nName;
	this.longname = nLongName;
	this.indexNum = nIndex;
	this.Base = nBase;
	this.BaseMod = nBaseMod;
	if ( nIndex == STRDEXindex) {
		this.BaseMod = AbArr[STRindex].BaseMod + AbArr[DEXindex].BaseMod;
	}
	this.visible = nVisible;
	if ( nValue == "*" )
		this.val = nValue;
	else
		this.val = Math.round(nValue);  // Convert to numeric form
	this.modifier = nMod;
	if ( nIndex == STRDEXindex) {
		this.modifier = AbArr[STRindex].modifier + AbArr[DEXindex].modifier;
	}
	if ( this.val == "*" )
		this.tempvalue = 0;
	else
		this.tempvalue = Math.round(nValue);
	this.tempmodifier = nMod;
	if ( nIndex == STRDEXindex) {
		this.tempmodifier = AbArr[STRindex].tempmodifier + AbArr[DEXindex].tempmodifier;
	}
	this.hasTempMod = AbFlag;
	this.curmodifier = AbCurMod;
	this.curModifierDiff = AbModDiff;
}
function AbModDiff(){
	if(this.indexNum == STRDEXindex) {
		if (this.hasTempMod() == FALSE)
			return 0;
		rc = Math.round(AbArr[STRindex].tempmodifier) - Math.round(AbArr[STRindex].modifier) + Math.round(AbArr[DEXindex].tempmodifier) - Math.round(AbArr[DEXindex].modifier);
		return rc;
	}
	return ((this.hasTempMod())?this.tempmodifier-this.modifier:0)
}
function AbCurMod(){
	if(this.indexNum == STRDEXindex) {
		if (this.hasTempMod() == FALSE)
			rc = AbArr[STRindex].modifier + AbArr[DEXindex].modifier;
		else
			rc = AbArr[STRindex].tempmodifier + AbArr[DEXindex].tempmodifer;
		return rc;
	}
	return ((this.hasTempMod())?this.tempmodifier:this.modifier)
}
function AbFlag(){
	if ( this.val == '*' )
	   return FALSE;
	if ( this.indexNum == STRDEXindex ) {
		if (AbArr[STRindex].val != AbArr[STRindex].tempval)
			return TRUE;
		if (AbArr[DEXindex].val != AbArr[DEXindex].tempval)
			return TRUE;
	}
	return !(this.val == this.tempvalue);
}
function StatNr(stat){
	tempStatNR = -1;
	switch (stat) {
		case "STR" :
			tempStatNR = STRindex;
			break;
		case "DEX" :
			tempStatNR = DEXindex;
			break;
		case "CON" :
			tempStatNR = CONindex;
			break;
		case "INT" :
			tempStatNR = INTindex;
			break;
		case "WIS" :
			tempStatNR = WISindex;
			break;
		case "CHA" :
			tempStatNR = CHAindex;
			break;
		default :
			tempStatNR = -1;
			break;
	}
	return tempStatNR;
}
// A variable of type Check supports the following
// Only those marked with * should be modified after creation
//  name           string  RW  Fortitude
//  ability        string  RW  Constitution
//  val            int     RO  current value taking everything into account
//  total          int     RW  Total check as passed by PCGen
//  base           int     RW  Class-defined base value
//  statNr         int     RW  Which stat modfies this check (0=STR, 1=DEX, etc)
//  statmodifier   int     RO  Current modifier based on current value of the appropriate stat (via Ability class in global AbArr variable)
//  magic          int     RW  Modifier due to magic
//  race           int     RW  Modifier due to race
//  miscBase       int     RW  Base Modifier due to "other" factors subtracting magic and race and stat
// *tempmodifier   int??   RW  add'l modifier due to some other factor (i.e. Barb Rage)
//  hasTempMod     bool    RO  true if a tempmodifier is in effect
//  statmodflag    bool    RO  true if affected by a temporary stat modifier
function Check(nName,nAb,nValue,nBase,nStatNrForMod,nMagic,nEpic,nMisc){
	this.name = nName;
	this.ability = nAb;
	this.val = CheckValue;
	this.total = nValue;
	this.base = nBase;
	this.statNr = nStatNrForMod;
	this.statmodifier = CheckStatMod;
	this.magic = nMagic;
	this.epic = nEpic;
	this.misc = nMisc;
	this.tempmodifier = 0;
	this.hasTempMod = CheckFlag;
	this.statmodflag = CheckStatModFlag;
}
function CheckValue(){
	temp = (this.total+AbArr[this.statNr].curModifierDiff()+this.tempmodifier);
	return temp;
}
function CheckStatMod(){
	return AbArr[this.statNr].curmodifier();
}
function CheckFlag(){
	return (this.tempmodifier != 0);
}
function CheckStatModFlag(){
	return AbArr[this.statNr].hasTempMod();
}
function rollDice(numDice, dieSize){
	var result = 0;
	if(numDice == 0)
		return 0;
	if(dieSize == 0)
		return 0;
	for (dieCount=0; dieCount<numDice; dieCount++) {
		result = result + (Math.round(Math.random() * dieSize) % dieSize + 1);
	}
	return result;
}
// roll() is not actually used, as rollIntoDIV or RollAttack have cleaner displays.
//  It has been left in for incase someone needs a Roll into an Alert() popup.
function roll(numDice, dieSize, bonus, caption){
	result = rollDice(numDice, dieSize);
	var totalResult = 0;
	totalResult += minOne(result + bonus);
	var msg = caption + '\n' + "Result";
	msg += ": " + result + processBonus( bonus) + "="+ totalResult;
	alert(msg);
}
// Global: newcolorcounter cycles through pastels and is used for the background in roll divs.
newcolorcounter = 1;
function newcolor(){
	newcolorcounter = newcolorcounter + 1;
	if (newcolorcounter > 5) newcolorcounter = 0;
	if (newcolorcounter == 0) colorDIV = "#FFCCFF";
	if (newcolorcounter == 1) colorDIV = "#CCFFFF";
	if (newcolorcounter == 2) colorDIV = "#FFFFCC";
	if (newcolorcounter == 3) colorDIV = "#FFCCCC";
	if (newcolorcounter == 4) colorDIV = "#CCCCFF";
	if (newcolorcounter == 5) colorDIV = "#CCFFCC";
	return colorDIV;
}
// numDice     = Number of Dice to roll
// dieSize     = obviously the size of the die
// bonus       = the +2 or -1 as appropriate
// caption     = Any text to precede the result of the roll
// theDIV      = the id of the div to write the information into
// (theDIV)_TD = the outer encasing div that gets it's background color changed.
// justResult  = 1 = just print the numeric result of the roll, not the math to get there or caption.
function rollIntoDIV(numDice, dieSize, bonus, caption, theDIV, justResult) {
	result = rollDice(numDice, dieSize);
	var totalResult = 0;
	totalResult += minOne(result + bonus);
	var msg = caption + '\n' + "Result";
	msg += ": " + result + processBonus( bonus) + "="+ totalResult;
	outerTD = theDIV + "_TD";
	if (document.getElementById(theDIV) != null) {
		if(justResult == 1) {
			document.getElementById(theDIV).innerHTML = " " + totalResult;
			if (document.getElementById(outerTD) != null) {
				document.getElementById(outerTD).bgColor = newcolor();
			}
		} else {
			document.getElementById(theDIV).innerHTML = msg;
			if (document.getElementById(outerTD) != null) {
				document.getElementById(outerTD).bgColor = newcolor();
			}
		}
	}
	// We need to write the results to two divs occasionally.  The second has "_SND" appended to the name.
	outerTD = theDIV + "_TD_SND";
	SndDIV = theDIV + "_SND";
	if (document.getElementById(SndDIV) != null) {
		if(justResult == 1) {
			document.getElementById(SndDIV).innerHTML = " " + totalResult;
			if (document.getElementById(outerTD) != null) {
				document.getElementById(outerTD).bgColor = newcolor();
			}
		} else {
			document.getElementById(SndDIV).innerHTML = msg;
			if (document.getElementById(outerTD) != null) {
				document.getElementById(outerTD).bgColor = newcolor();
			}
		}
	}
	RecordDiceRoll(msg); // record the fluffy version in the "Color Key" with a timestamp.
}
function RollAttack(numDice, dieSize, bonus, DAMnumDice, DAMdieSize, DAMbonus, critMin, caption, theDIV, justResult) {
	var msg = caption + '\n' + "Result";
	var shortmsg = "";
	var AttackResult = 0;
	var DamageResult = 0;
	var swings = new Array();
	if(bonus.search(/#/) == -1) { // +14/+8/+2 comes to us as +14#+8#+2 so the function call doesn't
		swings[0] = bonus;     		// do math on the incoming value before handing it to us.  Split
	} else {								// the swings up if there are multiples, and process.
		swings = bonus.split("#");
	}
	for (x=0; x<swings.length; x++) {
		if(swings[x] != "") {
			result = rollDice(numDice, dieSize);
			AttackResult = 0;
			AttackResult += result + parseInt(swings[x]);
			if(x > 0) 
				shortmsg +="<br />";
			shortmsg += "H: " + AttackResult;
			msg += ": Attack: " + result + processBonus(parseInt(swings[x])) + "="+ AttackResult;
			Damresult = rollDice(DAMnumDice, DAMdieSize);
			DamageResult = 0;
			DamageResult += Damresult + DAMbonus;
			shortmsg = shortmsg + ", D: " + DamageResult;
			msg += ", Damage: " + Damresult + processBonus(DAMbonus) + "="+ DamageResult;
			if(result >= critMin) {
				shortmsg = shortmsg + "<br /><span class='c8mB'>Crit Threat</span>";
				msg += ", <b>Critical Threat</b>";
			}
		}
	}
	outerTD = theDIV + "_TD";
	if (document.getElementById(theDIV) != null) {
		if(justResult == 1) {
			document.getElementById(theDIV).innerHTML = " " + shortmsg;
			if (document.getElementById(outerTD) != null) {
				document.getElementById(outerTD).bgColor = newcolor();
			}
		} else {
			document.getElementById(theDIV).innerHTML = msg;
			if (document.getElementById(outerTD) != null) {
				document.getElementById(outerTD).bgColor = newcolor();
			}
		}
	RecordDiceRoll(msg);
	}
}
function processBonus(damage)
{
	if (damage >= 0)
		return "+" + damage;
	else
		return damage;
}
function minOne(roll)
{
	if (roll <= 0)
		return parseInt(1);
	return roll;
}
function rollTurning(checkBonus,turnDice,turnDieSize,turnBonus,turnLvl,intoDIV,caption) {
	var checkResult = rollDice(1,20) + checkBonus;
	var maxHD = 0;
	if (checkResult <= 0) {
		maxHD = turnLvl - 4;
	} else if (checkResult <= 3) {
		maxHD = turnLvl - 3;
	} else if (checkResult <= 6) {
		maxHD = turnLvl - 2;
	} else if (checkResult <= 9) {
		maxHD = turnLvl - 1;
	} else if (checkResult <= 12) {
		maxHD = turnLvl;
	} else if (checkResult <= 15) {
		maxHD = turnLvl + 1;
	} else if (checkResult <= 18) {
		maxHD = turnLvl + 2;
	} else if (checkResult <= 21) {
		maxHD = turnLvl + 3;
	} else {
		maxHD = turnLvl + 4;
	}
	var totalHD = rollDice(turnDice,turnDieSize) + turnBonus;
	var msg = caption;
	if(maxHD < 1)
		msg += "Check=" +checkResult+ ":&nbsp;&nbsp;&nbsp; (max " + maxHD + " HD) Failed";
	else {
		msg += "Check=" +checkResult+ ":&nbsp;&nbsp;&nbsp; " + totalHD + " total HD<br />(max " + maxHD + " HD each)";
		if(intoDIV.substr(0,6) == "Rebuke") {
				msg += " (Control " + turnLvl + " HD total)";
		} else {
			if (turnLvl/2  >= 1) 
				msg += " (Destroy " + parseInt(turnLvl/2) + " HD)";
		}
	}
	document.getElementById(intoDIV).innerHTML = " " + msg;
	document.getElementById(intoDIV).bgColor = newcolor();
	RecordDiceRoll(intoDIV + ' ' + msg);
}

var SpecialAttacksList = new Array();
function NewSpecialAttacks(sNum, sName, sDesc, sAspect, sBenefit, sSource) {
	this.number = sNum;
	this.Name = sName;
	this.Description = sDesc;
	this.Source = sSource;
	this.Aspect = sAspect;
	this.showAspect = 0;
	if (sAspect.length > 0)
			  this.showAspect = 1;
	this.Benefit = sBenefit;
	if(sBenefit.length > sDesc.length) {
		this.Description = sBenefit;
	}
} <!-- Yes, the variables are assigned outside the function to make them global -->
|IIF(count("ABILITIES";"CATEGORY=Special Ability";"TYPE=SpecialAttack")>0)|
|FOR,%specialAttack,0,count("ABILITIES","CATEGORY=Special Ability","TYPE=SpecialAttack")-1,1,0|
SpecialAttacksList[%specialAttack] = new NewSpecialAttacks(%specialAttack, "|ABILITYALL.Special Ability.%specialAttack.TYPE=SpecialAttack|",  "|ABILITYALL.Special Ability.%specialAttack.TYPE=SpecialAttack.DESC|", "|ABILITYALL.Special Ability.%specialAttack.TYPE=SpecialAttack.ASPECT|", "|ABILITYALL.Special Ability.%specialAttack.TYPE=SpecialAttack.BENEFIT|","|ABILITYALL.Special Ability.%specialAttack.TYPE=SpecialAttack.SOURCE|");
|ENDFOR|
|ENDIF|

var SpecialQualitiesList = new Array();
function NewSpecialQualities(sNum, sName, sDesc, sAspect, sBenefit, sSource) {
	this.number = sNum;
	this.Name = sName;
	this.Description = sDesc;
	this.Source = sSource;
	this.Aspect = sAspect;
	this.showAspect = 0;
	if (sAspect.length > 0)
			  this.showAspect = 1;
	this.Benefit = sBenefit;
	if(sBenefit.length > sDesc.length) {
		this.Description = sBenefit;
	}
} <!-- Yes, the variables are assigned outside the function to make them global -->
SA_cnt = 0;
|IIF(count("ABILITIES";"CATEGORY=Special Ability")>0)|
|FOR,%bar,0,count("ABILITIES","CATEGORY=Special Ability","VISIBILITY=DEFAULT[or]VISIBILITY=OUTPUT_ONLY")-1,1,0|
|IIF(ABILITYALL.Special Ability.%bar.TYPE=SpecialAttack)|
|ELSE|
SpecialQualitiesList[%bar] = new NewSpecialQualities(%bar, "|ABILITYALL.Special Ability.VISIBLE.%bar.!TYPE=SpecialAttack|",  "|ABILITYALL.Special Ability.VISIBLE.%bar.!TYPE=SpecialAttack.DESC|", "|ABILITYALL.Special Ability.VISIBLE.%bar.!TYPE=SpecialAttack.ASPECT|", "|ABILITYALL.Special Ability.VISIBLE.%bar.!TYPE=SpecialAttack.BENEFIT|", "|ABILITYALL.Special Ability.VISIBLE.%bar.!TYPE=SpecialAttack.SOURCE|");
|ENDIF|
|ENDFOR|
|ENDIF|

SpecialQualitiesListCurrent = -1;
SpecialAttacksListCurrent = -1;
function ToggleLayer( whichTable, whichLayer, whichText ) {
	var Telem, Tvis, Lelem, Lvis, then, now, shortThen, shortNow;
	Telem = document.getElementById( whichTable );
	Tvis = Telem.style;
	Lelem = document.getElementById( whichLayer );
	Lvis = Lelem.style;
	// if the style.display value is blank we try to figure it out here
	if(Tvis.display==''&&Telem.offsetWidth!=undefined&&Telem.offsetHeight!=undefined)
		Tvis.display = (Telem.offsetWidth!=0&&Telem.offsetHeight !=0)?'block':'none';
	if(whichText == -1) { // Clear the block
		Tvis.display = 'none';
		return;
	}
	if(whichTable == 'SPECIAL_ATTACKS_Table') {
		then = SpecialAttacksListCurrent;
		SpecialAttacksListCurrent = whichText;
		now = "<B>" + SpecialAttacksList[whichText].Name  + "</B> ~ " + SpecialAttacksList[whichText].Description;
		if((ShowSources == 1) && (ShowAspects == 1) && (SpecialAttacksList[whichText].showAspect == 1)) {
			now = now + "<br />" + SpecialAttacksList[whichText].Aspect ;
		}
		if(ShowSources == 1)
				  now = now + "<br />" + SpecialAttacksList[whichText].Source ;
	} else if(whichTable == 'SPECIAL_QUALITIES_Table') {
		then = SpecialQualitiesListCurrent;
		SpecialQualitiesListCurrent = whichText;
		now = "<B>" + SpecialQualitiesList[whichText].Name  + "</B> ~ " + SpecialQualitiesList[whichText].Description;
		if((ShowSources == 1) && (ShowAspects == 1) && (SpecialQualitiesList[whichText].showAspect == 1)) {
			now = now + "<br />" + SpecialQualitiesList[whichText].Aspect ;
		}
		if(ShowSources == 1)
				  now = now + "<br />" + SpecialQualitiesList[whichText].Source ;
	}
	if(then != whichText) {
		Tvis.display = 'block';
	} else if(Tvis.display == '') {
		Tvis.display = 'none';
	} else if(Tvis.display == 'block') {
		Tvis.display = 'none';
	} else {
		Tvis.display = 'block';
	}
	document.getElementById(whichLayer).innerHTML = now;
}
function ToggleDIV( whichDIV ) {
	var elem, vis;
	elem = document.getElementById( whichDIV );
	vis = elem.style;
	if(vis.display == 'none') {
		vis.display = 'inline';
	} else if(vis.display == '') {
		vis.display = 'inline';
	} else if(vis.display == 'inline') {
		vis.display = 'none';
	} else if(vis.display == 'block') {
		vis.display = 'none';
	} else {
		vis.display = 'none';
	}
}
function ToggleSources() {
	if(ShowSources == 0) {
		ShowSources = 1;
		document.getElementById('ShowSources').innerHTML = "Show Sources: <a class=\"c10yB\" name=\"#\" onclick=\"ToggleSources();\">On</a>";
	} else {
		ShowSources = 0;
		document.getElementById('ShowSources').innerHTML = "Show Sources: <a class=\"c10yB\" name=\"#\" onclick=\"ToggleSources();\">Off</a>";
	}
	BuildFeatsCompTable();
	BuildFeatsBenefitTable();
	BuildEqCompTable();
	ToggleLayer('SPECIAL_ATTACKS_Table','SPECIAL_ATTACKS_Details','-1');
	ToggleLayer('SPECIAL_QUALITIES_Table','SPECIAL_QUALITIES_Details','-1');
}
function BuildFeatsCompTable() {
	newHTML = "";
	newHTML = newHTML + '<table width="100%" cellspacing="0" cellpadding="2">\n';
	newHTML = newHTML + '<tr><td class="c10yB" colspan="2"><a name="#" onClick="CycleFeats();">FEATS</a></td></tr>\n';
	newHTML = newHTML + '<tr><td class="lt8sB" width="20%">NAME</td><td class="lt8sB" width="80%">SHORT DESCRIPTION</td></tr>\n';
|FOR,%feat,0,COUNT[FEATSALL.VISIBLE]-1,1,0|
|OIF(EVEN:%feat,newHTML = newHTML + '<tr bgcolor="#DDDDDD">';,newHTML = newHTML + '<tr bgcolor="white">';)|
	newHTML = newHTML + '<td valign="top" class="l8s">|FEATALL.VISIBLE.%feat|</td>\n';
	newHTML = newHTML + '<td valign="top" align="left" class="l8s">|FEATALL.VISIBLE.%feat.DESC|\n';
	if ((ShowSources == 1) && (ShowAspects == 1))
		if(|FEATALL.VISIBLE.%feat.ASPECTCOUNT| > 0)
			newHTML = newHTML + '<br />|FEATALL.VISIBLE.%feat.ASPECT|\n';
	if (ShowSources == 1)
		newHTML = newHTML + '<br />|FEATALL.VISIBLE.%feat.SOURCE|\n';
	newHTML = newHTML + '</td></tr>\n';
|ENDFOR|
	newHTML = newHTML + '</table>\n';
	document.getElementById('FeatsComprehensive').innerHTML = newHTML;
}
function BuildFeatsBenefitTable() {
	newHTML = "";
	newHTML = newHTML + '<table width="100%" cellspacing="0" cellpadding="2">\n';
	newHTML = newHTML + '<tr><td class="c10yB" colspan="2"><a name="#" onClick="CycleFeats();">FEATS</a></td></tr>\n';
	newHTML = newHTML + '<tr><td class="lt8sB" width="20%">NAME</td><td class="lt8sB" width="80%">LONGER BENEFIT DESCRIPTION</td></tr>\n';
|FOR,%feat,0,COUNT[FEATSALL.VISIBLE]-1,1,0|
|OIF(EVEN:%feat,newHTML = newHTML + '<tr bgcolor="#DDDDDD">';,newHTML = newHTML + '<tr bgcolor="white">';)|
	newHTML = newHTML + '<td valign="top" class="l8s">|FEATALL.VISIBLE.%feat|</td>\n';
	newHTML = newHTML + '<td valign="top" align="left" class="l8s">|FEATALL.VISIBLE.%feat.BENEFIT|\n';
	if ((ShowSources == 1) && (ShowAspects == 1))
		if(|FEATALL.VISIBLE.%feat.ASPECTCOUNT| > 0)
			newHTML = newHTML + '<br />|FEATALL.VISIBLE.%feat.ASPECT|\n';
	if (ShowSources == 1)
		newHTML = newHTML + '<br />|FEATALL.VISIBLE.%feat.SOURCE|\n';
	newHTML = newHTML + '</td></tr>\n';
|ENDFOR|
	newHTML = newHTML + '</table>\n';
	document.getElementById('FeatsBenefitDiv').innerHTML = newHTML;
}
function BuildEqCompTable() {
	newHTML = "";
	newHTML = newHTML + '<table width="100%" cellspacing="0" cellpadding="0" border="0">\n<tr>\n'; 
	newHTML = newHTML + '<td class="c10yB"><a name="#" onclick="CycleEquipment()">EQUIPMENT</a>&nbsp;&nbsp;&nbsp;(';
	newHTML = newHTML + StripZero("|TOTAL.WEIGHT|") + ' - ' + StripZero("|WEIGHT.LIGHT|") + '/' + StripZero("|WEIGHT.MEDIUM|") + '/' + StripZero("|WEIGHT.HEAVY|") + '&nbsp;&nbsp;&nbsp;&nbsp;\n';
|IIF(TOTAL.LOAD:Light)|
	newHTML = newHTML + '<span style="font-size:10pt; font-weight:bold; color:green;">|TOTAL.LOAD| Load</span>\n';
|ENDIF|
|IIF(TOTAL.LOAD:Medium)|
	newHTML = newHTML + '<span style="font-size:10pt; font-weight:bold; color:yellow;">|TOTAL.LOAD| Load</span>\n';
|ENDIF|
|IIF(TOTAL.LOAD:Heavy)|
	newHTML = newHTML + '<span style="font-size:10pt; font-weight:bold; color:orange;">|TOTAL.LOAD| Load</span>\n';
|ENDIF|
|IIF(TOTAL.LOAD:Overload)|
	newHTML = newHTML + '<span style="font-size:10pt; font-weight:bold; color:red;">|TOTAL.LOAD|</span>\n';
|ENDIF|
	newHTML = newHTML + '</td></tr><tr><td width="100%" class="lt6">\n';
	newHTML = newHTML + '<table width="100%" cellspacing="0" cellpadding="0" border="0">\n';
	newHTML = newHTML + '<tr><td width="70%" class="lt8sB">ITEM</td><td width="12%" class="ct8sB">LOCATION</td>\n';
	newHTML = newHTML + '    <td width="6%" class="ct8sB">QTY</td><td width="6%" class="ct8sB">WT.</td>\n';
	newHTML = newHTML + '    <td width="6%" class="ct8sB">GP COST</td></tr>\n';
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGENONE.%equip1.LOCATION:Equipped)|
	newHTML = newHTML + EvenOddLine();
	newHTML = newHTML + '<td class="lt9s">&nbsp;|EQ.MERGENONE.%equip1.NAME.MAGIC~<b>~</b>|\n';
|IIF(EQ.MERGENONE.%equip1.SPROP: )|
	newHTML = newHTML + '<br /><span class="lt7">(|EQ.MERGENONE.%equip1.SPROP|)</span>\n';
|ENDIF|
|IIF(EQ.MERGENONE.%equip1.NOTE: )|
	newHTML = newHTML + '<br /><span class="lt7">(|EQ.MERGENONE.%equip1.NOTE|)</span>\n';
|ENDIF|
|FOR,%charges,1,EQ.MERGENONE.%equip1.CHARGES,1,0|
|IIF(%charges:1)|
	newHTML = newHTML + '<br />&nbsp;&nbsp;&nbsp;|EQ.MERGENONE.%equip1.CHARGES| Charges\n';
|ENDIF|
	newHTML = newHTML + '<font style="font-size: 7pt">&#9744;</font>\n';
|ENDFOR|
|IIF(EQ.MERGENONE.%equip1.TYPE:Consumable)|
	newHTML = newHTML + '<br />';
|FOR,%consumable,1,EQ.MERGENONE.%equip1.CHECKBOXES,1,0|
	newHTML = newHTML + '<font style="font-size: 7pt">&#9744;</font>\n';
|ENDFOR|
|ELSE|
|IIF(EQ.MERGENONE.%equip1.TYPE:Potion)|
	newHTML = newHTML + '<br />';
|FOR,%consumable,1,EQ.MERGENONE.%equip1.CHECKBOXES,1,0|
	newHTML = newHTML + '<font style="font-size: 7pt">&#9744;</font>\n';
|ENDFOR|
|ELSE|
|IIF(EQ.MERGENONE.%equip1.TYPE:Ammunition)|
	newHTML = newHTML + '<br />';
|FOR,%consumable,1,EQ.MERGENONE.%equip1.CHECKBOXES,1,0|
	newHTML = newHTML + '<font style="font-size: 7pt">&#9744;</font>\n';
|ENDFOR|
|ELSE|
|ENDIF|
|ENDIF|
|ENDIF|
	if(ShowSources == 1) 
		newHTML = newHTML + '<br /><span class="lt7">|EQ.MERGENONE.%equip1.SOURCE|</span>\n';
	newHTML = newHTML + '</td>\n';
	newHTML = newHTML + '<td class="ct8s">|EQ.MERGENONE.%equip1.LOCATION|<br /></td>\n';
	newHTML = newHTML + '<td class="ct8s">|EQ.MERGENONE.%equip1.QTY|<br /></td>\n';
	newHTML = newHTML + '<td class="ct8s">|EQ.MERGENONE.%equip1.WT|<br /></td>\n';
	newHTML = newHTML + '<td class="ct8s">|EQ.MERGENONE.%equip1.COST|<br /></td>\n';
	newHTML = newHTML + '</tr>\n';
|ENDIF|
|ENDFOR|
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGENONE.%equip1.LOCATION:Carried)|
	newHTML = newHTML + EvenOddLine();
	newHTML = newHTML + '<td class="lt9s">&nbsp;|EQ.MERGENONE.%equip1.NAME.MAGIC~<b>~</b>|\n';
|IIF(EQ.MERGENONE.%equip1.SPROP: )|
	newHTML = newHTML + '<br /><span class="lt7">(|EQ.MERGENONE.%equip1.SPROP|)</span>\n';
|ENDIF|
|IIF(EQ.MERGENONE.%equip1.NOTE: )|
	newHTML = newHTML + '<br /><span class="lt7">(|EQ.MERGENONE.%equip1.NOTE|)</span>\n';
|ENDIF|
|FOR,%charges,1,EQ.MERGENONE.%equip1.CHARGES,1,0|
|IIF(%charges:1)|
	newHTML = newHTML + '<br />&nbsp;&nbsp;&nbsp;|EQ.MERGENONE.%equip1.CHARGES| Charges\n';
|ENDIF|
	newHTML = newHTML + '<font style="font-size: 7pt">&#9744;</font>\n';
|ENDFOR|
|IIF(EQ.MERGENONE.%equip1.TYPE:Consumable)|
	newHTML = newHTML + '<br />';
|FOR,%consumable,1,EQ.MERGENONE.%equip1.CHECKBOXES,1,0|
	newHTML = newHTML + '<font style="font-size: 7pt">&#9744;</font>\n';
|ENDFOR|
|ELSE|
|IIF(EQ.MERGENONE.%equip1.TYPE:Potion)|
	newHTML = newHTML + '<br />';
|FOR,%consumable,1,EQ.MERGENONE.%equip1.CHECKBOXES,1,0|
	newHTML = newHTML + '<font style="font-size: 7pt">&#9744;</font>\n';
|ENDFOR|
|ELSE|
|IIF(EQ.MERGENONE.%equip1.TYPE:Ammunition)|
	newHTML = newHTML + '<br />';
|FOR,%consumable,1,EQ.MERGENONE.%equip1.CHECKBOXES,1,0|
	newHTML = newHTML + '<font style="font-size: 7pt">&#9744;</font>\n';
|ENDFOR|
|ELSE|
|ENDIF|
|ENDIF|
|ENDIF|
	if(ShowSources == 1) 
		newHTML = newHTML + '<br /><span class="lt7">|EQ.MERGENONE.%equip1.SOURCE|</span>\n';
	newHTML = newHTML + '</td>\n';
	newHTML = newHTML + '<td class="ct8s">|EQ.MERGENONE.%equip1.LOCATION|<br /></td>\n';
	newHTML = newHTML + '<td class="ct8s">|EQ.MERGENONE.%equip1.QTY|<br /></td>\n';
	newHTML = newHTML + '<td class="ct8s">|EQ.MERGENONE.%equip1.WT|<br /></td>\n';
	newHTML = newHTML + '<td class="ct8s">|EQ.MERGENONE.%equip1.COST|<br /></td>\n';
	newHTML = newHTML + '</tr>\n';
|ENDIF|
|ENDFOR|
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGENONE]-1),1,0|
|IIF(EQ.MERGENONE.%equip1.LOCATION:Equipped.OR.EQ.MERGENONE.%equip1.LOCATION:Carried)|
|ELSE|
	newHTML = newHTML + EvenOddLine();
	newHTML = newHTML + '<td class="lt9s">&nbsp;|EQ.MERGENONE.%equip1.NAME.MAGIC~<b>~</b>|\n';
|IIF(EQ.MERGENONE.%equip1.SPROP: )|
	newHTML = newHTML + '<br /><span class="lt7">(|EQ.MERGENONE.%equip1.SPROP|)</span>\n';
|ENDIF|
|IIF(EQ.MERGENONE.%equip1.NOTE: )|
	newHTML = newHTML + '<br /><span class="lt7">(|EQ.MERGENONE.%equip1.NOTE|)</span>\n';
|ENDIF|
|FOR,%charges,1,EQ.MERGENONE.%equip1.CHARGES,1,0|
|IIF(%charges:1)|
	newHTML = newHTML + '<br />&nbsp;&nbsp;&nbsp;|EQ.MERGENONE.%equip1.CHARGES| Charges\n';
|ENDIF|
	newHTML = newHTML + '<font style="font-size: 7pt">&#9744;</font>\n';
|ENDFOR|
|IIF(EQ.MERGENONE.%equip1.TYPE:Consumable)|
	newHTML = newHTML + '<br />';
|FOR,%consumable,1,EQ.MERGENONE.%equip1.CHECKBOXES,1,0|
	newHTML = newHTML + '<font style="font-size: 7pt">&#9744;</font>\n';
|ENDFOR|
|ELSE|
|IIF(EQ.MERGENONE.%equip1.TYPE:Potion)|
	newHTML = newHTML + '<br />';
|FOR,%consumable,1,EQ.MERGENONE.%equip1.CHECKBOXES,1,0|
	newHTML = newHTML + '<font style="font-size: 7pt">&#9744;</font>\n';
|ENDFOR|
|ELSE|
|IIF(EQ.MERGENONE.%equip1.TYPE:Ammunition)|
	newHTML = newHTML + '<br />';
|FOR,%consumable,1,EQ.MERGENONE.%equip1.CHECKBOXES,1,0|
	newHTML = newHTML + '<font style="font-size: 7pt">&#9744;</font>\n';
|ENDFOR|
|ELSE|
|ENDIF|
|ENDIF|
|ENDIF|
	if(ShowSources == 1) 
			  newHTML = newHTML + '<br /><span class="lt7">|EQ.MERGENONE.%equip1.SOURCE|</span>\n';
	newHTML = newHTML + '</td>\n';
	newHTML = newHTML + '<td class="ct8s">|EQ.MERGENONE.%equip1.LOCATION|<br /></td>\n';
	newHTML = newHTML + '<td class="ct8s">|EQ.MERGENONE.%equip1.QTY|<br /></td>\n';
	newHTML = newHTML + '<td class="ct8s">|EQ.MERGENONE.%equip1.WT|<br /></td>\n';
	newHTML = newHTML + '<td class="ct8s">|EQ.MERGENONE.%equip1.COST|<br /></td>\n';
	newHTML = newHTML + '</tr>\n';
|ENDIF|
|ENDFOR|
	newHTML = newHTML + '<tr>\n';
	newHTML = newHTML + '<td width="41%" class="rt8s">TOTAL WEIGHT CARRIED/VALUE&nbsp;&nbsp;</td>\n';
	newHTML = newHTML + '<td width="3%" class="ct8s" colspan="2" nowrap="nowrap">|TOTAL.WEIGHT|</td>\n';
	newHTML = newHTML + '<td width="3%" class="ct8s" colspan="2" nowrap="nowrap">|TOTAL.VALUE|</td>\n';
	newHTML = newHTML + '</tr>\n';
	newHTML = newHTML + '</table>\n';
	newHTML = newHTML + '</td>\n';
	newHTML = newHTML + '</tr>\n';
	newHTML = newHTML + '</table>\n';
	document.getElementById('EquipmentComprehensive').innerHTML = newHTML;
}

// A variable of type ATK ("attack") supports the following
// Only those marked with * should be modified after creation
//  name           string  RW  "Melee" or "Ranged"
//  AttackBonusBase      string  RW  Total attack as passed from PCGen
//  modifyAttackBonus    string  RO Generate the possibly modified) "Attack Bonus" string
//  base           string  RW  base attack values due to classes
//  AttackBonusBaseArr   string array RW base split by "/" into individual attack modifiers
//  abilityNum     int     RW  Which stat modifies this attack (0=STR, 1=DEX, etc)
//  statmodifier   int     RO  Current modifier based on current value of the appropriate stat (via Ability class in global AbArr variable)
//  sizemodifier   int     RW  Attack modifier due to size
//  miscmodifier   int     RW  Additional attack modifiers
//                     NEW     These next two are viewer controlled now in as the Temporary Hit and Temporary Damage fields with +/- boxes.
// *miscTHMod      int     RW  User modify TH.  This is an incremental change!!  e.g. If going from +2 to +4, put 2 here
// *miscDamageMod  int NEW RW  User modify Damage.  This is an incremental change!!  e.g. If going from +2 to +4, put 2 here
//  isModified     bool    RO  True if this attack is modified by a modified underlying stat or other misc change
// *disabled       string  RW  If not empty, displays in place of "Attack Bonus" and damage.
function ATK(nName,nValue,nBase,nStatNrForMod,nSizeMod,nEpicMod,nMiscMod){
	this.name = nName;
	this.AttackBonusBase = nValue;
	this.modifyAttackBonus = ATKWeaponModAttackBonus;
	this.base = nBase;
	this.AttackBonusBaseArr = this.AttackBonusBase.split(";");
	this.abilityNum = nStatNrForMod;
	this.statmodifier = ATKStatMod;
	this.sizemodifier = nSizeMod;
	this.epicmodifier = nEpicMod;
	this.miscmodifier = nMiscMod;
	this.miscTHMod = 0;
	this.miscDamageMod = 0;
	this.isModified = ATKFlag;
	this.disabled = ""
}
function ATKStatMod()
{
	if(this.abilityNum == STRDEXindex) {
		rc = AbArr[STRindex].curmodifier() + AbArr[DEXindex].curmodifier();
		return rc;
	}
	return AbArr[this.abilityNum].curmodifier();
}
function ATKFlag()
{
	if ( this.miscTHMod != 0 )
	   return TRUE;
	if(this.abilityNum == STRDEXindex) {
		if(AbArr[STRindex].hasTempMod() == TRUE)
			return TRUE;
		if(AbArr[DEXindex].hasTempMod() == TRUE)
			return TRUE;
		return FALSE;
	}
	return AbArr[this.abilityNum].hasTempMod();
}
// A variable of type Skill supports the following
// Only those marked with * should be modified after creation
//  name           string  RW  Spot
//  ability        string  RW  Base stat for skill
//  explain        string  RW  Explanation of the MISC build
//  statNr         int     RO  stat number based on .ability
//  total          int     RO  Current skill modifier based on everything
//  statmodifier   int     RO  Modifier due to current base stat modifier (as taken from AbArr global array)
// *rank           int     RW  Current skill ranks
// *miscmodifier   int     RW  Current misc modifier to skill
//  bUseUntrained  bool    RW  true if this skill can be used untrained
//  baseStatModified bool  RO  true if base stat is currently modified by something else
//  notInRageMode  bool    RO  true if skill disallowed in Barb Rage
function Skill(nName,nAbility,nTotal,nStatMod,nRank,nMiscMod,nUseUntrained,nExplain){
	this.name = nName;
	this.ability = nAbility;
	this.explain = nExplain;
	// Shorten name-name class skill check to just class skill...
	var capt = this.name.toUpperCase() + '|PIPE|' + this.name.toUpperCase();
	var shorten = this.explain.replace(capt,"class skill");
	this.explain = shorten;
	shorten = this.name.toUpperCase();
	capt = this.name.toUpperCase() + '|PIPE|' + shorten.replace(/ /g,"");
	shorten = this.explain.replace(capt,"class skill");
	// Insert Ranks too...
	capt = "[Stat] +" + nRank + "[Ranks]";
	this.explain = shorten.replace("[STAT]", capt);
	this.statNr = SkillStatModNr;
	this.total = SkillValue;
	this.statmodifier = SkillStatModifier;
	this.rank = nRank;
	this.miscmodifier = nMiscMod;
	if ( nUseUntrained == 'Y' )
		this.bUseUntrained = TRUE;
	else
		this.bUseUntrained = FALSE;
	this.baseStatModified = SkillFlag;
	this.notInRageMode = checkRedList;
	this.bSkillMastery = false;
	// Figure out whether we have Skill Mastery for this Skill
	for (var i = 0; i < PotentialSkillMasteryList.length; i++)
	{
		var specialAbility = PotentialSkillMasteryList[i].substring(0,13);
		if (specialAbility == "Skill Mastery")
		{
			var lastIndex = PotentialSkillMasteryList[i].lastIndexOf(")");
			if (PotentialSkillMasteryList[i].substring(15, lastIndex) == this.name)
			{
				this.bSkillMastery = true;
			}
		}
	}
}
function checkRedList() {
	tempFlag = FALSE;
	for (i=0;i<SkillRedList.length;i++)
	{
		if ( SkillRedList[i].substr(0,SkillRedList[i].length) == this.name )
		{
		   tempFlag = TRUE;
		}
	}
	return tempFlag;
}
function SkillStatModNr(){
	tempStatNR = "";
	switch (this.ability) {
		case "STR" :
			tempStatNR = STRindex;
			break;
		case "DEX" :
			tempStatNR = DEXindex;
			break;
		case "CON" :
			tempStatNR = CONindex;
			break;
		case "INT" :
			tempStatNR = INTindex;
			break;
		case "WIS" :
			tempStatNR = WISindex;
			break;
		case "CHA" :
			tempStatNR = CHAindex;
			break;
		default :
			tempStatNR = -1;
			break;
	}
	return tempStatNR;
}
function SkillStatModifier()
{
   tStatMod = this.statNr();
   if ( tStatMod == -1 )  // Some skills have no stat base (Literacy)
      return 0;
   else
   	return AbArr[tStatMod].curmodifier();
}
function SkillValue(){
	return (this.statmodifier()+this.miscmodifier+this.rank);
}
function SkillFlag()
{
   tStatMod = this.statNr();
   if ( tStatMod == -1 )  // Some skills have no stat base (Literacy)
      return 0;
   else
      return AbArr[tStatMod].hasTempMod();
}
// A variable of type ACObject supports the following
// Only those marked with * should be modified after creation
//  flatBase       int     RW  Flat-footed AC
//  flat           int     RO  Modified Flat-footed AC
//  flatModified   bool    RO  TRUE if flat != flatBase
//  touchBase      int     RW  touch AC
//  touch          int     RO  Modified touch AC
//  touchModified  bool    RO  TRUE if touch != touchBase
//  totalBase      int     RW  total AC
//  total          int     RO  Modified total AC
//  totalModified  bool    RO  TRUE if total != totalBase
//  base           int     RW  Base AC
//  armor          int     RW  Armor AC modifier due to armor
//  shieldBase     int     RW  Armor AC modifier due to physical shield
//  shield         int     RW  Armor AC modifier due to shield spells or physical shield
//  shieldModified bool    RO  TRUE if shield != shieldBase
//  abilityBase    int     RW  AC modifier due to ability
//  ability        int     RO  AC modifier due to ability as modified by appropriate stats
//  abilityModified bool   RO  TRUE if ability != abilityBase
//  size           int     RW  Current AC modifier due to size
//  naturalarmor   int     RW  Current AC modifier due to natural armor
//  dodge          int     RW  Current AC modifier due to dodge
//  miscBase       int     RW  Unmodified AC modifier due to other affects
//  misc           int     RO  Current AC modifier due to other affects
//  miscModified   bool    RO  TRUE if misc != miscBase
//  maxdex         int     RW  Maximum dex modifier due to armor.  0 MEANS NO MAXDEX
// *rageMod        int     RW  Current AC modifier due to rage
// *defFightMod    int     RW  Current AC modifier due fighting defensively
// *spellACMod     int     RW  Current Armor modifier due spell (eg. Mage Armor)
// *spellShieldMod int     RW  Current Shield modifier due spell (eg. Shield)
// *spellDeflMod   int     RW  Current Deflection modifier due spell (eg. Shield of Faith)
// *spellNatMod    int     RW  Current Natural Armor modifier due spell (eg. Barkskin)
// *spellDodgeMod  int     RW  Current Dodge modifier due spell (eg. Haste)
function ACObject(nFlat,nTouch,nTotal,nBase,nArmor,nShield,nAbility,nSize,nNatural,nDeflection,nDodge,nMisc)
{
	this.spellACMod = 0;
	this.spellDeflMod = 0;
	this.spellNatMod = 0;
	this.spellDodgeMod = 0;
	this.spellShieldMod = 0;
	this.flatBase = nFlat;
	this.flat = ACObjFlat;
	this.flatModified = ACObjFlatModified;
	this.touchBase = nTouch;
	this.touch = ACObjTouch;
	this.touchModified = ACObjTouchModified;
	this.totalBase = nTotal;
	this.total = ACObjTotal;
	this.totalModified = ACObjTotalModified;
	this.base = nBase;
	this.armorBase = nArmor;
	this.armor = ACObjArmor;
	this.armorModified = ACObjArmorModified;
	this.shieldBase = nShield;
	this.shield = ACObjShield;
	this.shieldModified = ACObjShieldModified;
	this.deflectionBase = nDeflection;
	this.deflection = ACObjDeflection;
	this.deflectionModified = ACObjDeflectionModified;
	this.abilityBase = nAbility;
	this.ability = ACObjAbility;
	this.abilityModified = ACObjAbilityModified;
	this.size = nSize;
	this.dodgeBase = nDodge;
	this.dodge = ACObjDodge;
	this.dodgeModified = ACObjDodgeModified;
	this.naturalarmorBase = nNatural;
	this.naturalarmor = ACObjNaturalArmor;
	this.naturalarmorModified = ACObjNaturalArmorModified;
	this.miscBase = nMisc;
	this.misc = ACObjMisc;
	this.miscModified = ACObjMiscModified;
	this.maxdex = Math.round(|MAXDEX|+10)-10;   // NOTE NOTE  the MAXDEX token can be replaced by an empty string, so have to check!
	this.rageMod = 0;
	this.defFightMod = 0;
}
function ACObjFlat()
{
   return this.flatBase-this.armorBase+this.armor()-this.shieldBase+this.shield()-this.deflectionBase+this.deflection()-this.naturalarmorBase+this.naturalarmor()-this.abilityBase+this.ability()-this.miscBase+this.misc();
}
function ACObjFlatModified()
{
   if ( this.flatBase == this.flat() )
      return FALSE;
   else
      return TRUE;
}
function ACObjTouch()
{
   return this.touchBase-this.deflectionBase+this.deflection()-this.dodgeBase+this.dodge()-this.abilityBase+this.ability()-this.miscBase+this.misc();
}
function ACObjTouchModified()
{
   if ( this.touchBase == this.touch() )
      return FALSE;
   else
      return TRUE;
}
function ACObjShield()
{
	out = Math.max(this.shieldBase, this.spellShieldMod);
	return out;
}
function ACObjShieldModified()
{
   if ( this.shieldBase == this.shield() )
      return FALSE;
   else
      return TRUE;
}
function ACObjNaturalArmor()
{
	out = Math.max(this.naturalarmorBase, this.spellNatMod);
	return out;
}
function ACObjNaturalArmorModified()
{
   if ( this.naturalarmorBase == this.naturalarmor() )
      return FALSE;
   else
      return TRUE;
}
function ACObjDodge()
{
	out = Math.max(this.dodgeBase, this.spellDodgeMod);
	return out;
}
function ACObjDodgeModified()
{
   if ( this.dodgeBase == this.dodge() )
      return FALSE;
   else
      return TRUE;
}
function ACObjDeflection()
{
	out = Math.max(this.deflectionBase, this.spellDeflMod);
	return out;
}
function ACObjDeflectionModified()
{
   if ( this.deflectionBase == this.deflection() )
      return FALSE;
   else
      return TRUE;
}
function ACObjArmor()
{
	out = Math.max(this.armorBase, this.spellACMod);
	return out;
}
function ACObjArmorModified()
{
   if ( this.armorBase == this.armor() )
      return FALSE;
   else
      return TRUE;
}
function ACObjTotal()
{
   return this.totalBase-this.armorBase+this.armor()-this.shieldBase+this.shield()-this.deflectionBase+this.deflection()-this.naturalarmorBase+this.naturalarmor()-this.dodgeBase+this.dodge()-this.abilityBase+this.ability()-this.miscBase+this.misc();
}
function ACObjTotalModified()
{
   if ( this.totalBase == this.total() )
      return FALSE;
   else
      return TRUE;
}
function ACObjAbilityModified()
{
   if ( this.abilityBase == this.ability() )
      return FALSE;
   else
      return TRUE;
}
function ACObjMiscModified()
{
   if ( this.miscBase == this.misc() )
      return FALSE;
   else
      return TRUE;
}
// Case 1:  Both normal stat (14) mod and modified stat (16) mod <= MAXDEX (6)
//    NOTENOTE This is also the case when there is no MAXDEX (this.maxdex==0) NOTENOTE
//      Ability = base - normal modifier + new modifier
//              =  2   -        2        +     3
// Case 2:  Normal stat (16) > MAXDEX (2) but modified stat (12) <= MAXDEX
//      Ability = base - MAXDEX + new modifier
//              =  2   -        2        +      1
// Case 3:  Normal stat (14) <= MAXDEX(2) but modified stat (16) > MAXDEX
//      Ability = base - normal modifier + MAXDEX
//              =  2   -        2        +      2
// Case 4:  Both normal stat (15) mod and modified stat (16) mod > MAXDEX (2)
//      Ability = base  (no change really for AC purposes)
function ACObjAbility()
{
	tempAbil = this.abilityBase;
	// Also need to take into account if max dex due to armor makes change moot?
	if ( AbArr[DEXindex].hasTempMod() )  // Dex is modified?
	{
		// Will dex change affect AC?
		// Case 1:
		if ( this.maxdex==0 )  // These first two cases really should be ORed, but w/o a double pipe..sigh
			tempAbil = tempAbil + AbArr[DEXindex].curModifierDiff();
		else if ( AbArr[DEXindex].modifier <= this.maxdex && AbArr[DEXindex].tempmodifier <= this.maxdex )
			tempAbil = tempAbil + AbArr[DEXindex].curModifierDiff();
		// Case 2:
		else if ( this.maxdex>0 && AbArr[DEXindex].modifier > this.maxdex && AbArr[DEXindex].tempmodifier <= this.maxdex )
			tempAbil = tempAbil - this.maxdex + AbArr[DEXindex].tempmodifier;
		// Case 3:
		else if ( this.maxdex>0 && AbArr[DEXindex].modifier <= this.maxdex && AbArr[DEXindex].tempmodifier > this.maxdex )
			tempAbil = tempAbil - AbArr[DEXindex].modifier + this.maxdex;
		// Case 4:
		else if ( this.maxdex>0 && AbArr[DEXindex].modifier > this.maxdex && AbArr[DEXindex].tempmodifier > this.maxdex )
		tempAbil = tempAbil;
	}
	return tempAbil;
}
function ACObjMisc()
{
	var ACWisdom = 0;
	// A change in AC due to Monk wisdom>
	//   is a monk?   Not wearing armor?   Wis is modified?
	if ( MonkLvl > 0 && Math.round(|ACCHECK|) == 0 && AbArr[WISindex].hasTempMod())
	{
		if (AbArr[WISindex].tempmodifier <= 0)
			ACWisdom = 0 - AbArr[WISindex].modifier;
		else
			ACWisdom = AbArr[WISindex].curModifierDiff();
	}
	return this.miscBase+this.rageMod+this.defFightMod+ACWisdom;
}

// A variable of type CharState supports the following
// Only those marked with * should be modified after creation
//  name           string  RW  What this state is. Rage, Defencive Fighting, etc.
//  isActive       bool    RW  Is this state currently activated?
//  activate       int     RO  function to activate this state
//  deactivate             RO  function to deactivate this state
//  outputStateString string RO function to return a descriptive string
//  internalState  string  RW  Used to record information for state
function CharState( aname, activateFunc, deactivateFunc )
{
	this.name = aname;
	this.isActive = 0;
	this.activate = activateFunc;
	this.deactivate = deactivateFunc;
	this.outputStateString = CharStateOutputStateString;
	this.internalState = ""
}
function CharStateOutputStateString()
{
	return this.internalState;
}
// A variable of type InitObject supports the following
// Only those marked with * should be modified after creation
//  initTotalBase  int     RW  Total initiative unmodified
//  initTotal      int     RO  Initiative as modified by Dex changes
//  initBonus      int     RW  Other initiative bonuses
function InitObject( iBase, iBonus )
{
	this.initTotalBase = iBase;
	this.initTotal = InitObjTotal;
	this.initBonus = iBonus;
}
function InitObjTotal()
{
   tempInit = this.initTotalBase;
   // Add/Sub any Dex changes
   if ( AbArr[DEXindex].hasTempMod() )
      tempInit = tempInit + AbArr[DEXindex].curModifierDiff();
   return tempInit;
}
// A variable of type HPObject supports the following
// Only those marked with * should be modified after creation
//  HPTotalBase  int     RW  Total HP unmodified
//  HPTotal      int     RO  HP as modified by CON changes
function HPObject( hpTot )
{
	this.HPTotalBase = hpTot;
	this.HPTotal = HPObjTotal;
}
function HPObjTotal()
{
   tempHP = this.HPTotalBase;
   // Add/Sub any CON changes
   if ( AbArr[CONindex].hasTempMod() )
      tempHP = tempHP + |TOTALLEVELS|*(AbArr[CONindex].curModifierDiff());
   return tempHP;
}
function CurHPObject( hpTot )
{
	this.CurHPTotalBase = hpTot;
	this.CurHPDamage = 0;
	this.CurHPTotal = CurHPObjTotal;
	this.CurWPTotalBase = AbArr[CONindex].val;
	this.CurWPDamage = 0;
	this.CurWPTotal = CurWPObjTotal;
}
function SubdualObject( hpTot )
{
	this.TotalBase = 0;
	this.Damage = 0;
}
function CurHPObjTotal()
{
   tempHP = this.CurHPTotalBase;
   // Add/Sub any CON changes
   if ( AbArr[CONindex].hasTempMod() )
      tempHP = tempHP + |TOTALLEVELS|*(AbArr[CONindex].curModifierDiff());
   tempHP = tempHP - this.CurHPDamage;
   return tempHP;
}

// Viewer +/- buttons control the current count of Hit Points, subdual damage, or Wound Points.
function HPPlus()
{
	CurHP.CurHPDamage = CurHP.CurHPDamage - 1;
	CurHPPrint();
}
function HPMinus()
{
	CurHP.CurHPDamage = CurHP.CurHPDamage + 1;
	CurHPPrint();
}
function CurWPObjTotal()
{
	tempWP = this.CurWPTotalBase;
	// Add/Sub any CON changes
	if ( AbArr[CONindex].hasTempMod() )
		tempWP = AbArr[CONindex].tempvalue;
	tempWP = tempWP - this.CurWPDamage;
	return tempWP;
}
function WoundPlus()
{
	CurHP.CurWPDamage = CurHP.CurWPDamage - 1;
	CurHPPrint();
}
function WoundMinus()
{
	CurHP.CurWPDamage = CurHP.CurWPDamage + 1;
	CurHPPrint();
}
// Psionic Power Points can be tracked like current Hit Points.
var CurPowerPoints = new PowerPointObject(|VAR.TOTALPOWERPOINTS.INTVAL|);
function PowerPointObject(Tot)
{
	this.TotalBase = Tot;
	this.Damage = 0;
}
function PowerPointPlus()
{
	CurPowerPoints.Damage = CurPowerPoints.Damage - 1;
	if(CurPowerPoints.Damage < 0) 
		CurPowerPoints.Damage = 0;
	CurPowerPointsPrint();
}
function PowerPointMinus()
{
	CurPowerPoints.Damage = CurPowerPoints.Damage + 1;
	if(CurPowerPoints.Damage > CurPowerPoints.TotalBase) 
		CurPowerPoints.Damage = CurPowerPoints.TotalBase;
	CurPowerPointsPrint();
}
function CurPowerPointsPrint()
{
	if (CurPowerPoints.Damage > 0 ) {
		foo = CurPowerPoints.TotalBase - CurPowerPoints.Damage;
		if(foo < 0) foo = 0;
		if(foo > CurPowerPoints.TotalBase) foo = CurPowerPoints.TotalBase;
		document.getElementById('CurPowerPointsTD').innerHTML = foo;
		document.getElementById('CurPowerPointsTD').bgColor = '#FFCCCC';
	} else {
		document.getElementById('CurPowerPointsTD').innerHTML = " " + CurPowerPoints.TotalBase;
		document.getElementById('CurPowerPointsTD').bgColor = "white";
	}
}
function SubdualPlus()
{
	Subdual.Damage = Subdual.Damage - 1;
	if(Subdual.Damage < 0)
		Subdual.Damage = 0;
	SubdualPrint();
}
function SubdualMinus()
{
	Subdual.Damage = Subdual.Damage + 1;
	SubdualPrint();
}
function SavePlus( which )
{
	CheckArr[which].tempmodifier = CheckArr[which].tempmodifier + 1;
	SavesPrint();
}
function SaveMinus( which )
{
	CheckArr[which].tempmodifier = CheckArr[which].tempmodifier - 1;
	SavesPrint();
}
// Melee/Ranged can have viewer modifed temp values for Hit and Damage.
// BUG: Grapple only modifies inline display for Hit.  Damage does nothing, and
//      a weapon of Grapple is not specifically found and updated for either field.
//      (Or do we call that an unimplemented feature??)
function CombatPlus( which )
{
	ATKArr[which].miscTHMod = ATKArr[which].miscTHMod + 1;
	ATKPrint();
	WeaponPrint();
}
function CombatMinus( which )
{
	ATKArr[which].miscTHMod = ATKArr[which].miscTHMod - 1;
	ATKPrint();
	WeaponPrint();
}
function CombatDamagePlus( which )
{
	ATKArr[which].miscDamageMod = ATKArr[which].miscDamageMod + 1;
	ATKPrint();
	WeaponPrint();
}
function CombatDamageMinus( which )
{
	ATKArr[which].miscDamageMod = ATKArr[which].miscDamageMod - 1;
	ATKPrint();
	WeaponPrint();
}
function setSpellNatBonus()
{
	foo = 12; // out of range marker, selections are 0-10.
	if (document.getElementById('spell_natural_bonus') != null) 
		foo = document.getElementById("spell_natural_bonus").value;
	if ((foo > -1) && (foo < 11))
		spell_Nat_bonus = foo;
}
function setSpellDodgeBonus()
{
	foo = 12; // out of range marker, selections are 0-10.
	if (document.getElementById('spell_dodge_bonus') != null) 
		foo = document.getElementById("spell_dodge_bonus").value;
	if ((foo > -1) && (foo < 11))
		spell_Dodge_bonus = foo;
}
function setSpellACBonus()
{
	foo = 12;
	if (document.getElementById('spell_AC_bonus') != null) 
		foo = document.getElementById("spell_AC_bonus").value;
	if ((foo > -1) && (foo < 11))
		spell_AC_bonus = foo;
}
function setSpellDeflBonus()
{
	foo = 12;
	if (document.getElementById('spell_deflection_bonus') != null) 
		foo = document.getElementById("spell_deflection_bonus").value;
	if ((foo > -1) && (foo < 11))
		spell_Defl_bonus = foo;
}
function setSpellShieldBonus()
{
	foo = 12;
	if (document.getElementById('spell_shield_bonus') != null) 
		foo = document.getElementById("spell_shield_bonus").value;
	if ((foo > -1) && (foo < 11))
		spell_Shield_bonus = foo;
}
function ABPrint()
{
	tempHTML ='<table border="0" cellpadding="1" cellspacing="1" width="320px"><tr>';
	tempHTML = tempHTML + '<td id=removeh><\/td><td width="15%" class="c4">ABILITY<br />NAME<\/td>';
	tempHTML = tempHTML + '<td width="13%" class="c4">ABILITY<br />SCORE<\/td>';
	tempHTML = tempHTML + '<td width="13%" class="c4">ABILITY<br />MOD<\/td>';
	tempHTML = tempHTML + '<td width="13%" class="c4">BASE<br />SCORE<\/td>';
	tempHTML = tempHTML + '<td width="13%" class="c4">BASE<br />MOD<\/td>';
	tempHTML = tempHTML + '<td width="13%" class="c4">TEMP<br />SCORE<\/td>';
	tempHTML = tempHTML + '<td width="13%" class="c4">TEMP<br />MOD<\/td>';
	tempHTML = tempHTML + '<\/tr>';
	for (i=0; i<AbArr.length;i++){
		if(AbArr[i].visible == TRUE) {
			tempHTML = tempHTML+'<tr>';
			tempHTML = tempHTML+'<td id=removea'+i+'><input class="statmodbutton" type=button value="+" name=AddStatButton onclick="AddStat('+i+');"><\/td>';
			tempHTML = tempHTML+'<td class="c10wB" rowspan=2>'+AbArr[i].name+'<span class="c4w"><br />'+AbArr[i].longname+'<\/span><\/td>';
			tempHTML = tempHTML+'<td class="c10sB" rowspan=2>'+AbArr[i].val+'<\/td>';
			tempHTML = tempHTML+'<td class="c10sB" rowspan=2>'+modPlusMinus(AbArr[i].modifier)+'<\/td>';
			tempHTML = tempHTML+'<td class="c10sgB" rowspan=2>'+AbArr[i].Base+'<\/td>';
			tempHTML = tempHTML+'<td class="c10sgB" rowspan=2>'+modPlusMinus(AbArr[i].BaseMod)+'<\/td>';
			if (AbArr[i].hasTempMod()) {
				tempHTML = tempHTML+'<td class="c10slB" rowspan=2>'+AbArr[i].tempvalue+'<\/td>';
				tempHTML = tempHTML+'<td class="c10slB" rowspan=2>'+modPlusMinus(AbArr[i].tempmodifier)+'<\/td>\n';
			}
			else {
				tempHTML = tempHTML+'<td class="c10sB" rowspan=2><br/><\/td>';
				tempHTML = tempHTML+'<td class="c10sB" rowspan=2><br/><\/td>\n';
			}
			tempHTML = tempHTML+'<\/tr><tr><td id=removeb'+i+'><input class="statmodbutton" type=button value="-" name=RemoveStatButton onclick="RemoveStat('+i+');"><\/td>';
		}
	}
	tempHTML = tempHTML+'<\/table>';
	document.getElementById('AbilityDiv').innerHTML = tempHTML;
	// Create a compact version of the Ability Scores and saves as well.
	tempHTML = '';
	// Reorder the printout to physical and mental stats
	var CompArr = new Array('0','3','1','4','2','5');
   // Grab unconventional stats and add them at the end of the list.
	if(AbArr.length > 6) 
		for(i=6;i<AbArr.length;i++)
			CompArr[i] = i;
	tempHTML ='<table border="0" cellpadding="1px" cellspacing="1px" width="300px">';
	for (i=0; i<AbArr.length;i++){
		if(AbArr[CompArr[i]].visible == TRUE) {
			tempHTML = tempHTML+'<tr><td width="50%"><table border=0 cellpadding="1px" cellspacing="1px" width="100%"><tr>\n';
			tempHTML = tempHTML+'<td width="1px" align="right" id=removej'+CompArr[i]+'><input class="statmodbutton" type=button value="+" name=AddStatButton onclick="AddStat('+CompArr[i]+');"><br />';
			tempHTML = tempHTML+'<input class="statmodbutton" type=button value="-" name=RemoveStatButton onclick="RemoveStat('+CompArr[i]+');"><\/td>';
			tempHTML = tempHTML+'<td width="49%" class="c10wB">'+AbArr[CompArr[i]].name+'<span class="c4w"><br />'+AbArr[CompArr[i]].longname+'<\/span><\/td>';
			if (AbArr[CompArr[i]].hasTempMod()) {
				tempHTML = tempHTML+'<td width="25px" class="c10slB">'+AbArr[CompArr[i]].tempvalue+'<\/td>';
				tempHTML = tempHTML+'<td width="25px" class="c10slB">'+modPlusMinus(AbArr[CompArr[i]].tempmodifier)+'<\/td>\n';
			}
			else {
				tempHTML = tempHTML+'<td width="25px" class="c10sB">'+AbArr[CompArr[i]].val+'<\/td>';
				tempHTML = tempHTML+'<td width="25px" class="c10sB">'+modPlusMinus(AbArr[CompArr[i]].modifier)+'<\/td>';
			}
			i++;
			tempHTML = tempHTML+'</tr></table></td><td width="50%"><table border=0 cellpadding="1px" cellspacing="1px" width="100%"><tr>\n';
			tempHTML = tempHTML+'<td width="1px" align="right" id=removek'+CompArr[i]+'><input class="statmodbutton" type=button value="+" name=AddStatButton onclick="AddStat('+CompArr[i]+');">';
			tempHTML = tempHTML+'<input class="statmodbutton" type=button value="-" name=RemoveStatButton onclick="RemoveStat('+CompArr[i]+');"><\/td>';
			tempHTML = tempHTML+'<td width="49%" class="c10wB">'+AbArr[CompArr[i]].name+'<span class="c4w"><br />'+AbArr[CompArr[i]].longname+'<\/span><\/td>';
			if (AbArr[CompArr[i]].hasTempMod()) {
				tempHTML = tempHTML+'<td width="25px" class="c10slB">'+AbArr[CompArr[i]].tempvalue+'<\/td>';
				tempHTML = tempHTML+'<td width="25px" class="c10slB">'+modPlusMinus(AbArr[CompArr[i]].tempmodifier)+'<\/td>\n';
			}
			else {
				tempHTML = tempHTML+'<td width="25px" class="c10sB">'+AbArr[CompArr[i]].val+'<\/td>';
				tempHTML = tempHTML+'<td width="25px" class="c10sB">'+modPlusMinus(AbArr[CompArr[i]].modifier)+'<\/td>';
			}
			tempHTML = tempHTML+'</tr></table></td></tr>\n';
		}
	}
	tempHTML = tempHTML+'<tr>';
	styleTag = ' style="background: LIGHTBLUE" ';
	tempHTML = tempHTML+'<td colspan="2"><table width="100%"><tr><td class="cm9swB" width="80px">AC<span class="c5wB"><br />Armour&nbsp;Class<\/span><\/td>';
	tempHTML = tempHTML+'<td ';
	if ( AC.totalModified() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c10sB" width="30px">'+AC.total()+'<br /><span class="c6">TOTAL</span><\/td>';
	tempHTML = tempHTML+'<td class="c7mB">:</td><td ';
	if ( AC.flatModified() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c10sB" width="30px">'+AC.flat()+'<br /><span class="c6">FLAT</span><\/td>';
	tempHTML = tempHTML+'<td class="c7mB">:</td><td ';
	if ( AC.touchModified() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c10sB" width="30px">'+AC.touch()+'<br /><span class="c6">TOUCH</span><\/td>';
	tempHTML = tempHTML+'<td width="30%">&nbsp;</td></tr></table></td>';
	tempHTML = tempHTML+'<tr><td colspan="2"><table border="0" cellspacing="1px" cellpadding="1px"><tr>';
	for (i=0;i<ATKArr.length;i++){
		if(ATKArr[i].name == "CMD")
			tempHTML = tempHTML+'<td width="40%" class="c10wB">'+ATKArr[i].name+'<span class="c5w"><br />DEFENSE BONUS<\/span><\/td>\n';
		else
			tempHTML = tempHTML+'<td width="40%" class="c10wB">'+ATKArr[i].name+'<span class="c5w"><br />ATTACK BONUS<\/span><\/td>\n';
		tempHTML = tempHTML+'<td width="35px" class="'+((ATKArr[i].isModified())?'c10slB':'c10sB')+'">'+ATKArr[i].modifyAttackBonus()+'<\/td>\n';
		if(i%2)
			tempHTML = tempHTML+'</tr><tr>\n';
	}
	tempHTML = tempHTML+'</tr></table></td></tr>\n';
	tempHTML = tempHTML+'<\/table>';
	if (document.getElementById('CompactAbilityDiv') != null) {
		document.getElementById('CompactAbilityDiv').innerHTML = tempHTML;
	}
}

function CompactSavesPrint(){
	tempHTML ='<table border="0" cellpadding="1" cellspacing="1" width="100%"><tr>';
        tempBG = "white";
        if ( CheckArr[1].hasTempMod() )
		tempBG = 'LIGHTBLUE';
        if ( CheckArr[1].statmodflag() )
		tempBG = 'LIGHTBLUE';
	tempHTML = tempHTML+'<td><table border=0><tr><td class="c10wB"><table class="c10wB" border="0" cellpadding="0"><tr><td class="c10wB" width="20px"><a name="#" onClick="rollIntoDIV(1,20,'+CheckArr[1].val()+',\''+CheckArr[1].name+'\',\''+CheckArr[1].name+'\',1);"><img src="die_small.png" Alt="Roll" width="15px" height="16px" border="0"></a></td><td id="'+CheckArr[1].name+'_TD_SND" width="22px" class="c10B" bgcolor="black"><div class="c10B" id="'+CheckArr[1].name+'_SND" style="background-color:transparent;">&nbsp;</div></td><td width="80px" class="c10wB">'+CheckArr[1].name+'<span class="c5w"><br />'+CheckArr[1].ability+'<\/span></td></tr></table><\/td>';
	tempHTML = tempHTML+'<td class="c10sB" width="25px" style="background:'+tempBG+';">'+modPlusMinus(CheckArr[1].val())+'<\/td></tr></table></td>';
        tempBG = "white";
        if ( CheckArr[0].hasTempMod() )
		tempBG = 'LIGHTBLUE';
        if ( CheckArr[0].statmodflag() )
		tempBG = 'LIGHTBLUE';
	tempHTML = tempHTML+'<td><table border="0"><tr><td class="c10wB"><table class="c10wB" border="0" cellpadding="0"><tr><td class="c10wB" width="20px"><a name="#" onClick="rollIntoDIV(1,20,'+CheckArr[0].val()+',\''+CheckArr[0].name+'\',\''+CheckArr[0].name+'\',1);"><img src="die_small.png" Alt="Roll" width="15px" height="16px" border="0"></a></td><td id="'+CheckArr[0].name+'_TD_SND" width="22px" class="c10B" bgcolor="black"><div class="c10B" id="'+CheckArr[0].name+'_SND" style="background-color:transparent;">&nbsp;</div></td><td width="80px" class="c10wB">'+CheckArr[0].name+'<span class="c5w"><br />'+CheckArr[0].ability+'<\/span></td></tr></table><\/td>';
	tempHTML = tempHTML+'<td class="c10sB" width="25px" style="background:'+tempBG+';">'+modPlusMinus(CheckArr[0].val())+'<\/td></tr></table></td>';
        tempBG = "white";
        if ( CheckArr[2].hasTempMod() )
		tempBG = 'LIGHTBLUE';
        if ( CheckArr[2].statmodflag() )
		tempBG = 'LIGHTBLUE';
	tempHTML = tempHTML+'<td><table border="0"><tr><td class="c10wB"><table class="c10wB" border="0" cellpadding="0"><tr><td class="c10wB" width="20px"><a name="#" onClick="rollIntoDIV(1,20,'+CheckArr[2].val()+',\''+CheckArr[2].name+'\',\''+CheckArr[2].name+'\',1);"><img src="die_small.png" Alt="Roll" width="15px" height="16px" border="0"></a></td><td id="'+CheckArr[2].name+'_TD_SND" width="22px" class="c10B" bgcolor="black"><div class="c10B" id="'+CheckArr[2].name+'_SND" style="background-color:transparent;">&nbsp;</div></td><td width="80px" class="c10wB">'+CheckArr[2].name+'<span class="c5w"><br />'+CheckArr[2].ability+'<\/span></td></tr></table><\/td>';
	tempHTML = tempHTML+'<td class="c10sB" width="25px" style="background:'+tempBG+';">'+modPlusMinus(CheckArr[2].val())+'<\/td></tr></table></td>';
	tempHTML = tempHTML+'<\/tr>\n';
	tempHTML = tempHTML+'</table></td></tr>\n';
	tempHTML = tempHTML+'<\/table>';
	if (document.getElementById('CompactSavesDiv') != null) {
		document.getElementById('CompactSavesDiv').innerHTML = tempHTML;
	}
}

function SavesPrint(){
	tempHTML = '<table width="100%"><tr><td class="c4">SAVING THROWS<\/td>';
	tempHTML = tempHTML+'<td width="25px" class="c4">TOTAL<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25px" class="c4">BASE<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25px" class="c4">STAT<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25px" class="c4">MAGIC<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25px" class="c4">EPIC<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25px" class="c4">MISC<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="1%" class="c4"><\/td>';
	tempHTML = tempHTML+'<td width="25px" class="c4">TEMPORARY<\/td><td width="63" rowspan="4" class="lt4s">CONDITIONAL<br />MODIFIERS<\/td><\/tr>\n';
	for (i=0; i<CheckArr.length;i++){
		tempHTML = tempHTML+'<tr><td class="c10wB" width="145px"><table class="c10wB" border="0" cellpadding="0"><tr><td class="c10wB" width="20px"><a name="#" onClick="rollIntoDIV(1,20,'+CheckArr[i].val()+',\''+CheckArr[i].name+'\',\''+CheckArr[i].name+'\',1);"><img src="die_small.png" Alt="Roll" width="15px" height="16px" border="0"></a></td><td id="'+CheckArr[i].name+'_TD" width="22px" class="c10B" bgcolor="black"><div class="c10B" id="'+CheckArr[i].name+'" style="background-color:transparent;">&nbsp;</div></td><td width="100px" class="c10wB">'+CheckArr[i].name+'<span class="c5w"><br />'+CheckArr[i].ability+'<\/span></td></tr></table><\/td>';
		tempBG = ' style="background: white;"';
		if ( CheckArr[i].hasTempMod() )
			tempBG = ' style="background: LIGHTBLUE;"';
		if ( CheckArr[i].statmodflag() )
			tempBG = ' style="background: LIGHTBLUE;"';
		// total
		tempHTML = tempHTML+'<td width="25px" class="c10sB"'+tempBG+'>'+modPlusMinus(CheckArr[i].val())+'<\/td><td class="c7mB">=<\/td>';
		// base
		tempHTML = tempHTML+'<td width="25px" class="c10sB">'+modPlusMinus(CheckArr[i].base)+'<\/td><td class="c7mB">+<\/td>';
		tempBG = "";
		if ( CheckArr[i].statmodflag() )
			tempBG = ' style="background: LIGHTBLUE;"';
		// ability
		tempHTML = tempHTML+'<td width="25px" class="c10sB"'+tempBG+'>'+modPlusMinus(CheckArr[i].statmodifier())+'<\/td>';
		tempHTML = tempHTML+'<td class="c7mB">+<\/td>';
		// magic
		tempHTML = tempHTML+'<td width="25px" class="c10sB">'+modPlusMinus(CheckArr[i].magic)+'<br /><\/td><td class="c7mB">+<\/td>';
		// epic
		tempHTML = tempHTML+'<td width="25px" class="c10sB">'+modPlusMinus(CheckArr[i].epic)+'<br /><\/td><td class="c7mB">+<\/td>';
		// other
		tempHTML = tempHTML+'<td width="25px" class="c10sB">'+modPlusMinus(CheckArr[i].misc)+'<br /><\/td><td class="c7mB">+<\/td>';
		// temp that is viewer modifyable
		tempHTML = tempHTML+'<td width="1%" align="right"><input class="statmodbutton" type=button value="+" name=AddSaveButton onclick="SavePlus('+i+');"><br /><input class="statmodbutton" type=button value="-" name=SubSaveButton onclick="SaveMinus('+i+');"></td>';
		tempBG = ''; // prefer background over white
		if ( CheckArr[i].hasTempMod() )
			tempBG = ' style="background: LIGHTBLUE;"';
		tempHTML = tempHTML+'<td width="25px" class="c10gB"'+tempBG+'>';
		if ( CheckArr[i].hasTempMod() )
			tempHTML = tempHTML+modPlusMinus(CheckArr[i].tempmodifier);
		else
			tempHTML = tempHTML+'<br />';
		tempHTML = tempHTML+'<\/td>';
		tempHTML = tempHTML+'<\/tr>\n';
	}
	tempHTML = tempHTML+'<\/table>';
	document.getElementById('SavesDiv').innerHTML = tempHTML;
	ABPrint(); // Refresh the compact version of the AB table
}
function ATKPrint(){
	tempHTML = '<table width="100%"><tr><td><\/td>';
	tempHTML = tempHTML+'<td width="60" class="c4">TOTAL<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="60" class="c4">BASE ATTACK<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">STAT<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">SIZE<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">EPIC<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">MISC<\/td><td><\/td>';
	tempHTML = tempHTML+'<td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">TEMPORARY<br />TO HIT<\/td>';
	tempHTML = tempHTML+'<td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">TEMPORARY<br />DAMAGE<\/td><\/tr>';
	for (i=0;i<ATKArr.length;i++){
		if(ATKArr[i].name == "CMD")
			tempHTML = tempHTML+'<tr><td class="c10wB">'+ATKArr[i].name+'<span class="c5w"><br />DEFENSE BONUS<\/span><\/td>';
		else
			tempHTML = tempHTML+'<tr><td class="c10wB">'+ATKArr[i].name+'<span class="c5w"><br />ATTACK BONUS<\/span><\/td>';
		tempHTML = tempHTML+'<td class="'+((ATKArr[i].isModified())?'c10slB':'c10sB')+'">'+ATKArr[i].modifyAttackBonus()+'<\/td><td class="c7mB">=<\/td>';
		tempHTML = tempHTML+'<td class="c10sB">';
		tempHTML = tempHTML+ATKArr[i].base;
		tempHTML = tempHTML+'<br /><\/td><td class="c7mB">+<\/td>';
		tempHTML = tempHTML+'<td class="'+((ATKArr[i].isModified())?'c10slB':'c10sB')+'">'+ATKArr[i].statmodifier()+'<\/td><td class="c7mB">+<\/td>';
		tempHTML = tempHTML+'<td class="c10sB">'+ATKArr[i].sizemodifier+'<br /><\/td><td class="c7mB">+<\/td>';
		tempHTML = tempHTML+'<td class="c10sB">'+ATKArr[i].epicmodifier+'<br /><\/td><td class="c7mB">+<\/td>';
		tempHTML = tempHTML+'<td class="c10sB">'+ATKArr[i].miscmodifier+'<br /><\/td><td class="c7mB">+<\/td>';
		tempHTML = tempHTML+'<td width="1%" align="right"><input class="statmodbutton" type=button value="+" onclick="CombatPlus('+i+');"><br /><input class="statmodbutton" type=button value="-" onclick="CombatMinus('+i+');"></td>';
		tempBG = '';
		if ( ATKArr[i].miscTHMod != 0 )
			tempBG = ' style="background: LIGHTBLUE;"';
		tempHTML = tempHTML+'<td class="c10gB"'+tempBG+'>';
		if ( ATKArr[i].miscTHMod != 0 )
			tempHTML = tempHTML + ATKArr[i].miscTHMod;
		tempHTML = tempHTML + '<br /><\/td>';
		if((ATKArr[i].name != "CMB") && (ATKArr[i].name != "CMD")) {
			tempHTML = tempHTML+'<td width="1%" align="right"><input class="statmodbutton" type=button value="+" onclick="CombatDamagePlus('+i+');"><br /><input class="statmodbutton" type=button value="-" onclick="CombatDamageMinus('+i+');"></td>';
      	tempBG = '';
			if ( ATKArr[i].miscDamageMod != 0 )
				tempBG = ' style="background: LIGHTBLUE;"';
			tempHTML = tempHTML+'<td class="c10gB"'+tempBG+'>';
			if ( ATKArr[i].miscDamageMod != 0 )
				tempHTML = tempHTML + ATKArr[i].miscDamageMod;
			tempHTML = tempHTML + '<br /><\/td><\/tr>';
		} else if(ATKArr[i].name == "CMD") {
			tempHTML = tempHTML+'<td class="c7mB">+</td>';
			tempHTML = tempHTML+'<td class="c10B">10</td></tr>';
		} else {
			tempHTML = tempHTML+'<td>&nbsp;</td>';
			tempHTML = tempHTML+'<td>&nbsp;</td></tr>';
		}
		tempHTML = tempHTML + '<tr><td><\/td><\/tr>';
	}
	tempHTML = tempHTML + '<tr><td colspan=18><table width="100%" summary="CMB block"><tr>';
|IIF(VAR.UseCombatManueverBonus:1)|
	tempOffset = parseInt(ATKArr[CMB_Pos].modifyAttackBonus()) - parseInt(ATKArr[CMB_Pos].AttackBonusBase);
	tempBG = '';
	if ( ATKArr[CMB_Pos].isModified() )
		tempBG = ' style="background: LIGHTBLUE;"';
	tempHTML = tempHTML + '<td align="center" class="c10wB"><b>CMB</b></td>';
	tempVal = tempOffset + parseInt(|VAR.CMB_Grapple.INTVAL.SIGN|);
	tempHTML = tempHTML + '<td align="center" class="c10sB"'+tempBG+'><b>' + tempVal + '</b></td>';
	tempVal = tempOffset + parseInt(|VAR.CMB_Trip.INTVAL.SIGN|);
	tempHTML = tempHTML + '<td align="center" class="c10sB"'+tempBG+'><b>' + tempVal + '</b></td>';
	tempVal = tempOffset + parseInt(|VAR.CMB_Disarm.INTVAL.SIGN|);
	tempHTML = tempHTML + '<td align="center" class="c10sB"'+tempBG+'><b>' + tempVal + '</b></td>';
	tempVal = tempOffset + parseInt(|VAR.CMB_Sunder.INTVAL.SIGN|);
	tempHTML = tempHTML + '<td align="center" class="c10sB"'+tempBG+'><b>' + tempVal + '</b></td>';
	tempVal = tempOffset + parseInt(|VAR.CMB_BullRush.INTVAL.SIGN|);
	tempHTML = tempHTML + '<td align="center" class="c10sB"'+tempBG+'><b>' + tempVal + '</b></td>';
	tempVal = tempOffset + parseInt(|VAR.CMB_Overrun.INTVAL.SIGN|);
	tempHTML = tempHTML + '<td align="center" class="c10sB"'+tempBG+'><b>' + tempVal + '</b></td>';
	tempHTML = tempHTML + '</tr><tr>';
	tempOffset = parseInt(ATKArr[CMD_Pos].modifyAttackBonus()) - parseInt(ATKArr[CMD_Pos].AttackBonusBase);
	if ( ATKArr[CMD_Pos].isModified() )
		tempBG = ' style="background: LIGHTBLUE;"';
	tempHTML = tempHTML + '<td align="center" class="c10wB"><b>CMD</b></td>';
	tempVal = tempOffset + parseInt(|VAR.CMD_Grapple.INTVAL.SIGN|);
	tempHTML = tempHTML + '<td align="center" class="c10sB"'+tempBG+'><b>' + tempVal + '</b></td>';
	tempVal = tempOffset + parseInt(|VAR.CMD_Trip.INTVAL.SIGN|);
|IIF(VAR.IF(var("CantBeTripped")!=0;1;0):1)|
	tempVal = 'Can\'t&nbsp;be&nbsp;tripped';
|ENDIF|
	tempHTML = tempHTML + '<td align="center" class="c10sB"'+tempBG+'><b>' + tempVal + '</b></td>';
	tempVal = tempOffset + parseInt(|VAR.CMD_Disarm.INTVAL.SIGN|);
	tempHTML = tempHTML + '<td align="center" class="c10sB"'+tempBG+'><b>' + tempVal + '</b></td>';
	tempVal = tempOffset + parseInt(|VAR.CMD_Sunder.INTVAL.SIGN|);
	tempHTML = tempHTML + '<td align="center" class="c10sB"'+tempBG+'><b>' + tempVal + '</b></td>';
	tempVal = tempOffset + parseInt(|VAR.CMD_BullRush.INTVAL.SIGN|);
	tempHTML = tempHTML + '<td align="center" class="c10sB"'+tempBG+'><b>' + tempVal + '</b></td>';
	tempVal = tempOffset + parseInt(|VAR.CMD_Overrun.INTVAL.SIGN|);
	tempHTML = tempHTML + '<td align="center" class="c10sB"'+tempBG+'><b>' + tempVal + '</b></td>';
	tempHTML = tempHTML + '<tr>';
	tempHTML = tempHTML + '<td align="center" width="10%"></td>';
	tempHTML = tempHTML + '<td align="center" width="15%" valign="bottom" class="c6">GRAPPLE</td>';
	tempHTML = tempHTML + '<td align="center" width="15%" valign="bottom" class="c6">TRIP</td>';
	tempHTML = tempHTML + '<td align="center" width="15%" valign="bottom" class="c6">DISARM</td>';
	tempHTML = tempHTML + '<td align="center" width="15%" valign="bottom" class="c6">SUNDER</td>';
	tempHTML = tempHTML + '<td align="center" width="15%" valign="bottom" class="c6">BULL RUSH</td>';
	tempHTML = tempHTML + '<td align="center" width="15%" valign="bottom" class="c6">OVERRUN</td>';
	tempHTML = tempHTML + '</tr></table></td></tr>';
|ENDIF|					   
	document.getElementById('AttackDiv').innerHTML = tempHTML;
	ABPrint(); // Refresh the compact version of the AB table
}
function ComprehensiveSkillPrint()
{
	tempHTML = '<table cellpadding="0" cellspacing="0" border="0" width="100%">';
	tempHTML = tempHTML + '<tr bgcolor="black"><td bgcolor="black" height="30" class="c6w"><\/td>';
	tempHTML = tempHTML + '<td bgcolor="black" height="30" class="c10yB"><a name="#" onClick="CycleSkills();">SKILLS</a><\/td>';
	tempHTML = tempHTML + '<td bgcolor="black" colspan="4" height="30" class="c6w"><\/td>';
	tempHTML = tempHTML + '<td bgcolor="black" height="30" class="r6w"><\/td>';
	tempHTML = tempHTML + '<td bgcolor="black" height="30" class="c7w">MAX<br />RANKS<\/td>';
	tempHTML = tempHTML + '<td bgcolor="black" colspan="2" height="30" class="cm9dB">&nbsp;&nbsp;|MAXSKILLLEVEL|/|MAXCCSKILLLEVEL|&nbsp;&nbsp;<\/td><\/tr>';
	tempHTML = tempHTML + '<tr><td colspan="2" width="40%" class="c4s">SKILL NAME<\/td><td width="5%" class="c4s">ABILITY<\/td><td width="13%" colspan="1" class="c4s">SKILL<br />MODIFIER<\/td><td width="13%" colspan="2" class="c4s">ABILITY<br />MODIFIER<\/td><td width="13%" colspan="2" class="c4s">RANKS<\/td><td width="13%" colspan="2" class="c4s">MISC<br />MODIFIER<\/td><\/tr>';
	i = 0;
	for (i=0;i<SkillArr.length;i++){
		notWhileRaging = 0;
		for (j=0;j<SkillsRedList.length;j++) {
			if ((SkillArr[i].name.substr(0,SkillsRedList[j].length) == SkillsRedList[j])&&(RageStatus =="Raging")) {notWhileRaging = 1;}
		}
		styleTag = "";
		if (notWhileRaging == 1) styleTag = ' style="background:#cccccc; color:#666666;"';
		else if (SkillArr[i].baseStatModified()) styleTag = ' style="background:LIGHTBLUE; color:red;"';
		else if ( (i%2) == 0 ) styleTag = ' style="background:WHITE;"';
		else styleTag = ' style="background:#DDDDDD;"';
		tempHTML = tempHTML + '<tr'+styleTag+'>';
		tempHTML = tempHTML + '<td class="c8">';
		if ( SkillArr[i].bUseUntrained == TRUE )
			tempHTML = tempHTML + '&#9670;';
		if ( SkillArr[i].bSkillMastery == TRUE )
			tempHTML = tempHTML + '*';
		tempHTML = tempHTML + '<\/td>';
		tempHTML = tempHTML + '<td class="l8">'+SkillArr[i].name+'<br />&nbsp;&nbsp;<span class="l7">'+SkillArr[i].explain+'</span><\/td><td class="c8">'+SkillArr[i].ability+'<\/td><td class="cb8b">'+SkillArr[i].total()+'<\/td><td class="cb8mB">=<\/td><td class="cb8bB">'+SkillArr[i].statmodifier()+'<br /><\/td><td class="cb8mB">+<\/td><td class="cb8bB">'+SkillArr[i].rank+'<br /><\/td><td class="cb8mB">+<\/td><td class="cb8bB">'+SkillArr[i].miscmodifier+'<br /><\/td><\/tr>';
	}
	tempHTML = tempHTML + '<\/table>';
	tempHTML = tempHTML + '<span class="l8">&nbsp;&nbsp;&#9670; = Useable Untrained<\/span>,&nbsp;&nbsp;';
	tempHTML = tempHTML + '<span class="l8">* = Skill Mastery<br />&nbsp;&nbsp;ARMOR = Armor or Encumberance,&nbsp;&nbsp;OTHER = unexplained conditionals<\/span>';
	document.getElementById('SkillsComprehensive').innerHTML = tempHTML;
	return;
}
function HeaderSkillPrint()
{
	tempHTML = '<table cellpadding="1" cellspacing="0" border="0" width="100%">';
	tempHTML = tempHTML + '<tr><td height="30" width="30%" class="c10yB"><a name="#" onClick="CycleSkills();">SKILLS</a><\/td>';
	tempHTML = tempHTML + '<td colspan="9" height="30"  class="c6w"><\/td>';
	tempHTML = tempHTML + '<td height="30" class="r6w" width="60%"><\/td>';
	tempHTML = tempHTML + '<td height="30" class="c7w">MAX<br />RANKS<\/td>';
	tempHTML = tempHTML + '<td colspan="3" height="30" class="cm9dB">&nbsp;&nbsp;|MAXSKILLLEVEL|/|MAXCCSKILLLEVEL|&nbsp;&nbsp;<\/td><\/tr>';
	tempHTML = tempHTML + '<\/table>';
	document.getElementById('SkillsHeaderOnly').innerHTML = tempHTML;
}
function CompactSkillPrint()
{
	i = 0;
	tempHTML = '<table cellpadding="1" cellspacing="0" border="0" width="100%">';
	tempHTML = tempHTML + '<tr><td height="30" width="20%" class="c10yB"><a name="#" onClick="CycleSkills();">SKILLS</a><\/td>';
	tempHTML = tempHTML + '<td height="30" class="r6w"><\/td>';
	tempHTML = tempHTML + '<td id="SkillRoll" colspan="11" bgcolor="white" height="30"  class="c9pB">&nbsp;<\/td>';
	tempHTML = tempHTML + '<td height="30" class="r6w"><\/td>';
	tempHTML = tempHTML + '<td height="30" class="c7w">MAX<br />RANKS<\/td>';
	tempHTML = tempHTML + '<td colspan="3" height="30" class="cm9dB">&nbsp;&nbsp;|MAXSKILLLEVEL|/|MAXCCSKILLLEVEL|&nbsp;&nbsp;<\/td><\/tr>';
	tempHTML = tempHTML + '<tr><td class="l5b">&nbsp;Name<\/td><td class="l5b">Abb<\/td><td class="r5b">Rnk<\/td><td class="r5b">&nbsp;</td><td class="r5b">Tot&nbsp;<\/td><td></td><td class="l5b">&nbsp;Name<\/td><td class="l5b">Abb<\/td><td class="r5b">Rnk<\/td><td class="r5b">&nbsp;</td><td class="r5b">Tot&nbsp;<\/td><td></td><td class="l5b">&nbsp;Name<\/td><td class="l5b">Abb<\/td><td class="r5b">Rnk<\/td><td class="r5b">&nbsp;</td><td class="r5b">Tot&nbsp;<\/td><td></td><\/tr>';
	for (i=0;i<SkillArr.length;i++){
		notWhileRaging = 0;
		for (j=0;j<SkillsRedList.length;j++) {
			if ((SkillArr[i].name.substr(0,SkillsRedList[j].length) == SkillsRedList[j])&&(RageStatus =="Raging")) {notWhileRaging = 1;}
		}
		styleTag = "";
		if (SkillArr[i].baseStatModified()) styleTag = ' style="background: LIGHTBLUE; color: red;"';
		if (notWhileRaging ==1) styleTag = ' style="background: #cccccc; color: #666666;"';
		if ( (i % 3) == 0 )
			tempHTML = tempHTML + '<tr>';
		tempHTML = tempHTML + '<td'+styleTag+' class="l8">&nbsp;'+SkillArr[i].name+'<\/td><td'+styleTag+' class="l7">'+SkillArr[i].ability+'<\/td><td'+styleTag+' class="r7">'+SkillArr[i].rank+'&nbsp;<\/td><td><a name="#" onClick="rollIntoDIV(1,20,'+SkillArr[i].total()+',\''+SkillArr[i].name+'\',\'SkillRoll\',0);"><img src="die_small.png" Alt="Roll" width="15px" height="16px" border="0"></a></td><td'+styleTag+' class="r8">&nbsp;'+SkillArr[i].total()+'&nbsp;<\/td><td style="background:black;" width="3px">&nbsp;</td>';
		if ( (i % 3) == 2 )
			tempHTML = tempHTML + '<\/tr>';
	}
	// This is to take care of the case of a row started in the loop, but not enough skills to complete the whole row.
	if ( i>0 && (i % 3)==0 )
		tempHTML = tempHTML + '<\/tr>';
	tempHTML = tempHTML + '<\/table>';
	document.getElementById('SkillsCompactdiv').innerHTML = tempHTML;
}
function ACPrint()
{
	styleTag = ' style="background: LIGHTBLUE" ';
	tempHTML = '<table><tr><td class="cm9swB">AC<span class="c5wB"><br />Armour&nbsp;Class<\/span><\/td>';
	tempHTML = tempHTML+'<td ';
	if ( AC.totalModified() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c9sB">'+AC.total()+'<\/td><td class="c7mB">=<\/td>';
	tempHTML = tempHTML+'<td ';
	if ( AC.flatModified() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c9sB">'+AC.flat()+'<\/td><td class="c7mB">:<\/td>';
	tempHTML = tempHTML+'<td ';
	if ( AC.touchModified() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c9sB">'+AC.touch()+'<\/td><td class="c7mB">:<\/td>';
	tempHTML = tempHTML+'<td class="c9sB">'+AC.base+'<\/td><td class="c7mB">+<\/td>';
	tempHTML = tempHTML+'<td ';
	if ( AC.armorModified() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c9sB">'+AC.armor()+'<\/td><td class="c7mB">+<\/td>';
	tempHTML = tempHTML+'<td ';
	if ( AC.shieldModified() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c9sB">'+AC.shield()+'<\/td><td class="c7mB">+<\/td>';
	tempHTML = tempHTML+'<td ';
	if ( AC.deflectionModified() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c9sB">'+AC.deflection()+'<\/td><td class="c7mB">+<\/td>';
	tempHTML = tempHTML+'<td ';
	if ( AC.abilityModified() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c9sB">'+AC.ability()+'<\/td><td class="c7mB">+<\/td>';
	tempHTML = tempHTML+'<td class="c9sB">'+AC.size+'<\/td><td class="c7mB">+<\/td>';
	tempHTML = tempHTML+'<td ';
	if ( AC.naturalarmorModified() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c9sB">'+AC.naturalarmor()+'<\/td><td class="c7mB">+<\/td>';
	tempHTML = tempHTML+'<td ';
	if ( AC.dodgeModified() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c9sB">'+AC.dodge()+'<\/td><td class="c7mB">+<\/td>';
	tempHTML = tempHTML+'<td ';
	if ( AC.miscModified() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c9sB">'+AC.misc()+'<\/td><td align="center" width="5"><\/td>';
	tempHTML = tempHTML+'<td class="c9sB"><br /><\/td><td align="center"><\/td>';
	tempHTML = tempHTML+'<td class="c9sB">|SPELLFAILURE|<\/td><td align="center"><\/td>';
	tempHTML = tempHTML+'<td class="c9sB">|ACCHECK|<\/td><td align="center"><\/td>';
	tempHTML = tempHTML+'<td class="c9sB">';
	// MAXDEX==0 means NO maxdex
	if ( AC.maxdex != 0 )
		tempHTML = tempHTML + AC.maxdex;
	tempHTML = tempHTML+'<br /><\/td>';
	tempHTML = tempHTML+'<tr><td align="center" width="50"><\/td>';
	tempHTML = tempHTML+'<td width="25" class="ct6mB">TOTAL<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="ct6mB">FLAT<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="ct6mB">TOUCH<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">BASE<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">ARMOR<br />BONUS<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">SHIELD<br />BONUS<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">DEFLECTION<br />BONUS<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">STAT<br />BONUS<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">SIZE<br />BONUS<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">NATURAL<br />ARMOR<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">DODGE<br />BONUS<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">MISC<br />BONUS<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">MISS<br />CHANCE<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">ARCANE<br />FAILURE<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">ARMOR<br />CHECK<\/td><td><\/td>';
	tempHTML = tempHTML+'<td width="25" class="c4">&nbsp;MAX&nbsp;<br />&nbsp;DEX&nbsp;<\/td>';
	tempHTML = tempHTML+'<\/tr><\/table>';
	document.getElementById('ACDiv').innerHTML = tempHTML;
	ABPrint();
	CompactSavesPrint();
}
function InitPrint()
{
	if (document.getElementById('InitRoll') != null)
		wascurrent = document.getElementById('InitRoll').innerHTML;
	else 
		wascurrent = "&nbsp;";
	styleTag = ' style="background:LIGHTBLUE;" ';
	tempHTML = '<table><tr>';
	tempHTML = tempHTML+'<td width="85" class="c9wB">INITIATIVE<span class="c5w"><br />Modifier<\/span><\/td>';
	tempHTML = tempHTML+'<td ';
	if ( AbArr[DEXindex].hasTempMod() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c10sB" width="25">'+Init.initTotal()+'<br /><span class="cb5">TOTAL</span><\/td>';
	tempHTML = tempHTML+'<td class="cm7mB">=<\/td>';
	tempHTML = tempHTML+'<td ';
	if ( AbArr[DEXindex].hasTempMod() )
		tempHTML = tempHTML+styleTag;
	tempHTML = tempHTML+'class="c10sB" width="25">'+AbArr[DEXindex].tempmodifier+'<br /><span class="cb5">DEX</span><\/td>';
	tempHTML = tempHTML+'<td class="cm7mB">+<\/td>';
	tempHTML = tempHTML+'<td class="c10sB" width="25">'+Init.initBonus+'<br /><span class="cb5">MISC</span><\/td>';
	tempHTML = tempHTML+'<td class="cm7mB"><\/td>';
	tempHTML = tempHTML+'<td class="c8" width="25"><a name="#" onClick="rollIntoDIV(1,20,'+Init.initTotal()+',\'Initiative Roll\',\'InitRoll\',1);"><img src="die.png" Alt="Roll" width="24px" height="26px" border="0"></a><\/td>';
	tempHTML = tempHTML+'<td id="InitRoll_TD" class="c10sBx" width="25"><div id="InitRoll" class="c10B" style="background-color:transparent;display:inline;">'+wascurrent+'</div><br /><span class="cb5">CURRENT</span><\/td>';
	tempHTML = tempHTML+'<\/tr><\/table>';
	document.getElementById("Initdiv").innerHTML = tempHTML;
}
function HPPrint()
{
	document.getElementById('HP').innerHTML = HP.HPTotal();
	if ( HP.HPTotal() != HP.HPTotalBase )
		document.getElementById('HP').bgColor = 'LIGHTBLUE';
	else
		document.getElementById('HP').bgColor = "white";
	// WP = Wound Points, not always there
	if (document.getElementById('WP') != null) {
		document.getElementById('WP').innerHTML = AbArr[CONindex].tempvalue;
		if ( AbArr[CONindex].val != AbArr[CONindex].tempvalue )
			document.getElementById('WP').bgColor = 'LIGHTBLUE';
		else
			document.getElementById('WP').bgColor = "white";
	}
}
function CurHPPrint()
{
	document.getElementById('CurHP').innerHTML = CurHP.CurHPTotal();
	if ( CurHP.CurHPTotal() != CurHP.CurHPTotalBase )
		document.getElementById('CurHP').bgColor = '#FFCCCC';
	else
		document.getElementById('CurHP').bgColor = "white";
	baseHP = document.getElementById('HP').innerHTML;
	if ( CurHP.CurHPTotal() > baseHP )
		document.getElementById('CurHP').bgColor = '#FFFF88';
	if ( CurHP.CurHPTotal() == baseHP )
		document.getElementById('CurHP').bgColor = 'white';
	if (document.getElementById('WP') != null) {
		if(document.getElementById('WoundPoints').innerHTML != null) {
			document.getElementById('WoundPoints').innerHTML = CurHP.CurWPTotal();
			if ( CurHP.CurWPTotal() != CurHP.CurWPTotalBase )
				document.getElementById('WoundPoints').bgColor = '#FFCCCC';
			else
				document.getElementById('WoundPoints').bgColor = "white";
			baseWP = document.getElementById('WP').innerHTML;
			if ( CurHP.CurWPTotal() > baseWP )
				document.getElementById('WoundPoints').bgColor = '#FFFF88';
			if ( CurHP.CurWPTotal() == baseWP )
				document.getElementById('WoundPoints').bgColor = 'white';
		}
	}
}
function SubdualPrint()
{
	if (Subdual.Damage > 0 ) {
		document.getElementById('Subdual').innerHTML = ' -' + Subdual.Damage;
		document.getElementById('Subdual').bgColor = '#FFCCCC';
	} else {
		document.getElementById('Subdual').innerHTML = "&nbsp;"
		document.getElementById('Subdual').bgColor = "white";
	}
}

function RagePrint()
{
|%VAR.BarbRageTimesLVL.INTVAL|;
|IIF(GAMEMODE:Pathfinder)|
	var strMod = |VAR.RageStrBonus|;
	var conMod = |VAR.RageConBonus|;
	var willMod = |VAR.RageSaveBonus|;
|ELSE|
	var strMod = |VAR.RageStrBonus|;
	var conMod = |VAR.RageConBonus|;
	var willMod = |VAR.RageMorale|;
|ENDIF|
	tempHTML = '<table width="100%" cellspacing="0" cellpadding="2"><tr><td class="c10yB" colspan="2"><a id="#barb_rage_desc" onclick="ToggleDIV(\'RageDiv\');ToggleDIV(\'RageDiv_header\');">BARBARIAN RAGE</a><\/td><\/tr>';
	tempHTML = tempHTML+'<tr><td colspan="2" class="l9s">The Barbarian temporarily gains '+modPlusMinus(strMod)+' to Strength, '+modPlusMinus(conMod)+' to Constitution, and a '+modPlusMinus(willMod)+' morale bonus on Will saves, but suffers a -2 penalty to AC.  ';
	// Do it this way since we want to show the same length regardless of current rage state
	tempHTML = tempHTML+'A fit of rage lasts for ';
	if ( RageStatus == "Raging" )
		tempHTML = tempHTML+(3+AbArr[CONindex].tempmodifier)+' rounds.  ';
	else
		tempHTML = tempHTML+(3+AbArr[CONindex].tempmodifier+conMod/2)+' rounds.  ';
	if ( |VAR.BarbarianRageLVL| < 20 )
		tempHTML = tempHTML+'At the end of the rage, the barbarian is fatigued (-2 to Strength, -2 to Dexterity, can&rsquo;t charge or run) for the duration of that encounter.  ';
	else
		tempHTML = tempHTML+'A 20th level Barbarian is NOT fatigued after leaving a rage.  ';
	tempHTML = tempHTML+'The barbarian can only fly into a rage once per encounter, and only |VAR.RageTimes.INTVAL| times per day (determined by level). Entering a rage takes no time itself, but the barbarian can only do it during his action.<\/td><\/tr><\/table>';
	document.getElementById('RageDiv').innerHTML = tempHTML;
	tempHTML = '<table width="100%" cellspacing="0" cellpadding="2"><tr><td class="c10yB" colspan="2"><a id="#barb_rage_desc" onclick="ToggleDIV(\'RageDiv\');ToggleDIV(\'RageDiv_header\');">BARBARIAN RAGE</a><\/td><\/tr></table>';
	document.getElementById('RageDiv_header').innerHTML = tempHTML;
|%|
}

// Global NumWeaponsFirstPage sets the max number of weapons to print in compact form, but is now
// ineffective in Comprehensive mode now that we have moved away from page printing.
// This was 3 like the original combined.htm page, but that led to confusion for some.  
// So, bumping to 100 to effectively disable the limit.
var NumWeaponsFirstPage = 100;
function WeaponPrint()
{
	var i = 0;
	// Unarmed first
	tempHTML = '<table cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td class="c10yB" width="20%"><a name="#" onclick="CycleWeapons();">Expand</a></td><td class="c10wB" height="25" width="20%">UNARMED<\/td><td class="c6wB" width="20%" height="15">TOTAL ATTACK BONUS<\/td><td class="c6wB" width="20%" height="15">DAMAGE<\/td><td class="c6wB" width="20%" height="15">CRITICAL<\/td><\/tr>';
	tempHTML = tempHTML + '<tr><td colspan=2 class="c8wB"></td><td class="c8sB" style="background:';
	if ( WeapArr[0].hasModifiedTH() )
		tempHTML = tempHTML+'LIGHTBLUE';
	else
		tempHTML = tempHTML+'white';
	tempHTML = tempHTML+'">' + WeapArr[0].modifyAttackBonus() + '<br /><\/td>';
	tempHTML = tempHTML + '<td class="c8sB" style="background:';
	if ( WeapArr[0].hasModifiedDam() )
		tempHTML = tempHTML+'LIGHTBLUE';
	else
		tempHTML = tempHTML+'white';
	tempHTML = tempHTML + '">' + WeapArr[0].modifyDamage() + '<br /><\/td>';
	tempHTML = tempHTML + '<td class="c8sB">20/x2<br /><\/td>';
	if ( WeapArr[i].energy != "" )
	{
		tempHTML = tempHTML + '<tr>';
		tempHTML = tempHTML + '<td class="l8wB">&nbsp;</td>';
		tempHTML = tempHTML + '<td class="r8wB">Energy&nbsp;</td>';
		tempHTML = tempHTML + '<td colspan="3" style="background:white" class="l8sB">&nbsp;&nbsp;' + WeapArr[i].energy;
		tempHTML = tempHTML + '<\/td>';
		tempHTML = tempHTML + '<\/tr>';
	}
	tempHTML = tempHTML + '<\/tr>';
	tempHTML = tempHTML + '</table>';
	document.getElementById('UnarmedDiv').innerHTML = tempHTML;
	// OK, now compact weapons
	tempHTML = '<table cellpadding="0" width="100%" cellspacing="0" border="0">';
	tempHTML = tempHTML + '<tr><td class="l7wB">WEAPON<br /><\/td><td class="c4wB">+ATTACK BONUS<br /><\/td><td class="c4wB">DAMAGE<br /><\/td><td class="c4wB">CRITICAL<br /><\/td><td class="c4wB">HAND<br /><\/td><td class="c4wB">RANGE<br /><\/td><td class="c4wB">TYPE<br /><\/td><td class="c4wB">SIZE<br /><\/td><\/tr>';
	for ( i=1; i<=min(WeapArr.length-1,NumWeaponsFirstPage); ++i )
	{
		if ( WeapArr[i].name != "" )
		{
			tempHTML = tempHTML + '<tr><td class="l8tgB">';
			tempHTML = tempHTML + WeapArr[i].name + '<\/td>';
			// Attack Bonus
			tempHTML = tempHTML + '<td class="c8mB" style="background:';
			if ( WeapArr[i].hasModifiedTH() )
				tempHTML = tempHTML+'LIGHTBLUE';
			else
				tempHTML = tempHTML+'white';
			tempHTML = tempHTML + '">' + WeapArr[i].modifyAttackBonus() + '<br /><\/td>';
			// Damage
			tempHTML = tempHTML + '<td class="c8mB" style="background:';
			if ( WeapArr[i].hasModifiedDam() )
				tempHTML = tempHTML+'LIGHTBLUE';
			else
				tempHTML = tempHTML+'white';
			tempHTML = tempHTML+'">' + WeapArr[i].modifyDamage() + '<br /><\/td>';
			tempHTML = tempHTML+'<td class="c8mB">' + WeapArr[i].crit + '/x' + WeapArr[i].mult + '<br /><\/td>';
			tempHTML = tempHTML+'<td class="c8mB">' + WeapArr[i].hands + '<br /><\/td>';
			tempHTML = tempHTML+'<td class="c8mB">' + WeapArr[i].range + '<br /><\/td>';
			tempHTML = tempHTML+'<td class="c8mB">' + WeapArr[i].type + '<br /><\/td>';
			tempHTML = tempHTML+'<td class="c8mB">' + WeapArr[i].size + '<br /><\/td><\/tr>';
		}
	}
	tempHTML = tempHTML + '<\/table>';
	document.getElementById('WeaponsCompact').innerHTML = tempHTML;
	// OK, now comprehensive weapons (part 1)
	tempHTML = '';
	var tempColor;
	for ( i=1; i<WeapArr.length; ++i )
	{
		if ( WeapArr[i].name != "" )
		{
			if ( WeapArr[i].outputFormat == 1 )  // ranged
			{
				tempHTML = tempHTML + '<br class="l2" /><table cellpadding="0" width="100%" cellspacing="0" border="0">';
				tempHTML = tempHTML + '<tr>';
				tempHTML = tempHTML + '<td id="WEAPON_'+i+'_TD" class="c9B" bgcolor="black" rowspan="2" width="120px" nobreak><div id="WEAPON_'+i+'" class="c9B" style="background-color:transparent;display:inline;">&nbsp;</div><\/td>';
				tempHTML = tempHTML + '<td class="l10wB" rowspan="2">&nbsp;&nbsp;'+WeapArr[i].name+'<\/td>';
				tempHTML = tempHTML + '<td class="c6wB" width="10%" height="15">HAND<\/td>';
				tempHTML = tempHTML + '<td class="c6wB" width="10%" height="15">TYPE<\/td>';
				tempHTML = tempHTML + '<td class="c6wB" width="10%" height="15">SIZE<\/td>';
				tempHTML = tempHTML + '<td class="c6wB" width="10%" height="15">CRITICAL<\/td>';
				tempHTML = tempHTML + '<\/tr>';
				tempHTML = tempHTML + '<tr>';
				tempHTML = tempHTML + '<td class="c8sB">'+WeapArr[i].hands+'<br /><\/td>';
				tempHTML = tempHTML + '<td class="c8sB">'+WeapArr[i].type+'<br /><\/td>';
				tempHTML = tempHTML + '<td class="c8sB">'+WeapArr[i].size+'<br /><\/td>';
				tempHTML = tempHTML + '<td class="c8sB">'+WeapArr[i].crit+'/x'+WeapArr[i].mult+'<br /><\/td>';
				tempHTML = tempHTML + '<\/tr>';
				tempHTML = tempHTML + '<\/table>';
				tempHTML = tempHTML + '<table cellpadding="0" cellspacing="0" border="0" width="100%">';
				var j;
				for ( j=0; j<WeapArr[i].rangedData.length; ++j )
				{
					if ( WeapArr[i].rangedData[j].ammoName != "" )
					{
						tempHTML = tempHTML + '<tr>';
						tempHTML = tempHTML + '<td colspan="6" class="l8wB" height="25" valign="bottom">&nbsp;AMMUNITION:  '+WeapArr[i].rangedData[j].ammoName;
						tempHTML = tempHTML + '<\/td>';
						tempHTML = tempHTML + '<\/tr>';
					}
					tempHTML = tempHTML + '<tr>';
					tempHTML = tempHTML + '<td class="l8wB" height="15" width="8%">&nbsp;Range<\/td>';
					var k;
					for ( k=0; k<WeapArr[i].rangedData[j].ammoRange.length; ++k )
					{
						tempHTML = tempHTML + '<td width="18%" class="c8wB">'+WeapArr[i].rangedData[j].ammoRange[k]+'<br /><\/td>';
					}
					tempHTML = tempHTML + '<\/tr>';
					tempHTML = tempHTML + '<tr>';
					tempHTML = tempHTML + '<td class="l8swB">&nbsp;Bonus<\/td>';
					if ( WeapArr[i].hasModifiedTH() )
						tempColor = 'LIGHTBLUE';
					else
						tempColor = 'white';
					for ( k=0; k<WeapArr[i].rangedData[j].ammoAttackBonus.length; ++k )
					{
						weapon_damage = WeapArr[i].modifyRangedDamage(j,k);
						if(weapon_damage.search(/[0-9]/) != -1) { // only process if there are numbers
							mySplitResult = weapon_damage.split("d");
							dice = mySplitResult[0];
							die = 0;
							bonus = 0;
							var more = "";
							if(mySplitResult.length == 1) {  // Because some people enter little critter damage a 0+2.
								dice = 1;
								more = weapon_damage;
							} else {
								more = mySplitResult[1];
							}
							if(more.search(/\+/) != -1) {
								secondsplit = more.split('+');
								die = secondsplit[0];
								bonus = secondsplit[1];
							} else if(more.search(/\-/) != -1) {
								secondsplit = more.split('-');
								die = secondsplit[0];
								bonus = 0 - secondsplit[1];
							} else {
								die = more;
								bonus = 0;
							}
							crit = WeapArr[i].crit;
							if(crit.search(/\-/) != -1) {
								critsplit = crit.split('-');
								critmin = critsplit[0];
							} else 
								critmin = 20;
						}
						attbonus = WeapArr[i].modifyRangedAttackBonus(j,k);
						sendbonus = attbonus.replace(/\//g,'#');
						if(attbonus == "N/A")
							tempHTML = tempHTML + '<td class="c9sB">N/A<\/td>';
						else if(weapon_damage.search(/[0-9]/) == -1) 
							tempHTML = tempHTML + '<td style="background:'+tempColor+'" class="c9sB">'+weapon_damage+'<\/td>';
						else
							tempHTML = tempHTML + '<td style="background:'+tempColor+'" class="c9sB"><a name="#" onClick="RollAttack(1,20,'+'\''+sendbonus+'\''+','+dice+','+die+','+bonus+','+critmin+',\''+WeapArr[i].name+'\',\'WEAPON_'+i+'\',1);"><img src="die_small.png" Alt="Roll" width="15px" height="16px" border="0"></a> '+WeapArr[i].modifyRangedAttackBonus(j,k)+'<br /><\/td>';
					}
					tempHTML = tempHTML + '<\/tr>';
					tempHTML = tempHTML + '<tr>';
					tempHTML = tempHTML + '<td class="l8swB">&nbsp;Dam<\/td>';
					if ((WeapArr[i].hasModifiedDam()) && (WeapArr[i].modifyRangedDamage(j,k) != "N/A"))
						tempColor = 'LIGHTBLUE';
					else
						tempColor = 'white';
					for ( k=0; k<WeapArr[i].rangedData[j].ammoAttackBonus.length; ++k )
					{
						tempHTML = tempHTML + '<td style="background:'+tempColor+'" class="c9sB">'+WeapArr[i].modifyRangedDamage(j,k)+'<\/td>';
					}
					tempHTML = tempHTML + '<\/tr>';
					if ( WeapArr[i].rangedData[j].ammoEnergy != "" )
					{
						tempHTML = tempHTML + '<tr>';
						tempHTML = tempHTML + '<td class="l8wB">&nbsp;Energy</td>';
						tempHTML = tempHTML + '<td colspan="5" style="background:white;" class="l8sB">&nbsp;&nbsp;' + WeapArr[i].rangedData[j].ammoEnergy;
						tempHTML = tempHTML + '<\/td>';
						tempHTML = tempHTML + '<\/tr>';
					}
					if ( WeapArr[i].rangedData[j].ammoSprop != "" )
					{
						tempHTML = tempHTML + '<tr>';
						tempHTML = tempHTML + '<td class="l8wB">&nbsp;Ammo</td>';
						tempHTML = tempHTML + '<td colspan="5" style="background:white;" class="l8sB">&nbsp;&nbsp;' + WeapArr[i].rangedData[j].ammoSprop;
						tempHTML = tempHTML + '<\/td>';
						tempHTML = tempHTML + '<\/tr>';
					}
				}
				tempHTML = tempHTML + '<\/tr>';
				tempHTML = tempHTML + '<tr>';
				tempHTML = tempHTML + '<td class="l8swB" colspan="2">&nbsp;Weapon Special Properties<br /><\/td>';
				if (WeapArr[i].sprop == "")
					tempHTML = tempHTML + '<td class="l8swB" colspan="5">&nbsp;<br /><\/td>';
				else
					tempHTML = tempHTML + '<td class="l8sB" style="background:white;" colspan="5">&nbsp;'+WeapArr[i].sprop+'<br /><\/td>';
				tempHTML = tempHTML + '<\/tr>';
				tempHTML = tempHTML + '<\/table>';
				tempHTML = tempHTML + '<span class="l2"><br /><\/span>';
			}
			else if ( WeapArr[i].outputFormat == 2 )  // non-2 handable melee
			{
				tempHTML = tempHTML + '<br class="l2" /><table cellpadding="0" width="100%" cellspacing="0" border="0">';
				tempHTML = tempHTML + '  <tr>';
				tempHTML = tempHTML + '   <td id="WEAPON_'+i+'_TD" class="c9B" bgcolor="black" rowspan="2" width="120px" nobreak><div id="WEAPON_'+i+'" class="c9B" style="background-color:transparent;display:inline;">&nbsp;</div><\/td>';
				tempHTML = tempHTML + '   <td class="l10wB" height="15px" rowspan="2">&nbsp;&nbsp;'+WeapArr[i].name+'<\/td>';
				tempHTML = tempHTML + '   <td class="c6wB" width="15%" height="15">TOTAL ATTACK BONUS<\/td>';
				tempHTML = tempHTML + '   <td class="c6wB" width="15%" height="15">DAMAGE<\/td>';
				tempHTML = tempHTML + '   <td class="c6wB" width="15%" height="15">CRITICAL<\/td>';
				tempHTML = tempHTML + '  <\/tr>';
				tempHTML = tempHTML + '  <tr>';
				if ( WeapArr[i].hasModifiedTH() )
					tempColor = 'LIGHTBLUE';
				else
					tempColor = 'white';
				weapon_damage = WeapArr[i].modifyDamage();
				if(weapon_damage.search(/[0-9]/) != -1) {
					mySplitResult = weapon_damage.split("d");
					dice = mySplitResult[0];
					die = 0;
					bonus = 0;
					var more = "";
					if(mySplitResult.length == 1) {  // Because some people enter little critter damage a 0+2.
						dice = 1;
						more = weapon_damage;
					} else {
						more = mySplitResult[1];
					}
					if(more.search(/\+/) != -1) {
						secondsplit = more.split('+');
						die = secondsplit[0];
						bonus = secondsplit[1];
					} else if(more.search(/\-/) != -1) {
						secondsplit = more.split('-');
						die = secondsplit[0];
						bonus = 0 - secondsplit[1];
					} else {
						die = more;
						bonus = 0;
					}
					crit = WeapArr[i].crit;
					if(crit.search(/\-/) != -1) {
						critsplit = crit.split('-');
						critmin = critsplit[0];
					} else 
						critmin = 20;
				}
				attbonus = WeapArr[i].modifyAttackBonus();
				sendbonus = attbonus.replace(/\//g,'#');
				if(attbonus == "N/A")
					tempHTML = tempHTML + '<td class="c9sB">N/A<\/td>';
				else if(weapon_damage.search(/[0-9]/) == -1) 
					tempHTML = tempHTML + '<td style="background:'+tempColor+'" class="c9sB">'+weapon_damage+'<\/td>';
				else
					tempHTML = tempHTML + '<td style="background:'+tempColor+'" class="c9sB"><a name="#" onClick="RollAttack(1,20,\''+sendbonus+'\','+dice+','+die+','+bonus+','+critmin+',\''+WeapArr[i].name+'\',\'WEAPON_'+i+'\',1);"><img src="die_small.png" Alt="Roll" width="15px" height="16px" border="0"></a> '+WeapArr[i].modifyAttackBonus()+'<\/td>';
				if ( (WeapArr[i].hasModifiedDam()) && (WeapArr[i].modifyDamage() != "N/A"))
					tempColor = 'LIGHTBLUE';
				else
					tempColor = 'white';
				tempHTML = tempHTML + '   <td style="background:'+tempColor+'" class="c8sB">' + WeapArr[i].modifyDamage() + '<br /><\/td>';
				tempHTML = tempHTML + '   <td class="c8sB">'+WeapArr[i].crit+'/x'+WeapArr[i].mult+'<br /><\/td>';
				tempHTML = tempHTML + '  <\/tr>';
				tempHTML = tempHTML + ' <\/table>';
				tempHTML = tempHTML + ' <table cellpadding="0" cellspacing="0" border="0" width="100%">';
				tempHTML = tempHTML + '  <tr>';
				tempHTML = tempHTML + '   <td class="c6wB" width="15%" height="15">HAND<\/td>';
				tempHTML = tempHTML + '   <td class="c6wB" width="15%" height="15">RANGE<\/td>';
				tempHTML = tempHTML + '   <td class="c6wB" width="15%" height="15">TYPE<\/td>';
				tempHTML = tempHTML + '   <td class="c6wB" width="15%" height="15">SIZE<\/td>';
				tempHTML = tempHTML + '   <td class="c6wB" width="40%" height="15">SPECIAL PROPERTIES<\/td>';
				tempHTML = tempHTML + '  <\/tr>';
				tempHTML = tempHTML + '  <tr>';
				tempHTML = tempHTML + '   <td class="c8sB">'+WeapArr[i].hands+'<br /><\/td>';
				tempHTML = tempHTML + '   <td class="c8sB">'+WeapArr[i].range+'<br /><\/td>';
				tempHTML = tempHTML + '   <td class="c8sB">'+WeapArr[i].type+'<br /><\/td>';
				tempHTML = tempHTML + '   <td class="c8sB">'+WeapArr[i].size+'<br /><\/td>';
				tempHTML = tempHTML + '   <td class="c8sB">&nbsp;'+WeapArr[i].sprop+'<br /><\/td>';
				tempHTML = tempHTML + '  <\/tr>';
				if ( WeapArr[i].energy != "" )
				{
					tempHTML = tempHTML + '<tr>';
					tempHTML = tempHTML + '<td class="l8wB">&nbsp;Energy</td>';
					tempHTML = tempHTML + '<td colspan="5" style="background:white;" class="l8sB">&nbsp;&nbsp;' + WeapArr[i].energy;
					tempHTML = tempHTML + '<\/td>';
					tempHTML = tempHTML + '<\/tr>';
				}
				tempHTML = tempHTML + ' <\/table>';
				tempHTML = tempHTML + ' <span class="l2"><br /><\/span>';
			}
			else if ( WeapArr[i].outputFormat == 3 )  // normal melee
			{
				tempHTML = tempHTML + '<br class="l2" /><table cellpadding="0" width="100%" cellspacing="0" border="0">';
				tempHTML = tempHTML + '    <tr>';
				tempHTML = tempHTML + '     <td id="WEAPON_'+i+'_TD" class="c9B" bgcolor="black" rowspan="2" width="120px" nobreak><div id="WEAPON_'+i+'" class="c9B" style="background-color:transparent;display:inline;">&nbsp;</div><\/td>';
				tempHTML = tempHTML + '     <td class="l10wB" height="15px" rowspan="2">&nbsp;&nbsp;'+WeapArr[i].name+'<\/td>';
				tempHTML = tempHTML + '     <td class="c6wB" width="10%" height="15">HAND<\/td>';
				tempHTML = tempHTML + '     <td class="c6wB" width="10%" height="15">TYPE<\/td>';
				tempHTML = tempHTML + '     <td class="c6wB" width="10%" height="15">SIZE<\/td>';
				tempHTML = tempHTML + '     <td class="c6wB" width="10%" height="15">CRITICAL<\/td>';
				tempHTML = tempHTML + '    <\/tr>';
				tempHTML = tempHTML + '    <tr>';
				tempHTML = tempHTML + '     <td class="c8sB">'+WeapArr[i].hands+'<br /><\/td>';
				tempHTML = tempHTML + '     <td class="c8sB">'+WeapArr[i].type+'<br /><\/td>';
				tempHTML = tempHTML + '     <td class="c8sB">'+WeapArr[i].size+'<br /><\/td>';
				tempHTML = tempHTML + '     <td class="c8sB">'+WeapArr[i].crit+'/x'+WeapArr[i].mult+'<br /><\/td>';
				tempHTML = tempHTML + '    <\/tr>';
				tempHTML = tempHTML + '   <\/table>';
				tempHTML = tempHTML + '   <table cellpadding="0" cellspacing="0" border="0" width="100%">';
				tempHTML = tempHTML + '    <tr>';
				tempHTML = tempHTML + '     <td class="c6wB" width="8%"  height="15"><\/td>';
				tempHTML = tempHTML + '     <td class="c6wB" width="17%" height="15">1H-P<\/td>';
				tempHTML = tempHTML + '     <td class="c6wB" width="17%" height="15">1H-O<\/td>';
				tempHTML = tempHTML + '     <td class="c6wB" width="17%" height="15">2H<\/td>';
				tempHTML = tempHTML + '     <td class="c6wB" width="17%" height="15">2W-P-(OH)<\/td>';
				tempHTML = tempHTML + '     <td class="c6wB" width="17%" height="15">2W-P-(OL)<\/td>';
				tempHTML = tempHTML + '     <td class="c6wB" width="10%" height="15">2W-OH<\/td>';
				tempHTML = tempHTML + '    <\/tr>';
				tempHTML = tempHTML + '    <tr>';
				tempHTML = tempHTML + '     <td class="l8swB">&nbsp;Bonus<\/td>';
				if ( WeapArr[i].hasModifiedTH() )
					tempColor = 'LIGHTBLUE';
				else
					tempColor = 'white';

				for ( k=0; k<6; ++k ) {
					weapon_damage = WeapArr[i].modify2WDamage(0,k);
					if (weapon_damage == "N/A")
						weapon_damage = WeapArr[i].modifyDamage();
					if(weapon_damage.search(/[0-9]/) != -1) {
						mySplitResult = weapon_damage.split("d");
						dice = mySplitResult[0];
						die = 0;
						bonus = 0;
						var more = "";
						if(mySplitResult.length == 1) {  // Because some people enter little critter damage a 0+2.
							dice = 1;
							more = weapon_damage;
						} else {
							more = mySplitResult[1];
						}
						if(more.search(/\+/) != -1) {
							secondsplit = more.split('+');
							die = secondsplit[0];
							bonus = secondsplit[1];
						} else if(more.search(/\-/) != -1) {
							secondsplit = more.split('-');
							die = secondsplit[0];
							bonus = 0 - secondsplit[1];
						} else {
							die = more;
							bonus = 0;
						}
						crit = WeapArr[i].crit;
						if(crit.search(/\-/) != -1) {
							critsplit = crit.split('-');
							critmin = critsplit[0];
						} else 
							critmin = 20;
					}
						attbonus = WeapArr[i].modify2WAttackBonus(0,k);
						sendbonus = attbonus.replace(/\//g,'#');
					if(attbonus == "N/A")
						tempHTML = tempHTML + '<td class="c9sB">N/A<\/td>';
					else if(weapon_damage.search(/[0-9]/) == -1) 
						tempHTML = tempHTML + '<td style="background:'+tempColor+'" class="c9sB">'+weapon_damage+'<\/td>';
					else
						tempHTML = tempHTML + '<td style="background:'+tempColor+'" class="c9sB"><a name="#" onClick="RollAttack(1,20,\''+sendbonus+'\','+dice+','+die+','+bonus+','+critmin+',\''+WeapArr[i].name+'\',\'WEAPON_'+i+'\',1);"><img src="die_small.png" Alt="Roll" width="15px" height="16px" border="0"></a> '+WeapArr[i].modify2WAttackBonus(0,k)+'<br /><\/td>';
				}
				tempHTML = tempHTML + '    <\/tr>';
				tempHTML = tempHTML + '    <tr>';
				tempHTML = tempHTML + '     <td class="l8swB">&nbsp;Dam<\/td>';
				for(z=0; z<6; z++) {
					if ( (WeapArr[i].hasModifiedDam()) && (WeapArr[i].modify2WDamage(0,z) != "N/A"))
						tempColor = 'LIGHTBLUE';
					else
						tempColor = 'white';
					if (WeapArr[i].modify2WDamage(0,z) == "N/A")
						tempHTML = tempHTML + '     <td class="c9sB">'+WeapArr[i].modify2WDamage(0,z)+'<br /><\/td>';
					else
						tempHTML = tempHTML + '     <td style="background:'+tempColor+'" class="c8sB">'+WeapArr[i].modify2WDamage(0,z)+'<br /><\/td>';
				}
				tempHTML = tempHTML + '    <\/tr>';
				if ( WeapArr[i].energy != "" )
				{
					tempHTML = tempHTML + '    <tr>';
					tempHTML = tempHTML + '    <td class="l8wB">&nbsp;Energy</td>';
					tempHTML = tempHTML + '    <td colspan="6" style="background:white;" class="l8sB">&nbsp;&nbsp;' + WeapArr[i].energy;
					tempHTML = tempHTML + '    <\/td>';
					tempHTML = tempHTML + '    <\/tr>';
				}
    				tempHTML = tempHTML + '		<tr>';
				tempHTML = tempHTML + '     <td class="l8swB" colspan="2">&nbsp;Weapon Special Properties<\/td>';
				if (WeapArr[i].sprop == "")
					tempHTML = tempHTML + '     <td class="l8swB" colspan="5">&nbsp;<br /><\/td>';
				else
					tempHTML = tempHTML + '     <td class="l8sB" style="background:white" colspan="5">&nbsp;'+WeapArr[i].sprop+'<br /><\/td>';
				tempHTML = tempHTML + '    <\/tr>';
				tempHTML = tempHTML + '   <\/table>';
			}
			else
			{
				tempHTML = tempHTML + '<br class="l2" /><table cellpadding="0" width="100%" cellspacing="0" border="0"><tr>';
				tempHTML = tempHTML + '<td id="WEAPON_'+i+'_TD" class="c9B" bgcolor="black" rowspan="2" width="120px" nobreak><div id="WEAPON_'+i+'" class="c9B" style="background-color:transparent;display:inline;">&nbsp;</div><\/td>';
				tempHTML = tempHTML + '<td class="c10wB" height="25" rowspan="2" width="125">' + WeapArr[i].name + '<br /><\/td>';
				// Misc table text
				tempHTML = tempHTML + '<td class="c6wB" width="110" height="15">TOTAL ATTACK BONUS<\/td>';
				tempHTML = tempHTML + '<td class="c6wB" width="60"  height="15">DAMAGE<\/td>';
				tempHTML = tempHTML + '<td class="c6wB" width="60"  height="15">CRITICAL<\/td><\/tr>';
				// Attack Bonus
				tempHTML = tempHTML + '<tr>';
				if ( WeapArr[i].hasModifiedTH() )
					tempColor = 'LIGHTBLUE';
				else
					tempColor = 'white';
				weapon_damage = WeapArr[i].modifyDamage();
				if(weapon_damage.search(/[0-9]/) != -1) {
					mySplitResult = weapon_damage.split("d");
					dice = mySplitResult[0];
					die = 0;
					bonus = 0;
					var more = "";
					if(mySplitResult.length == 1) {  // Because some people enter little critter damage a 0+2.
						dice = 1;
						more = weapon_damage;
					} else {
						more = mySplitResult[1];
					}
					if(more.search(/\+/) != -1) {
						secondsplit = more.split('+');
						die = secondsplit[0];
						bonus = secondsplit[1];
					} else if(more.search(/\-/) != -1) {
						secondsplit = more.split('-');
						die = secondsplit[0];
						bonus = 0 - secondsplit[1];
					} else {
						die = more;
						bonus = 0;
					}
					crit = WeapArr[i].crit;
					if(crit.search(/\-/) != -1) {
						critsplit = crit.split('-');
						critmin = critsplit[0];
					} else 
						critmin = 20;
				}
				attbonus = WeapArr[i].modifyAttackBonus();
				sendbonus = attbonus.replace(/\//g,'#');
				if(attbonus == "N/A")
					tempHTML = tempHTML + '<td class="c9sB">N/A<\/td>';
				else if(weapon_damage.search(/[0-9]/) == -1) 
					tempHTML = tempHTML + '<td style="background:'+tempColor+'" class="c9sB">'+weapon_damage+'<\/td>';
				else
					tempHTML = tempHTML + '<td style="background:'+tempColor+'" class="c9sB"><a name="#" onClick="RollAttack(1,20,\''+sendbonus+'\','+dice+','+die+','+bonus+','+critmin+',\''+WeapArr[i].name+'\',\'WEAPON_'+i+'\',1);"><img src="die_small.png" Alt="Roll" width="15px" height="16px" border="0"></a> '+WeapArr[i].modifyAttackBonus()+'<\/td>';
				// Damage
				tempHTML = tempHTML + '<td style="background:';
				if ( (WeapArr[i].hasModifiedDam()) && (WeapArr[i].modifyDamage() != "N/A"))
					tempHTML = tempHTML+'LIGHTBLUE';
				else
					tempHTML = tempHTML+'white';
				if (WeapArr[i].modifyDamage() == "N/A")
					tempHTML = tempHTML+'" class="c9sB">' + WeapArr[i].modifyDamage() + '<br /><\/td>';
				else
					tempHTML = tempHTML+'" class="c8sB">' + WeapArr[i].modifyDamage() + '<br /><\/td>';
				// crit info
				tempHTML = tempHTML + '<td class="c8sB">' + WeapArr[i].crit + '/x' + WeapArr[i].mult + '<br /><\/td><\/tr><\/table>';
				// More text
				tempHTML = tempHTML + '<table cellpadding="0" cellspacing="0" border="0" width="100%"><tr>'
				tempHTML = tempHTML + '<td class="c6wB" width="50"  height="15">HAND<\/td>';
				tempHTML = tempHTML + '<td class="c6wB" width="40"  height="15">RANGE<\/td>';
				tempHTML = tempHTML + '<td class="c6wB" width="60"  height="15">TYPE<\/td>';
				tempHTML = tempHTML + '<td class="c6wB" width="40"  height="15">SIZE<\/td>';
				tempHTML = tempHTML + '<td class="c6wB" width="167" height="15">SPECIAL PROPERTIES<\/td><\/tr>';
				// Hand
				tempHTML = tempHTML + '<tr><td class="c8sB">' + WeapArr[i].hands + '<br /><\/td>';
				// Range
				tempHTML = tempHTML + '<td class="c8sB">' + WeapArr[i].range + '<br /><\/td>';
				// Type
				tempHTML = tempHTML + '<td class="c8sB">' + WeapArr[i].type + '<br /><\/td>';
				// Size
				tempHTML = tempHTML + '<td class="c8sB">' + WeapArr[i].size + '<br /><\/td>';
				// SProp
				tempHTML = tempHTML + '<td class="c8sB">' + WeapArr[i].sprop + '<br /><\/td><\/tr>';
				if ( WeapArr[i].energy != "" )
				{
					tempHTML = tempHTML + '    <tr>';
					tempHTML = tempHTML + '    <td class="l8wB">&nbsp;Energy</td>';
					tempHTML = tempHTML + '    <td colspan="4" style="background:white" class="l8sB">&nbsp;&nbsp;' + WeapArr[i].energy;
					tempHTML = tempHTML + '    <\/td>';
					tempHTML = tempHTML + '    <\/tr>';
				}
				tempHTML = tempHTML + '<\/table>';
			}
		}
		// Done with the first x weapons (which is all we can fit in the first part)?
		if ( i == NumWeaponsFirstPage )
		{
			document.getElementById('WeaponsComprehensive').innerHTML = tempHTML;
			tempHTML = '';
		}
	}
	// Moved to the end of the total weapon list, as we are not splitting weapons across individual pages anymore.
	tempHTML = tempHTML + '<span class="l6"><b>1H-P:<\/b> One handed, primary hand.&nbsp;<b>1H-O:<\/b> One handed, off hand.&nbsp;<b>2H:<\/b> Two handed.&nbsp;<b>2W-P-(OH):<\/b> 2 weapons, primary hand (off hand weapon is heavy).&nbsp;<b>2W-P-(OL):<\/b> 2 weapons, primary hand (off hand weapon is light).&nbsp;<b>2W-OH:<\/b>2 weapons, off hand.<\/span>';
	// Done with the first x weapons (which is all we can fit in the first part)?
	if ( i <= NumWeaponsFirstPage )
		document.getElementById('WeaponsComprehensive').innerHTML = tempHTML;
	else
		document.getElementById('WeaponsExtra').innerHTML = tempHTML;
}

function TurnTablePrint(title, turnLevel, turnDamage, turnCheck, turnsPerDay, numDice, sizeDie, notes)
{
	// Only fill the DIVs that are defined.
	if (document.getElementById(title) == null) {
		return;
	}
	headerdiv = title + '_header';
	tempHTML = '<table width="100%" cellspacing="0" cellpadding="3">';
	tempHTML = tempHTML + '<tr>';
	tempHTML = tempHTML + '	<td class="c10yB"><a class="c10yB" name="#" onclick="ToggleDIV(\'' + headerdiv + '\');ToggleDIV(\'' + title + '\');">' + title +'</a><\/td>';
	tempHTML = tempHTML + '<\/tr>';
	tempHTML = tempHTML + '</table>';
	document.getElementById(headerdiv).innerHTML = tempHTML;
	// Now that we are done with the collapsed header...
	if ( AbArr[CHAindex].hasTempMod() )  // Cha is modified?
		tempBG = 'LIGHTBLUE';
	else
		tempBG = 'WHITE';
	tempHTML = '<table width="100%" cellspacing="0" cellpadding="3">';
	tempHTML = tempHTML + '<tr>';
	tempHTML = tempHTML + '	<td class="c10yB" colspan="9"><a class="c10yB" name="#" onclick="ToggleDIV(\'' + headerdiv + '\');ToggleDIV(\'' + title + '\');">' + title +'</a><\/td>';
	tempHTML = tempHTML + '<\/tr>';
	tempHTML = tempHTML + '<tr >';
	tempHTML = tempHTML + '	<td colspan="2" width="16%" class="r7w">TURN LEVEL<\/td>';
	tempHTML = tempHTML + '	<td width="16%" class="c9sB">'+turnLevel+'<\/td>';
	tempHTML = tempHTML + '	<td class="r7w">TURN CHECK<\/td>';
	tempHTML = tempHTML + '	<td style="background:'+tempBG+'" class="c9sB">1d20'+modPlusMinusNone(turnCheck)+'<\/td>';
	tempHTML = tempHTML + '	<td class="r7w">TURN DAMAGE<\/td>';
	tempHTML = tempHTML + '	<td style="background:'+tempBG+'" class="c9sB">'+numDice+'d'+sizeDie+modPlusMinusNone(turnDamage)+'<\/td>';
	tempHTML = tempHTML + '<\/tr>';
	tempHTML = tempHTML + '<tr>';
	tempHTML = tempHTML + '	<td width="1%" class="r7w">Roll&nbsp;<a name="#" onClick="rollTurning('+turnCheck+','+numDice+','+sizeDie+','+turnDamage+','+turnLevel+',\''+title+'_roll\',\'\');"><img src="die.png" Alt="Roll" width="24px" height="26px" border="0"></a><\/td>';
	tempHTML = tempHTML + '	<td id="' + title + '_roll" colspan="3" class="c9sBx">&nbsp;<\/td>';
	tempHTML = tempHTML + '	<td class="r7w">TURNS/DAY<\/td>';
	tempHTML = tempHTML + '	<td style="background:'+tempBG+'" class="c9sB">'+turnsPerDay+'<\/td>';
	tempHTML = tempHTML + '	<td style="background:'+tempBG+'" colspan="2" class="c9s">';
	turnsGrouped = turnsPerDay;
	while ( turnsGrouped > 0 )
	{
		if ( turnsGrouped > 5 )
		{
			tempHTML = tempHTML + RepeatString('&#9744;',5)+' &nbsp;';
			turnsGrouped = turnsGrouped - 5;
		}
		else
		{
			tempHTML = tempHTML + RepeatString('&#9744;',turnsGrouped);
			turnsGrouped = 0;
		}
	}
	tempHTML = tempHTML +'<\/td>';
	tempHTML = tempHTML + '<\/tr>';
	tempHTML = tempHTML + '<tr>';
	tempHTML = tempHTML + '	<td colspan="2" width="16%" class="c7w">TURNING CHECK<br />RESULT<\/td>';
	tempHTML = tempHTML + '	<td width="16%" class="c7w">AFFECTED<br />(MAX HIT DICE)<\/td>';
	tempHTML = tempHTML + '	<td width="16%" class="c7w">TURNING CHECK<br />RESULT<\/td>';
	tempHTML = tempHTML + '	<td width="16%" class="c7w">AFFECTED<br />(MAX HIT DICE)<\/td>';
	tempHTML = tempHTML + '	<td width="16%" class="c7w">TURNING CHECK<br />RESULT<\/td>';
	tempHTML = tempHTML + '	<td width="16%" class="c7w">AFFECTED<br />(MAX HIT DICE)<\/td>';
	tempHTML = tempHTML + '<\/tr>';
	tempHTML = tempHTML + '	<td colspan="2" class="c8sB">Up to 0<\/td>';
	tempHTML = tempHTML + '	<td class="c8sB">';
	if ( turnLevel <= 4 )
		tempHTML = tempHTML + 'NA';
	else
		tempHTML = tempHTML + (turnLevel - 4);
	tempHTML = tempHTML + '<\/td>';
	tempHTML = tempHTML + '	<td class="c8sgB">7 - 9<\/td>';
	tempHTML = tempHTML + '	<td class="c8sgB">';
	if ( turnLevel <= 1 )
		tempHTML = tempHTML + 'NA';
	else
		tempHTML = tempHTML + (turnLevel - 1);
	tempHTML = tempHTML + '<\/td>';
	tempHTML = tempHTML + '	<td class="c8sB">16 - 18<\/td>';
	tempHTML = tempHTML + '	<td class="c8sB">'+(turnLevel + 2)+'<\/td>';
	tempHTML = tempHTML + '<\/tr>';
	tempHTML = tempHTML + '<tr>';
	tempHTML = tempHTML + '	<td colspan="2" class="c8sgB">1 - 3<\/td>';
	tempHTML = tempHTML + '	<td class="c8sgB">';
	if ( turnLevel <= 3 )
		tempHTML = tempHTML + 'NA';
	else
		tempHTML = tempHTML + (turnLevel - 3);
	tempHTML = tempHTML + '<\/td>';
	tempHTML = tempHTML + '	<td class="c8sB">10 - 12<\/td>';
	tempHTML = tempHTML + '	<td class="c8sB">'+(turnLevel)+'<\/td>';
	tempHTML = tempHTML + '	<td class="c8sgB">19 - 21<\/td>';
	tempHTML = tempHTML + '	<td class="c8sgB">'+(turnLevel + 3)+'<\/td>';
	tempHTML = tempHTML + '<\/tr>';
	tempHTML = tempHTML + '<tr>';
	tempHTML = tempHTML + '	<td colspan="2" class="c8sB">4 - 6<\/td>';
	tempHTML = tempHTML + '	<td class="c8sB">';
	if ( turnLevel <= 2 )
		tempHTML = tempHTML + 'NA';
	else
		tempHTML = tempHTML + (turnLevel - 2);
	tempHTML = tempHTML + '<\/td>';
	tempHTML = tempHTML + '	<td class="c8sgB">13 - 15<\/td>';
	tempHTML = tempHTML + '	<td class="c8sgB">'+(turnLevel + 1)+'<\/td>';
	tempHTML = tempHTML + '	<td class="c8sB">22+<\/td>';
	tempHTML = tempHTML + '	<td class="c8sB">'+(turnLevel + 4)+'<\/td>';
	tempHTML = tempHTML + '<\/tr>';
	tempHTML = tempHTML + '<tr>';
	tempHTML = tempHTML + '	<td colspan="9" class="lt8s">'+notes+'<\/td>';
	tempHTML = tempHTML + '<\/tr>';
	tempHTML = tempHTML + '<\/table>';
	document.getElementById(title).innerHTML = tempHTML;
}
function TurnTablePrintAll()
{
	TurnTablePrint('Turn Undead', |VAR.TurnLevelUndead.INTVAL|,|VAR.TurnDamagePlusUndead.INTVAL|+AbArr[CHAindex].curModifierDiff(), |VAR.TurnCheckUndead.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnTimesUndead.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnDiceUndead.INTVAL|,|VAR.TurnDieSizeUndead.INTVAL|,'NOTE: You destroy Undead creatures with total hit dice up to |VAR.TurnLevelUndead/2.INTVAL|');
	TurnTablePrint('Rebuke Undead',|VAR.TurnLevelUndead.INTVAL|,|VAR.TurnDamagePlusUndead.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnCheckUndead.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnTimesUndead.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnDiceUndead.INTVAL|,|VAR.TurnDieSizeUndead.INTVAL|,'NOTE: You command Undead creatures with total hit dice up to |VAR.TurnLevelUndead.INTVAL|');
	TurnTablePrint('Turn Air',|VAR.TurnLevelAir.INTVAL|,|VAR.TurnDamagePlusAir.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnCheckAir.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnTimesAir.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnDiceAir.INTVAL|,|VAR.TurnDieSizeAir.INTVAL|,'NOTE: You destroy air creatures with total hit dice up to |VAR.TurnLevelAir/2.INTVAL|');
	TurnTablePrint('Rebuke Air',|VAR.TurnLevelAir.INTVAL|,|VAR.TurnDamagePlusAir.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnCheckAir.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnTimesAir.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnDiceAir.INTVAL|,|VAR.TurnDieSizeAir.INTVAL|,'NOTE: You command air creatures with total hit dice up to |VAR.TurnLevelAir.INTVAL|');
	TurnTablePrint('Turn Earth',|VAR.TurnLevelEarth.INTVAL|,|VAR.TurnDamagePlusEarth.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnCheckEarth.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnTimesEarth.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnDiceEarth.INTVAL|,|VAR.TurnDieSizeEarth.INTVAL|,'NOTE: You destroy earth creatures with total hit dice up to |VAR.TurnLevelEarth/2.INTVAL|');
	TurnTablePrint('Rebuke Earth',|VAR.TurnLevelEarth.INTVAL|,|VAR.TurnDamagePlusEarth.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnCheckEarth.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnTimesEarth.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnDiceEarth.INTVAL|,|VAR.TurnDieSizeEarth.INTVAL|,'NOTE: You command earth creatures with total hit dice up to |VAR.TurnLevelEarth.INTVAL|');
	TurnTablePrint('Turn Water',|VAR.TurnLevelWater.INTVAL|,|VAR.TurnDamagePlusWater.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnCheckWater.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnTimesWater.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnDiceWater.INTVAL|,|VAR.TurnDieSizeWater.INTVAL|,'NOTE: You destroy water creatures with total hit dice up to |VAR.TurnLevelWater/2.INTVAL|');
	TurnTablePrint('Rebuke Water',|VAR.TurnLevelWater.INTVAL|,|VAR.TurnDamagePlusWater.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnCheckWater.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnTimesWater.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnDiceWater.INTVAL|,|VAR.TurnDieSizeWater.INTVAL|,'NOTE: You command water creatures with total hit dice up to |VAR.TurnLevelWater.INTVAL|');
	TurnTablePrint('Turn Fire',|VAR.TurnLevelFire.INTVAL|,|VAR.TurnDamagePlusFire.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnCheckFire.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnTimesFire.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnDiceFire.INTVAL|,|VAR.TurnDieSizeFire.INTVAL|,'NOTE: You destroy fire creatures with total hit dice up to |VAR.TurnLevelFire/2.INTVAL|');
	TurnTablePrint('Rebuke Fire',|VAR.TurnLevelFire.INTVAL|,|VAR.TurnDamagePlusFire.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnCheckFire.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnTimesFire.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnDiceFire.INTVAL|,|VAR.TurnDieSizeFire.INTVAL|,'NOTE: You command fire creatures with total hit dice up to |VAR.TurnLevelFire.INTVAL|');
	TurnTablePrint('Rebuke Plant',|VAR.TurnLevelPlant.INTVAL|,|VAR.TurnDamagePlusPlant.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnCheckPlant.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnTimesPlant.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnDicePlant.INTVAL|,|VAR.TurnDieSizePlant.INTVAL|,'NOTE: You command plant creatures with total hit dice up to |VAR.TurnLevelPlant.INTVAL|');
	TurnTablePrint('Turn Plant',|VAR.TurnLevelPlant.INTVAL|,|VAR.TurnDamagePlusPlant.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnCheckPlant.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnTimesPlant.INTVAL|+AbArr[CHAindex].curModifierDiff(),|VAR.TurnDicePlant.INTVAL|,|VAR.TurnDieSizePlant.INTVAL|,'NOTE: You destroy plant creatures with total hit dice up to |VAR.TurnLevelPlant/2.INTVAL|');
}

function NamePrint()
{
	nameStatus = charName + ' ';
	parenFlag = 0;
	for ( i=0; i<StateArr.length; ++i ) {
		if ( StateArr[i].isActive ) {
			if ( parenFlag == 0 ) {
				nameStatus = nameStatus + '(' + StateArr[i].outputStateString();
				parenFlag = 1;
			}
			else
        			nameStatus = nameStatus + '/' + StateArr[i].outputStateString();
		}
	}
	if ( parenFlag == 1 )
		nameStatus = nameStatus + ')';
	document.getElementById('charName').innerHTML = '<span class="l12mB">'+nameStatus+'<\/span>';
}

EvenOddColor = "white";
function EvenOddLine()
{
	if(EvenOddColor == "white")
		EvenOddColor = "#DDDDDD";
	else
		EvenOddColor = "white";
	outstr = '<tr style="background:' + EvenOddColor + ';">';
	return outstr;
}

function FirstChar(s)
{
	return s.substr(0,1);
}
function StripZero(s)
{
	return s.replace(/\.0$/,'');
}
function StripSpace(s)
{
	return s.replace(/ /,'');
}
function RepeatString(str,times)
{
	// Deal with the possibility that times is a non-numeric string
	if ( Math.round(times) != times )
		return str;
	else
		times = Math.round(times);
	var s = '';
	for ( ;times>0; times = times - 1 )
		s = s + str;
	return s.replace(/\.0$/,'');
}
function RepeatStringToDocument(str,times)
{
	document.write( RepeatString(str,times) );
	return;
}
function WriteCheckBoxesToDocument(times)
{
	RepeatStringToDocument('o',times);
	return;
}
function min(first,second) {
	if (first < second)
		return first;
	else
		return second;
}
function Compact()
{
	document.getElementById('SkillsComprehensive').style.display = 'none';
	document.getElementById('SkillsCompactdiv').style.display = 'inline';
	document.getElementById('WeaponsCompact').style.display = 'inline';
	document.getElementById('WeaponsComprehensive').style.display = 'none';
	document.getElementById('WeaponsExtra').style.display = 'none';
	document.getElementById('ArmourCompact').style.display = 'inline';
	document.getElementById('ArmourComprehensive').style.display = 'none';
	document.getElementById('EquipmentCompact').style.display = 'inline';
	document.getElementById('SpellBookComprehensive').style.display = 'inline';
	CreateClassInnateSpellsCompact();
	CreateMainSpellCompact();
	BuildEqCompTable();
//	writeMiscNotes();
	CurHPPrint();
};
function writeMiscNotes()
{
//FIXME: The html fomatting is being converted to non-html and causing code to appear
//       on the page.  Requires adjustment in the core program.  This attempt to undo
//       such non-html cannot handle multiline strings.
//	before = '    NOTE.ALL.<b>.</b>.<br />    '; // Causing multi-line unterminated strings
//	temp1 = before.replace(/&lt;b&gt;/g, "<b>");
//	temp2 = temp1.replace(/&lt;\/b&gt;/g, "</b>");
//	after = temp2.replace(/&lt;br\/&gt;/g, "<br />");
//	if (document.getElementById('MagicNotes') != null) 
//		document.getElementById('MagicNotes').innerHTML = after;
}
function RecordDiceRoll( foobar )
{
	var currentTime = new Date();
	var hours = currentTime.getHours();
	var minutes = currentTime.getMinutes();
	var seconds = currentTime.getSeconds();
	if (minutes < 10)
		minutes = "0" + minutes;
	if (seconds < 10)
		seconds = "0" + seconds;
	if (document.getElementById('evidence') != null) 
		MyEvidence = document.getElementById('evidence').innerHTML;
	MyEvidence = MyEvidence + '<br />\n'+hours+':'+minutes+':'+seconds+' ' + foobar;
	document.getElementById('evidence').innerHTML = MyEvidence;
}

// Section markers for handling if a spell has been memorized in interactive mode.
function UPDiv(into, school, level)
{
	if (document.getElementById(into) != null) {
		Memorized[ school+'.'+level ].mem() ;
		if(Memorized[ school+'.'+level ].error == 0) {
			cur = document.getElementById(into).innerHTML;
			cur = '<a name="#" onclick=\'DOWNDiv("'+into+'","'+school+'","'+level+'");\'><b>&sect;</b></a> ' + cur;
			if((cur.length > 0) && (cur.length < 2000))
				document.getElementById(into).innerHTML = cur;
		}
	}
}
function DOWNDiv(into, school, level)
{
	if (document.getElementById(into) != null) {
		Memorized[ school+'.'+level ].cast() ;
		if(Memorized[ school+'.'+level ].error == 0) {
			cur = document.getElementById(into).innerHTML;
			pos = cur.search(/<\/a>/i);
			if(pos != -1) {
				sendout = cur.substr(pos+5);
				if((sendout.length > 0) && (sendout.length < 2000))
					document.getElementById(into).innerHTML = sendout;
			}
		}
	}
}

function CycleSkills()
{
	if(document.getElementById('SkillsHeaderOnly').style.display == 'inline') {
		document.getElementById('SkillsHeaderOnly').style.display = 'none';
		document.getElementById('SkillsCompactdiv').style.display = 'none';
		document.getElementById('SkillsComprehensive').style.display = 'inline';
	} else if(document.getElementById('SkillsCompactdiv').style.display == 'inline') {
		document.getElementById('SkillsHeaderOnly').style.display = 'inline';
		document.getElementById('SkillsCompactdiv').style.display = 'none';
		document.getElementById('SkillsComprehensive').style.display = 'none';
	} else if(document.getElementById('SkillsComprehensive').style.display == 'inline') {
		document.getElementById('SkillsHeaderOnly').style.display = 'none';
		document.getElementById('SkillsCompactdiv').style.display = 'inline';
		document.getElementById('SkillsComprehensive').style.display = 'none';
	} else 
		document.getElementById('SkillsHeaderOnly').style.display = 'inline';
};
function CycleFeats()
{
	if(document.getElementById('FeatsHeaderOnly').style.display == 'inline') {
		document.getElementById('FeatsHeaderOnly').style.display = 'none';
		document.getElementById('FeatsCompactDiv').style.display = 'none';
		document.getElementById('FeatsBenefitDiv').style.display = 'none';
		document.getElementById('FeatsComprehensive').style.display = 'inline';
	} else if(document.getElementById('FeatsCompactDiv').style.display == 'inline') {
		document.getElementById('FeatsHeaderOnly').style.display = 'inline';
		document.getElementById('FeatsCompactDiv').style.display = 'none';
		document.getElementById('FeatsBenefitDiv').style.display = 'none';
		document.getElementById('FeatsComprehensive').style.display = 'none';
	} else if(document.getElementById('FeatsComprehensive').style.display == 'inline') {
		document.getElementById('FeatsHeaderOnly').style.display = 'none';
		document.getElementById('FeatsCompactDiv').style.display = 'none';
		document.getElementById('FeatsBenefitDiv').style.display = 'inline';
		document.getElementById('FeatsComprehensive').style.display = 'none';
	} else if(document.getElementById('FeatsBenefitDiv').style.display == 'inline') {
		document.getElementById('FeatsHeaderOnly').style.display = 'none';
		document.getElementById('FeatsCompactDiv').style.display = 'inline';
		document.getElementById('FeatsBenefitDiv').style.display = 'none';
		document.getElementById('FeatsComprehensive').style.display = 'none';
	} else {
		document.getElementById('FeatsHeaderOnly').style.display = 'inline';
		document.getElementById('FeatsCompactDiv').style.display = 'none';
		document.getElementById('FeatsBenefitDiv').style.display = 'none';
		document.getElementById('FeatsComprehensive').style.display = 'none';
	}
};
function CycleEquipment()
{
	if(document.getElementById('EquipmentHeaderOnly').style.display == 'inline') {
		document.getElementById('EquipmentHeaderOnly').style.display = 'none';
		document.getElementById('EquipmentCompact').style.display = 'none';
		document.getElementById('EquipmentComprehensive').style.display = 'inline';
	} else if(document.getElementById('EquipmentCompact').style.display == 'inline') {
		document.getElementById('EquipmentHeaderOnly').style.display = 'inline';
		document.getElementById('EquipmentCompact').style.display = 'none';
		document.getElementById('EquipmentComprehensive').style.display = 'none';
	} else if(document.getElementById('EquipmentComprehensive').style.display == 'inline') {
		document.getElementById('EquipmentHeaderOnly').style.display = 'none';
		document.getElementById('EquipmentCompact').style.display = 'inline';
		document.getElementById('EquipmentComprehensive').style.display = 'none';
	} else 
		document.getElementById('EquipmentHeaderOnly').style.display = 'inline';
};
function CycleDomains()
{
	if(document.getElementById('DomainsHeaderOnly').style.display == 'inline') {
		document.getElementById('DomainsHeaderOnly').style.display = 'none';
		document.getElementById('DomainsCompact').style.display = 'inline';
	} else if(document.getElementById('DomainsCompact').style.display == 'inline') {
		document.getElementById('DomainsHeaderOnly').style.display = 'inline';
		document.getElementById('DomainsCompact').style.display = 'none';
	} else {
		document.getElementById('DomainsHeaderOnly').style.display = 'inline';
		document.getElementById('DomainsCompact').style.display = 'none';
	}
};
function CycleMoney()
{
	if(document.getElementById('MoneyHeaderOnly').style.display == 'inline') {
		document.getElementById('MoneyHeaderOnly').style.display = 'none';
		document.getElementById('MoneyCompact').style.display = 'inline';
	} else if(document.getElementById('MoneyCompact').style.display == 'inline') {
		document.getElementById('MoneyHeaderOnly').style.display = 'inline';
		document.getElementById('MoneyCompact').style.display = 'none';
	} else
		document.getElementById('MoneyHeaderOnly').style.display = 'inline';
};
function CycleProficiencies()
{
	if(document.getElementById('ProficienciesHeaderOnly').style.display == 'inline') {
		document.getElementById('ProficienciesHeaderOnly').style.display = 'none';
		document.getElementById('ProficienciesCompact').style.display = 'inline';
	} else if(document.getElementById('ProficienciesCompact').style.display == 'inline') {
		document.getElementById('ProficienciesHeaderOnly').style.display = 'inline';
		document.getElementById('ProficienciesCompact').style.display = 'none';
	} else
		document.getElementById('ProficienciesHeaderOnly').style.display = 'inline';
};
function CycleWeapons()
{
	if(document.getElementById('WeaponsComprehensive').style.display == 'inline') {
		document.getElementById('WeaponsComprehensive').style.display = 'none';
		document.getElementById('ArmourComprehensive').style.display = 'none';
		document.getElementById('WeaponsExtra').style.display = 'none';
		document.getElementById('WeaponsCompact').style.display = 'inline';
		document.getElementById('ArmourCompact').style.display = 'inline';
	} else if(document.getElementById('WeaponsCompact').style.display == 'inline') {
		document.getElementById('WeaponsComprehensive').style.display = 'inline';
		document.getElementById('ArmourComprehensive').style.display = 'inline';
		document.getElementById('WeaponsExtra').style.display = 'inline';
		document.getElementById('WeaponsCompact').style.display = 'none';
		document.getElementById('ArmourCompact').style.display = 'none';
	} else {
		document.getElementById('WeaponsCompact').style.display = 'inline';
		document.getElementById('ArmourCompact').style.display = 'inline';
		document.getElementById('WeaponsComprehensive').style.display = 'none';
		document.getElementById('ArmourComprehensive').style.display = 'none';
		document.getElementById('WeaponsExtra').style.display = 'none';
	}
};
function CycleFamiliar()
{
	if(document.getElementById('FamiliarHeaderOnly').style.display == 'inline') {
		document.getElementById('FamiliarHeaderOnly').style.display = 'none';
		document.getElementById('FamiliarCompact').style.display = 'inline';
	} else if(document.getElementById('FamiliarCompact').style.display == 'inline') {
		document.getElementById('FamiliarHeaderOnly').style.display = 'inline';
		document.getElementById('FamiliarCompact').style.display = 'none';
	} else
		document.getElementById('FamiliarHeaderOnly').style.display = 'inline';
};
function CycleAnimalCompanion()
{
	if(document.getElementById('AnimalCompanionHeaderOnly').style.display == 'inline') {
		document.getElementById('AnimalCompanionHeaderOnly').style.display = 'none';
		document.getElementById('AnimalCompanionCompact').style.display = 'inline';
	} else if(document.getElementById('AnimalCompanionCompact').style.display == 'inline') {
		document.getElementById('AnimalCompanionHeaderOnly').style.display = 'inline';
		document.getElementById('AnimalCompanionCompact').style.display = 'none';
	} else
		document.getElementById('AnimalCompanionHeaderOnly').style.display = 'inline';
};
function CycleSpecialMount()
{
	if(document.getElementById('SpecialMountHeaderOnly').style.display == 'inline') {
		document.getElementById('SpecialMountHeaderOnly').style.display = 'none';
		document.getElementById('SpecialMountCompact').style.display = 'inline';
	} else if(document.getElementById('SpecialMountCompact').style.display == 'inline') {
		document.getElementById('SpecialMountHeaderOnly').style.display = 'inline';
		document.getElementById('SpecialMountCompact').style.display = 'none';
	} else
		document.getElementById('SpecialMountHeaderOnly').style.display = 'inline';
};
function CycleMount()
{
	if(document.getElementById('MountHeaderOnly').style.display == 'inline') {
		document.getElementById('MountHeaderOnly').style.display = 'none';
		document.getElementById('MountCompact').style.display = 'inline';
	} else if(document.getElementById('MountCompact').style.display == 'inline') {
		document.getElementById('MountHeaderOnly').style.display = 'inline';
		document.getElementById('MountCompact').style.display = 'none';
	} else
		document.getElementById('MountHeaderOnly').style.display = 'inline';
};

function CreateMainSpellCompact()
{
	singleqt = "'";
|FOR,%class,COUNT[SPELLRACE],COUNT[CLASSES],1,1|
|%SPELLLISTCLASS.%class|
	spellhdrHTML = '';
	spellhdrHTML = spellhdrHTML + '<table width="100%" cellspacing="0" cellpadding="2" border="0">';
	spellhdrHTML = spellhdrHTML + '<tr>';
	spellhdrHTML = spellhdrHTML + '		<td rowspan=4 class="l10wB">&nbsp;<a class="c10yB" name="#" onclick="ToggleDIV(\'MainSpellsCompact.' + "|SPELLLISTCLASS.%class|" + '\');">' + "|SPELLLISTCLASS.%class|" + '</a></td>';
	spellhdrHTML = spellhdrHTML + '		<td class="r8wB" width="10%">Level&nbsp;</td>';
|FOR,%level,0,MAXSPELLLEVEL.%class,1,1|
	spellhdrHTML = spellhdrHTML + '		<td class="c6wB">' + "|VAR.%level.INTVAL|" + '<br /></td>';
|ENDFOR|
	spellhdrHTML = spellhdrHTML + '	</tr>';
	spellhdrHTML = spellhdrHTML + '	<tr>';
	spellhdrHTML = spellhdrHTML + '		<td class="r8wB" width="10%">DC&nbsp;</td>';
|FOR,%level,0,MAXSPELLLEVEL.%class,1,1|
	spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">' + "|SPELLLISTDC.%class.%level|" + '<br /></td>';
|ENDFOR|
	spellhdrHTML = spellhdrHTML + '	</tr>';
|IIF(SPELLLISTTYPE.%class:Psionic)|
	spellhdrHTML = spellhdrHTML + '	<tr>';
	spellhdrHTML = spellhdrHTML + '		<td class="r8wB" width="10%">Known&nbsp;</td>';
|FOR,%level,0,MAXSPELLLEVEL.%class,1,1|
|IIF(%level:0)|
	spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">' + "|SPELLLISTKNOWN.%class.%level|" + '<br /></td>';
|ELSE|
|IIF(SPELLLISTKNOWN.%class.%level:0)|
	spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">' + "|SPELLLISTKNOWN.%class.%level.NOZERO|" + '<br /></td>';
|ELSE|
	spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">' + "|SPELLLISTKNOWN.%class.%level|" + '<br /></td>';
|ENDIF|
|ENDIF|
|ENDFOR|
	spellhdrHTML = spellhdrHTML + '	</tr>';
|ELSE|
	caster = '|SPELLLISTCLASS.%class|';
	if(caster == 'Sorcerer') {
		spellhdrHTML = spellhdrHTML + '	<tr>';
		spellhdrHTML = spellhdrHTML + '		<td class="r8wB" width="10%">Known&nbsp;</td>';
|FOR,%level,0,MAXSPELLLEVEL.%class,1,1|
|IIF(SPELLLISTKNOWN.%class.%level:0)|
		spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">' + "|SPELLLISTKNOWN.%class.%level.NOZERO|" + '<br /></td>';
|ELSE|
		spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">' + "|SPELLLISTKNOWN.%class.%level|" + '<br /></td>';
|ENDIF|
|ENDFOR|
		spellhdrHTML = spellhdrHTML + '	</tr>';
	} else if(caster == 'Bard') {
		spellhdrHTML = spellhdrHTML + '	<tr>';
		spellhdrHTML = spellhdrHTML + '		<td class="r8wB" width="10%">Known&nbsp;</td>';
|FOR,%level,0,MAXSPELLLEVEL.%class,1,1|
|IIF(SPELLLISTKNOWN.%class.%level:0)|
		spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">' + "|SPELLLISTKNOWN.%class.%level.NOZERO|" + '<br /></td>';
|ELSE|
		spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">' + "|SPELLLISTKNOWN.%class.%level|" + '<br /></td>';
|ENDIF|
|ENDFOR|
		spellhdrHTML = spellhdrHTML + '	</tr>';
	}
	spellhdrHTML = spellhdrHTML + '	<tr>';
	spellhdrHTML = spellhdrHTML + '		<td class="r8wB" width="10%">Cast/day&nbsp;</td>';
|FOR,%level,0,MAXSPELLLEVEL.%class,1,1|
	caster = '|SPELLLISTCLASS.%class|';
|IIF(%level:0)|
|IIF(GAMEMODE:Pathfinder)|
	if(caster == 'Sorcerer') {
		spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">at&nbsp;will</td>';
	} else if(caster == 'Bard') {
		spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">at&nbsp;will</td>';
	} else if(caster == 'Wizard') {
		Memorized['Wizard.0'] = new MemSpellsLevel(eval(|SPELLLISTCAST.%class.%level|), "Wizard", 0);
		spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">|SPELLLISTCAST.%class.%level|&nbsp;at&nbsp;will</td>';
	} else if(caster == 'Druid') {
		Memorized['Druid.0'] = new MemSpellsLevel(eval(|SPELLLISTCAST.%class.%level|), "Druid", 0);
		spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">|SPELLLISTCAST.%class.%level|&nbsp;at&nbsp;will</td>';
	} else if(caster == 'Cleric') {
		Memorized['Cleric.0'] = new MemSpellsLevel(eval(|SPELLLISTCAST.%class.%level|), "Cleric", 0);
		spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">|SPELLLISTCAST.%class.%level|&nbsp;at&nbsp;will</td>';
	} else {
		Memorized[ caster+'.0' ] = new MemSpellsLevel(eval(|SPELLLISTCAST.%class.%level|), caster, 0);
		spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">' + "|SPELLLISTCAST.%class.%level|" + '</td>';
	}
|ELSE|
	Memorized[ caster+'.0'] = new MemSpellsLevel(eval(|SPELLLISTCAST.%class.%level|), caster, 0);
	spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">' + "|SPELLLISTCAST.%class.%level|" + '</td>';
|ENDIF|
|ELSE|
	Memorized[ caster+'.|%level|'] = new MemSpellsLevel(eval(|SPELLLISTCAST.%class.%level|), caster, |%level|);
|IIF(SPELLLISTCAST.%class.%level:0)|
	spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">' + "|SPELLLISTCAST.%class.%level.NOZERO|" + '</td>';
|ELSE|
	spellhdrHTML = spellhdrHTML + '		<td width="6%" class="c8">' + "|SPELLLISTCAST.%class.%level|" + '</td>';
|ENDIF|
|ENDIF|
|ENDFOR|
	spellhdrHTML = spellhdrHTML + '	</tr>';
|ENDIF|
	spellhdrHTML = spellhdrHTML + '	</table>';
	outdiv = 'MainSpellsHeader.' + "|SPELLLISTCLASS.%class|" ;
	document.getElementById(outdiv).innerHTML = spellhdrHTML;
|%|
|FOR,%sbook,0,0,1,1|
	spellHTML = '';
	spellHTML = spellHTML + '<table cellpadding="0" cellspacing="0" border="2" bordercolor="black" width="100%">';
	spellHTML = spellHTML + '<tr><td width="100%">';
|FOR,%level,0,MAXSPELLLEVEL.%class,1,1|
|%SPELLLISTBOOK.%class.%level.%sbook|
<!-- by-level detail -->
	spellHTML = spellHTML + '<table cellpadding="0" cellspacing="0" border="0" width="100%">';
	spellHTML = spellHTML + '<tr>';
	spellHTML = spellHTML + '	<td class="lt7b" width="3%">' + "%level" + ':</td>';
	spellHTML = spellHTML + '	<td class="lt6b">';
	spellHTML = spellHTML + ' 	<table cellpadding="1" cellspacing="0" border="0" width="100%">';
	spellHTML = spellHTML +	'	<tr>';
	spellHTML = spellHTML +	'		<td width="33%"></td><td width="33%"></td><td width="33%"></td>';
	spellHTML = spellHTML +	'	</tr>';
|IIF(SPELLLISTCLASS.%class:Sorcerer)
|FOR,%cnt,0,100,1,1|
	ignore = '|SPELLMEM.%class.%sbook.%level.%cnt.BONUSSPELL|'; // forces stop of for when empty
|IIF((%cnt)%3==0)|
	spellHTML = spellHTML + '<tr>';
|ENDIF|
	spellHTML = spellHTML + '<td width="33%" class="lt9">';
	spellHTML = spellHTML + '<a class="lh9" name="#" onclick=' + "'" + 'ToggleDIV("' + 'Class.Regular.' + '|%class|' + '.' + '|%sbook|' + '.' + '|%cnt|' + '.' + '|%level|' + '");' + "'>" + "|SPELLMEM.%class.%sbook.%level.%cnt.NAME|" + '</a>' + "|SPELLMEM.%class.%sbook.%level.%cnt.BONUSSPELL|" + '</td>';
|IIF((%cnt+1)%3==0)|
	spellHTML = spellHTML + '</tr>';
|ENDIF|
|ENDFOR|
|ELSE|
|IIF(SPELLLISTCLASS.%class:Bard)
|FOR,%cnt,0,100,1,1|
	ignore = '|SPELLMEM.%class.%sbook.%level.%cnt.BONUSSPELL|'; // forces stop of for when empty
|IIF((%cnt)%3==0)|
	spellHTML = spellHTML + '<tr>';
|ENDIF|
	spellHTML = spellHTML + '<td width="33%" class="lt9">';
	spellHTML = spellHTML + '<a class="lh9" name="#" onclick=' + "'" + 'ToggleDIV("' + 'Class.Regular.' + '|%class|' + '.' + '|%sbook|' + '.' + '|%cnt|' + '.' + '|%level|' + '");' + "'>" + "|SPELLMEM.%class.%sbook.%level.%cnt.NAME|" + '</a>' + "|SPELLMEM.%class.%sbook.%level.%cnt.BONUSSPELL|" + '</td>';
|IIF((%cnt+1)%3==0)|
	spellHTML = spellHTML + '</tr>';
|ENDIF|
|ENDFOR|
|ELSE|
|FOR,%cnt,0,100,1,1|
	ignore = '|SPELLMEM.%class.%sbook.%level.%cnt.BONUSSPELL|'; // forces stop of for when empty
|IIF((%cnt)%3==0)|
	spellHTML = spellHTML + '<tr>';
|ENDIF|
	spellHTML = spellHTML + '<td width="33%" class="lt9">';
		spellHTML = spellHTML + '<div class="r9" border=1 bordercolor="white" id="Class.Regular.'+'|%class|'+'.'+'|%sbook|'+'.'+'|%cnt|'+'.'+'|%level|.mem" style="display:inline;"><a class="r9" name="#" onclick='+singleqt+'UPDiv("Class.Regular.'+'|%class|'+'.'+'|%sbook|'+'.'+'|%cnt|'+'.'+'|%level|.mem","|SPELLLISTCLASS.%class|","|%level|");'+singleqt+'>&curren;</a>&nbsp;</div>';
		spellHTML = spellHTML + '<a class="lh9" name="#" onclick=' + "'" + 'ToggleDIV("' + 'Class.Regular.' + '|%class|' + '.' + '|%sbook|' + '.' + '|%cnt|' + '.' + '|%level|' + '");' + "'>" + "|SPELLMEM.%class.%sbook.%level.%cnt.NAME|" + '</a>' + "|SPELLMEM.%class.%sbook.%level.%cnt.BONUSSPELL|" + '</td>';
|IIF((%cnt+1)%3==0)|
	spellHTML = spellHTML + '</tr>';
|ENDIF|
|ENDFOR|
|ENDIF|
|ENDIF|
	spellHTML = spellHTML +	'	</table>';
	spellHTML = spellHTML +	'	</td>';
	spellHTML = spellHTML +	'</tr>';
	spellHTML = spellHTML +	'</table>';
|%|
|ENDFOR|
|ENDFOR|
<!-- End Regular Spells -->
|%SPELLLISTCLASS.%class|
	spellHTML = spellHTML + '<table cellpadding="0" cellspacing="0" border="0" width="100%">';
	spellHTML = spellHTML +	'<tr>';
	spellHTML = spellHTML +	'<td class="lt8">&nbsp;</td><td class="lt8">A trailing <b>*</b> = Domain/Specialty Spell</td>';
|IIF(SPELLLISTCLASS.%class:Sorcerer)
|ELSE|
|IIF(SPELLLISTCLASS.%class:Bard)
|ELSE|
	spellHTML = spellHTML +	'<td class="lt8" width="20px">&nbsp;</td><td class="lt8">Click the &curren; to mark a spell with a <b>&sect;</b> as prepared for casting.</td>';
	spellHTML = spellHTML +	'<td class="lt8" width="20px">&nbsp;</td><td class="lt8">Click the <b>&sect;</b> after casting to clear the spell.</td>';
|ENDIF|
|ENDIF|
	spellHTML = spellHTML +	'	</tr>';
	spellHTML = spellHTML +	'	</table>';
	spellHTML = spellHTML +	'</td></tr>';
	spellHTML = spellHTML +	'</table>';
	outdiv = 'MainSpellsCompact.' + "|SPELLLISTCLASS.%class|" ;
	document.getElementById(outdiv).innerHTML = spellHTML;
|%|
|ENDFOR|
	return false;
}

function CreateClassInnateSpellsCompact()
{
	racialHTML = '';
	innateHTML = '';
	racialHTML = racialHTML + "<table width='100%' cellspacing='0' cellpadding='2' border='0'>";
	innateHTML = innateHTML + "<table width='100%' cellspacing='0' cellpadding='2' border='0'>";
	racialHTML = racialHTML + "<tr><td width='100%' class='l9'>";
	innateHTML = innateHTML + "<tr><td width='100%' class='l9'>";
|FOR,%spellrace,COUNT[SPELLRACE],COUNT[SPELLRACE],1,0|
|IIF(%spellrace:0)|
	<!-- No innate spells -->
|ELSE|
|FOR,%spellbook,1,COUNT[SPELLBOOKS]-1,1,0|
|FOR,%class,0,0,1,1|
|FOR,%level,0,0,1,1|
|%SPELLLISTBOOK.%class.%level.%spellbook|
|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,1,0|
|IIF(%spellbook:1)|
	racialHTML = racialHTML + '<a class="lh9" name="#" onclick="ToggleDIV(\'' + 'Racial.Innate.' + '|%spell|' + '\');">' +"|SPELLMEM.%class.%spellbook.%level.%spell.NAME|</a>";
	units = "|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|";
	perunit = "/|SPELLMEM.%class.%spellbook.%level.%spell.TIMEUNIT|";
	if( perunit == "/")
			  perunit = "/day";
|OIF((SPELLMEM.%class.%spellbook.%level.%spell.TIMES>0), racialHTML = racialHTML + ' (' + units + perunit + ')';,)|
|OIF((SPELLMEM.%class.%spellbook.%level.%spell.TIMES:ATWILL), racialHTML = racialHTML + ' (at will)';,)|
|OIF((SPELLMEM.%class.%spellbook.%level.%spell.TIMES:0), racialHTML = racialHTML + ' (?' + perunit +')';,)|
	racialHTML = racialHTML + ',&nbsp;&nbsp;';
|ELSE|
	innateHTML = innateHTML + '<a class="lh9" name="#" onclick="ToggleDIV(\'' + 'Class.Innate.' + '|%spellbook|' + '.' + '|%spell|' + '\');">' +"|SPELLMEM.%class.%spellbook.%level.%spell.NAME|</a>";
	units = "|SPELLMEM.%class.%spellbook.%level.%spell.TIMES|";
	perunit = "/|SPELLMEM.%class.%spellbook.%level.%spell.TIMEUNIT|";
	if( perunit == "/")
			  perunit = "/day";
|OIF((SPELLMEM.%class.%spellbook.%level.%spell.TIMES>0), innateHTML = innateHTML + ' (' + units + perunit + ')';,)|
|OIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:ATWILL, innateHTML = innateHTML + ' (at will)';,)|
|OIF(SPELLMEM.%class.%spellbook.%level.%spell.TIMES:0, innateHTML = innateHTML + ' (?' + perunit +')';,)|
	innateHTML = innateHTML + ',&nbsp;&nbsp;';
|ENDIF|
|ENDFOR|
|%|
|ENDFOR|
|ENDFOR|
|ENDFOR|
	racialHTML = racialHTML + "</td></tr>";
	innateHTML = innateHTML + "</td></tr>";
	racialHTML = racialHTML + "</table>";
	innateHTML = innateHTML + "</table>";
	if (document.getElementById('RacialInnateSpellsCompact') != null) 
		document.getElementById('RacialInnateSpellsCompact').innerHTML = racialHTML;
	if (document.getElementById('ClassInnateSpellsCompact') != null) 
		document.getElementById('ClassInnateSpellsCompact').innerHTML = innateHTML;
|ENDIF|
	return false;
}

// *************************************************
// This puts a '+' in front of a number if necessary
// *************************************************
function modPlusMinus( what )
{
   if ( what < 0 )
      return what;
   else
      return "+" + what;
};
function modPlusMinusNone( what )
{
   if ( what < 0 )
      return what;
   else if (what == 0)
	  return "";
   else
      return "+" + what;
};
// ********************************************
// This returns what without its first char
// ********************************************
function chopFirstChar( what )
{
   if ( what.length > 0 )
      return what.substr(1,what.length-1);
   else
      return what;
};
// ********************************************
// this object contains the AttackBonus and damage
// numbers from PCGen for the off hand and 2 weapon stats
// for a melee weapon.  It is meant to be
// created and stored by the weapon object
// A variable of type Weapon2Vector supports the following
// Only those marked with * should be modified after creation
// ********************************************
// AttackBonus1hp			string	AttackBonus modifier when used 1 handed primary hand
// AttackBonus1ho			string	AttackBonus modifier when used 1 handed off hand
// AttackBonus2h			string	AttackBonus modifier when used 2 handed
// AttackBonus2wpoh		string	AttackBonus modifier when used 2 weapon primary, off hand heavy
// AttackBonus2wpol		string	AttackBonus modifier when used 2 weapon primary, off hand light
// AttackBonus2woh		string	AttackBonus modifier when used 2 weapon as the off hand weapon
// dam1hp			string	damage modifier when used 1 handed primary hand
// dam1ho			string	damage modifier when used 1 handed off hand
// dam2h				string	damage modifier when used 2 handed
// dam2wpoh			string	damage modifier when used 2 weapon primary, off hand heavy
// dam2wpol			string	damage modifier when used 2 weapon primary, off hand light
// dam2woh			string	damage modifier when used 2 weapon as the off hand weapon
function Weapon2Vector( th1hp, th1ho, th2h, th2wpoh, th2wpol, th2woh, d1hp, d1ho, d2h, d2wpoh, d2wpol, d2woh )
{
	this.AttackBonus1hp = th1hp;
	this.AttackBonus1ho = th1ho;
	this.AttackBonus2h = th2h;
	this.AttackBonus2wpoh = th2wpoh;
	this.AttackBonus2wpol = th2wpol;
	this.AttackBonus2woh = th2woh;
	this.dam1hp = d1hp;
	this.dam1ho = d1ho;
	this.dam2h = d2h;
	this.dam2wpoh = d2wpoh;
	this.dam2wpol = d2wpol;
	this.dam2woh = d2woh;
}
// ********************************************
// this object contains the AttackBonus and damage
// numbers from PCGen for the 2 weapon stats
// for a melee weapon.  It is meant to be
// created by the user, then stored by the weapon object
// A variable of type Weapon2Vector supports the following
// Only those marked with * should be modified after creation
// ********************************************
// ammoName			string	Name of ammo.  "" means no ammo was loaded in the weapon and this is the default weapons stats
// ammoSprop		string	Ammo special properties.  Only valid if ammoName is not  ""
// ammoEnergy		string	Ammo energy damage, +NdN type, +NdN type.  Only valid if ammoName is not  ""
// ammoRange		array of strings	Range (e.g. 30') increments
// ammoAttackBonus		array of strings	AttackBonus numbers at each range increment
// ammoDamage		array of strings	Damage numbers at each range increment
// addRangeIncrement ( rangestring, AttackBonusstring, damagestring )
function WeaponRangedAmmoData( aName, aSProp, aEnergy )
{
	this.ammoName = aName;
	this.ammoSprop = aSProp;
	this.ammoEnergy = aEnergy;
	this.ammoRange = new Array();
	this.ammoAttackBonus = new Array();
	this.ammoDamage = new Array();
	this.addRangeIncrement = WeaponRangedAmmoDataAddRange;
}
function WeaponRangedAmmoDataAddRange( rangestring, AttackBonusstring, damagestring )
{
	var nextIndex = this.ammoRange.length;
	this.ammoRange[nextIndex] = new String( rangestring );
	this.ammoAttackBonus[nextIndex] = new String( AttackBonusstring );
	this.ammoDamage[nextIndex] = new String( damagestring );
}
// ********************************************
// OK, this is where it gets gross.  This object
// attempts to model weapons.
// A variable of type Weapon supports the following
// Only those marked with * should be modified after creation
//  weapNum       int     RW Tells us where to render this weapon
//  name          string  RW Weapon name as passed from PCGen.
//  AttackBonusBase     string  RW As passed from PCGen
//  AttackBonusBaseArr  string array RW  AttackBonusBase split into individual "Attack Bonus" components
//  damageBase    string  RW As passed from PCGen
//  damageBaseArr string array RW  damageBase split into individual damage components
//  category      string  RW "M"elee" or "R"anged"
//  abilityNum    int     RW which stat number affects this weapon's "Attack Bonus" based upon cateogry
//  isThrown	bool	  RO TRUE if this is a thrown weapon
//  hands         string  RW "B"oth, "O"ff, "T"wo-weapon, "P"rimary, "N"one
//  range         string  RW As passed from PCGen.  For output purposes only.
//  modifyAttackBonus   string  RO Generate the weapon's (possibly modified) "Attack Bonus" string
//  modify2WAttackBonus string  RO Generate a possibly modified AttackBonus string using one of the weapon's 2w melee vectors
//  modifyRangedAttackBonus string  RO Generate a possibly modified AttackBonus string using one of the weapon's ammo slots and range increments
//  modifyDamage  string  RO Generate the weapon's (possibly modified) damage string
//  modify2WDamage string RO Generate a possibly modified damage string using one of the weapon's 2w melee vectors
//  modifyRangedDamage string  RO Generate a possibly modified damage string using one of the weapon's ammo slots and range increments
//  hasModifiedTH bool    RO TRUE if TH modified from base
//  hasModifiedDam bool   RO TRUE if Damage modified from base
// *miscTHMod     int     RW Modify TH by some means other than stat.  This is an incremental change!!  e.g. If going from +2 to +4, put 2 here
// *miscDamMod    int     RW Modify damage by some means other than stat.  This is an incremental change!!  e.g. If going from +4 to +2, put -2 here
//  isMighty      bool    RO TRUE if this is a mighty ranged weapon
//  maxMighty     int     RW maximum mighty bonus for this ranged weapon
//  crit          string  RW Crit prob as passed by PCGen
//  mult          string  RW Crit mult as passed by PCGen
//  type          string  RW Type as passed by PCGen
//  size          string  RW Size as passed by PCGen
//  sprop         string  RW Special properties as passed by PCGen
// *disabled      string  RW  If not empty, displays in place of "Attack Bonus" and damage.
// *setOutputFormat void  WO Tells the object how to format the output. 1:Ranged, 2:melee, but 2 weapon not possible, 3:melee
//  outputFormat  int     RW Stores last call to setOutputFormat
// *addMeleeVector  void  RO Tells the object to store some information for a melee weapon that could potentially be used in a 2 weapon rig
//  meleeVectors  Array   RW Stores extra information for a melee weapon when it could be used 2 weapon
// *addRangedData   void  RO Tells the object to store some information for a ranged weapon
//  rangedData    Array   RW Stores extra information for a ranged weapon
// ********************************************
function Weapon( wNum, wName, wCategory, wAttackBonus, wDam, wHands, wRange, wCrit, wMult, wType, wSize, wSprop )
{
	this.weapNum = wNum;
	this.name = wName;
	this.AttackBonusBase = wAttackBonus;
	this.AttackBonusBaseArr = this.AttackBonusBase.split(";");
	this.damageBase = wDam;
	this.damageBaseArr = this.damageBase.split("/");
	this.crit = wCrit;
	this.mult = wMult;
	this.type = wType;
	this.size = wSize;
	this.sprop = wSprop;
	this.energy = ""; // Fill in later
	this.setOutputFormat = WeaponSetOutputFormat;
	this.outputFormat = 0;
	this.addMeleeVector = WeaponAddMeleeVector;
	this.meleeVectors = new Array();
	this.addRangedData = WeaponAddRangedData;
	this.rangedData = new Array();
  	// Try to figure out if this is a melee or ranged weapon
	if ( wCategory.search("Melee") != -1 )
	   this.category = "M";
	else
		this.category = "R";
	// Most weapons aren't mighty, so set that as a default.
	this.maxMighty = 0;
	this.isMighty = WeaponIsMighty;
	// Now, based on weapon type, choose the default ability affecting the "Attack Bonus"
	// If it's melee then the default is strength
	if ( this.category == "M" )
		this.abilityNum = STRindex;
	else
	{
		// OK, this is a ranged weapon.  Is it mighty?  If so, then how mighty is it?
		this.abilityNum = DEXindex;
		var mightyIndex = this.name.search(" Mighty" );  // < - note the space before Mighty!!
		if ( mightyIndex > -1 )
		{
			var startingAt = mightyIndex-1;
			while ( startingAt >= 0 )
			{
				if ( this.name.substr(startingAt,1) == "+" )
				{
					this.maxMighty = new Number( this.name.substr(startingAt+1,mightyIndex-startingAt) );
					break;
				}
				else
					startingAt = startingAt - 1;
			}
		}
	}
	// is this a thrown weapon?
	if ( this.name.search("(Thrown)") != -1 )
		this.isThrown = TRUE;
	else
		this.isThrown = FALSE;
	this.hands = FirstChar( wHands );
	this.range = wRange;
	this.miscTHMod = 0;
	this.miscDamMod = 0;
	// Call a series of functions to determine the modifications to hit, damage etc
	this.hasModifiedTH = WeaponTHIsModified;
	this.hasModifiedDam = WeaponDamageIsModified;
	this.modifyDamage = WeaponModDamage;
	this.modifyAttackBonus = WeaponModAttackBonus;
	this.modify2WDamage = WeaponMod2WDamage;
	this.modify2WAttackBonus = WeaponMod2WAttackBonus;
	this.modifyRangedDamage = WeaponModRangedDamage;
	this.modifyRangedAttackBonus = WeaponModRangedAttackBonus;
	this.disabled = "";
}
function WeaponAddMeleeVector( th1hp, th1ho, th2h, th2wpoh, th2wpol, th2woh, d1hp, d1ho, d2h, d2wpoh, d2wpol, d2woh )
{
	var nextIndex = this.meleeVectors.length;
	this.meleeVectors[nextIndex] = new Weapon2Vector( th1hp, th1ho, th2h, th2wpoh, th2wpol, th2woh, d1hp, d1ho, d2h, d2wpoh, d2wpol, d2woh );
}
function  WeaponAddRangedData( rangedobject )
{
	var nextIndex = this.rangedData.length;
	this.rangedData[nextIndex] = rangedobject;
}
function WeaponSetOutputFormat( outputType )
{
	this.outputFormat = outputType;
}
function WeaponIsMighty()
{
	if ( this.category == 'R' && this.maxMighty>0 )
		return TRUE;
	return FALSE;
}
function WeaponTHIsModified()
{
	if ( this.miscTHMod != 0 )
		return TRUE;
	if ( this.disabled != "" )
		return TRUE;
	if (ATKArr[this.abilityNum].miscTHMod != 0)
		return TRUE;
	return AbArr[this.abilityNum].hasTempMod();
}
function WeaponDamageIsModified()
{
	if ( this.miscDamMod != 0 )
		return TRUE;
	if ( this.disabled != "" )
		return TRUE;
	if (ATKArr[this.abilityNum].miscDamageMod != 0)
		return TRUE;
	if ( this.category == "M" && AbArr[STRindex].hasTempMod() )
		return TRUE;
	if ( this.isThrown == TRUE && AbArr[STRindex].hasTempMod() )
		return TRUE;
	// A mighty ranged weapon might have its damage changed by a STR change.
	// Basically if the unmodified STR bonus was below max mighty or
	// the newly modified STR is below max mighty
	if ( this.isMighty() )
	{
		if ( AbArr[STRindex].modifier < this.maxMighty )
			return TRUE;
		if ( AbArr[STRindex].curmodifier() < this.maxMighty )
			return TRUE;
	}
	else
		return FALSE;
}
// ********************************************
// Take an AttackBonus string in the form "X[/X]..."
// and apply a modifier to it.
// astr is a AttackBonus string        Ex. +4/-1
// amod is a modifier to apply   Ex. -2
// ********************************************
function modAttackBonusString( astr, amod )
{
	if(astr == "N/A")
		return astr;
	var attacks=astr.split("/");
	var retstr = "";
	var i;
	for (i=0; i < attacks.length; i++) {
		if ( i>0 )
			retstr = retstr+'/';
		var attNum = new Number(attacks[i]);
		var retnum = parseInt(amod, 10) + parseInt(attNum, 10);
		retstr = retstr+modPlusMinus( String(retnum) );
	}
	return retstr;
};
// ********************************************
// Take a damage string in the form "X[(+-)mod]"
// and apply a modifier to it.
// Note, there is a bit of strangeness here.
// Since DnD uses the "Round down" rule, and
// we're applying a partial modifier, AND
// we might have to divide that modifier by
// two in certain cases, its necessary to
// tweak that modifier by just a bit to get
// the rounding to come out right.
// astr is a damage string       Ex. 5d6+4
// amod is a modifier to apply   Ex. -2
// addBns is a flag.
//    'Y' means to apply the additional 1/2 amod for wielding in two hands.
//    'N' means DON'T apply the additional bonus
//    'T' means to only apply 1/2 amod (second weapon in the off hand)
// ********************************************
function modDamageString( astr, amod, addBns )
{
	var modRoundingAdjuster = 0;
	// Sigh.  I wish | was not a special character.
	if ( addBns == "Y" )
		modRoundingAdjuster = 0.002;
	if ( addBns == "T" )
		modRoundingAdjuster = 0.002;
	if ( addBns == "Y" )
		amod = amod + Math.round((amod-modRoundingAdjuster)/2);
	else if ( addBns == "T" )
		amod = Math.round((amod-modRoundingAdjuster)/2);
	var modLoc=astr.search("[\+-]");  // Look for either a + or a -
	// If there is no modification then exit
	if ( modLoc == -1 )
		return astr+modPlusMinus(amod);
	// OK, we found a +/- at modLoc, so grab the old modifier
	var oldMod = new Number( astr.substr(modLoc,astr.length-1) );
	// Modifiers cancel?
	if ( (parseInt(oldMod, 10) + parseInt(amod, 10)) == 0 )
		return astr.substr(0,modLoc);
	else
		return astr.substr(0,modLoc) + String(modPlusMinus(parseInt(oldMod, 10) + parseInt(amod, 10)));
};
// ********************************************
// Take an attack string in the form "X[;X]...
// and apply a modifier to it by splitting at the
// semicolon and passing each result down to
// modAttackBonusString to handle the possible multiple
// attacks within each "hand."
// astr is a AttackBonus string        Ex. +4/-1;+3
// amod is a modifier to apply   Ex. -2
// ********************************************
function ATKWeaponModAttackBonus()
{
	if ( this.disabled != "" )
		return this.disabled;
	var retval = "";
	var i;
	// Figure out if anything has changed?
	var aMod = this.miscTHMod + AbArr[this.abilityNum].curModifierDiff();
	for (i=0; i < this.AttackBonusBaseArr.length; i++)
	{
		if ( i>0 )
			retval = retval+';';
		if ( aMod == 0 )
			retval = retval+this.AttackBonusBaseArr[i];
		else
			retval = retval+modAttackBonusString( this.AttackBonusBaseArr[i], aMod );
	}
	return retval;
};
function WeaponModAttackBonus()
{
	if ( this.disabled != "" )
	   return this.disabled;
	var retval = "";
	var i;
	// Figure out if anything has changed?
	var aMod = this.miscTHMod + AbArr[this.abilityNum].curModifierDiff() + ATKArr[this.abilityNum].miscTHMod;
	for (i=0; i < this.AttackBonusBaseArr.length; i++)
	{
		if ( i>0 )
			retval = retval+';';
		if ( aMod == 0 )
			retval = retval+this.AttackBonusBaseArr[i];
		else
			retval = retval+modAttackBonusString( this.AttackBonusBaseArr[i], aMod );
	}
	return retval;
};

// ********************************************
// Take an attack string in the form "X[;X]...
// and apply a modifier to it by splitting at the
// semicolon and passing each result down to
// modAttackBonusString to handle the possible multiple
// attacks within each "hand."
// astr is a AttackBonus string        Ex. +4/-1;+3
// amod is a modifier to apply   Ex. -2
// ********************************************
// whichVec specifies which vectore we're interested in.
// whichOne specifies which of the elements we want 0:1H-P, 1:1H-O, 2:2H, 3:2W-P-OH, 4:2W-P-OL, 5:2W-OH
function WeaponMod2WAttackBonus( whichVec, whichOne )
{
	if ( this.disabled != "" )
		return this.disabled;
	else if ( (this.category == "R") )
		return "Invalid call to WeaponMod2WAttackBonus with ranged weapon";
	else if ( (whichVec>this.meleeVectors.length) )
		return "Invalid call to WeaponMod2WAttackBonus with invalid melee vector";
	else if ( (whichOne>5) )
		return "Invalid call to WeaponMod2WAttackBonus with invalid melee vector element";
	var retval = "";
	var i;
	// Figure out if anything has changed?
	var aMod = this.miscTHMod + AbArr[this.abilityNum].curModifierDiff() + ATKArr[this.abilityNum].miscTHMod;
	var AttackBonusArr = this.damageBaseArr;  // default value
	if ( whichOne == 0 )
		AttackBonusArr = this.meleeVectors[whichVec].AttackBonus1hp.split(";");
	else if ( whichOne == 1 )
		AttackBonusArr = this.meleeVectors[whichVec].AttackBonus1ho.split(";");
	else if ( whichOne == 2 )
		AttackBonusArr = this.meleeVectors[whichVec].AttackBonus2h.split(";");
	else if ( whichOne == 3 )
		AttackBonusArr = this.meleeVectors[whichVec].AttackBonus2wpoh.split(";");
	else if ( whichOne == 4 )
		AttackBonusArr = this.meleeVectors[whichVec].AttackBonus2wpol.split(";");
	else if ( whichOne == 5 )
		AttackBonusArr = this.meleeVectors[whichVec].AttackBonus2woh.split(";");
	for (i=0; i < AttackBonusArr.length; i++)
	{
		if ( i>0 )
			retval = retval+';';
		if ( aMod == 0 )
			retval = retval+AttackBonusArr[i];
		else
			retval = retval+modAttackBonusString( AttackBonusArr[i], aMod );
	}
   return retval;
};
// ********************************************
// Take an attack string in the form "X[;X]...
// and apply a modifier to it by splitting at the
// semicolon and passing each result down to
// modAttackBonusString to handle the possible multiple
// attacks within each "hand."
// astr is a AttackBonus string        Ex. +4/-1;+3
// amod is a modifier to apply   Ex. -2
// ********************************************
// whichAmmo specifies which ammo we're interested in.
// whichRange specifies which range increment to use (0-4)
function WeaponModRangedAttackBonus( whichAmmo, whichRange )
{
	if ( this.disabled != "" )
		return this.disabled;
	else if ( (this.category == "M") )
		return "Invalid call to WeaponModRangedAttackBonus with melee weapon";
	else if ( (whichAmmo>this.rangedData.length) )
		return "Invalid call to WeaponModRangedAttackBonus with invalid ammo type";
	else if ( (whichRange>4) )
		return "Invalid call to WeaponModRangedAttackBonus with invalid range increment";
	var retval = "";
	var i;
	// Figure out if anything has changed?
	var aMod = this.miscTHMod + AbArr[this.abilityNum].curModifierDiff() + ATKArr[this.abilityNum].miscTHMod;
	var AttackBonusArr = this.rangedData[whichAmmo].ammoAttackBonus[whichRange].split(";");
	for (i=0; i < AttackBonusArr.length; i++)
	{
		if ( i>0 )
			retval = retval+';';
		if ( aMod == 0 )
			retval = retval+AttackBonusArr[i];
		else
			retval = retval+modAttackBonusString( AttackBonusArr[i], aMod );
	}
	return retval;
};
// ********************************************
// Take a damage string in the form "X[/X]...
// and apply a modifier to it by splitting at the
// slash and passing each result down to
// modDamageString to handle the possible multiple
// attacks within each "hand."
// If a melee weapon (weapType=="M") is used in
// both hands (weapHands="B"), then apply a bonus
// 1/2 of amod to the damage of the first attack
// astr is a damage string       Ex. 5d6+4/3d10-4
// amod is a modifier to apply   Ex. -2
// weapHands is the first character of the string that tells how the weapon is
//   wielded, so 'T'wo-handed, 'B'oth, 'N'either, 'P'rimary, 'O'ff hand
// ********************************************
function WeaponModDamage()
{
	if ( this.disabled != "" )
		return this.disabled;
	// We have to abort on "N/A" values or they become "N+1/A+1" and look real funky.
	if((this.damageBaseArr[0] == 'N') && (this.damageBaseArr[1] == 'A'))
		return "N/A" ;
	var retval = "";
	var i;
	var aMod = 0;
	// Figure out if anything has changed?
	if ( this.isMighty() )
	{
		// I can only allow the difference between the (unmodified) str mod and the max mighty
		// if that difference is positive.
		// Case 1:
		//   orig <= maxMighty  && new <= maxMighty
		//   mod = AbArr[STRindex].curModifierDiff
		// Case 2:
		//   orig <= maxMighty  && new > maxMighty
		//   mod = maxMighty - orig
		// Case 3:
		//   orig > maxMighty  && new <= maxMighty
		//   mod = new - maxMighty
		// Case 4:
		//   orig > maxMighty  && new > maxMighty
		//   mod = 0
		aMod = 0;
		// Case 1:
		if ( AbArr[STRindex].modifier <= this.maxMighty && AbArr[STRindex].curmodifier() <= this.maxMighty )
			aMod = AbArr[STRindex].curModifierDiff();
		// Case 2:
		else if ( AbArr[STRindex].modifier <= this.maxMighty && AbArr[STRindex].curmodifier() > this.maxMighty )
			aMod = this.maxMighty - AbArr[STRindex].modifier;
		// Case 3:
		else if ( AbArr[STRindex].modifier > this.maxMighty && AbArr[STRindex].curmodifier() <= this.maxMighty )
			aMod = AbArr[STRindex].curmodifier() - this.maxMighty;
		// Case 4:
		else // if ( AbArr[STRindex].modifier > this.maxMighty && AbArr[STRindex].curmodifier() > this.maxMighty )
			aMod = 0;
		aMod = aMod + this.miscDamMod + ATKArr[0].miscDamageMod;
	}
	else if ( this.category == "R" )  // Generally, non-mighty ranged weapons are unaffected by STR mod
		if ( this.isThrown == FALSE)
			aMod = this.miscDamMod + ATKArr[1].miscDamageMod;
		else	//except thrown weapons
			aMod = AbArr[STRindex].curmodifier() + this.miscDamMod + ATKArr[1].miscDamageMod;
	else {
		aMod = this.miscDamMod + AbArr[STRindex].curModifierDiff() + ATKArr[0].miscDamageMod;
	}
	// Decide if a partial modifier is going to have to be applied
	// Specifically, wielding a melee weapon in both hands or
	// as an off-hand weapon.
	var addBns = "N";
	if ( this.category=="M" && this.hands=="B" )
		addBns = "Y";
	else if ( this.category=="M" && this.hands=="O" )
		addBns = "T";
	// OK, now stitch together the damage string, taking any modifiers into account
	for (i=0; i < this.damageBaseArr.length; i++)
	{
		if ( i>0 )
			retval = retval+'/';
		if ( aMod == 0 )
			retval = retval + this.damageBaseArr[i];
		else {
			retval = retval+modDamageString(this.damageBaseArr[i], aMod, addBns );
		}
		if ( this.category=="M" && this.hands=="T" )
			addBns = "T";
		else
			addBns = "N";
	}
   return retval;
};
// ********************************************
// Take a damage string in the form "X[/X]...
// and apply a modifier to it by splitting at the
// slash and passing each result down to
// modDamageString to handle the possible multiple
// attacks within each "hand."
// If a melee weapon (weapType=="M") is used in
// both hands (weapHands="B"), then apply a bonus
// 1/2 of amod to the damage of the first attack
// astr is a damage string       Ex. 5d6+4/3d10-4
// amod is a modifier to apply   Ex. -2
// weapHands is the first character of the string that tells how the weapon is
//   wielded, so 'T'wo-handed, 'B'oth, 'N'either, 'P'rimary, 'O'ff hand
// ********************************************
// whichVec specifies which vectore we're interested in.
// whichOne specifies which of the elements we want 0:1H-P, 1:1H-O, 2:2H, 3:2W-P-OH, 4:2W-P-OL, 5:2W-OH
function WeaponMod2WDamage( whichVec, whichOne )
{
	if ( this.disabled != "" )
		return this.disabled;
	else if ( (this.category == "R") )
		return "Invalid call to WeaponMod2WDamage with ranged weapon";
	else if ( (whichVec>this.meleeVectors.length) )
		return "Invalid call to WeaponMod2WDamage with invalid melee vector";
	else if ( (whichOne>5) )
		return "Invalid call to WeaponMod2WDamage with invalid melee vector element";
	var retval = "";
	var i;
	var aMod = 0;
	aMod = this.miscDamMod + ATKArr[0].miscDamageMod + AbArr[STRindex].curModifierDiff();
	// Decide if a partial modifier is going to have to be applied
	// Specifically, wielding a melee weapon in both hands or
	// as an off-hand weapon.
	var addBns = "N";
	if ( whichOne == 2 )  // two handed
		addBns = "Y";
	else if ( whichOne == 5 )  // 2W offhand
		addBns = "T";
	var dmgArr = this.damageBaseArr;  // default value
	if ( whichOne == 0 )
		dmgArr = this.meleeVectors[whichVec].dam1hp.split("/");
	else if ( whichOne == 1 )
		dmgArr = this.meleeVectors[whichVec].dam1ho.split("/");
	else if ( whichOne == 2 )
		dmgArr = this.meleeVectors[whichVec].dam2h.split("/");
	else if ( whichOne == 3 )
		dmgArr = this.meleeVectors[whichVec].dam2wpoh.split("/");
	else if ( whichOne == 4 )
		dmgArr = this.meleeVectors[whichVec].dam2wpol.split("/");
	else if ( whichOne == 5 )
		dmgArr = this.meleeVectors[whichVec].dam2woh.split("/");
	// We have to abort on "N/A" values or they become "N+1/A+1" and look real funky.
	if((dmgArr[0] == 'N') && (dmgArr[1] == 'A'))
		return "N/A" ;
	// OK, now stitch together the damage string, taking any modifiers into account
	for (i=0; i < dmgArr.length; i++)
	{
		if ( i>0 )
			retval = retval+'/';
		if ( aMod == 0 )
			retval = retval + dmgArr[i];
		else
			retval = retval+modDamageString(dmgArr[i], aMod, addBns );
	}
   return retval;
};
// ********************************************
// Take a damage string in the form "X[/X]...
// and apply a modifier to it by splitting at the
// slash and passing each result down to
// modDamageString to handle the possible multiple
// attacks within each "hand."
// If a melee weapon (weapType=="M") is used in
// both hands (weapHands="B"), then apply a bonus
// 1/2 of amod to the damage of the first attack
// astr is a damage string       Ex. 5d6+4/3d10-4
// amod is a modifier to apply   Ex. -2
// weapHands is the first character of the string that tells how the weapon is
//   wielded, so 'T'wo-handed, 'B'oth, 'N'either, 'P'rimary, 'O'ff hand
// ********************************************
// whichAmmo specifies which ammo we're interested in.
// whichRange specifies which range increment to use (0-4)
function WeaponModRangedDamage( whichAmmo, whichRange )
{
	if ( this.disabled != "" )
		return this.disabled;
	else if ( (this.category == "M") )
		return "Invalid call to WeaponModRangedDamage with melee weapon";
	else if ( (whichAmmo>this.rangedData.length) )
		return "Invalid call to WeaponModRangedDamage with invalid ammo type";
	else if ( (whichRange>4) )
		return "Invalid call to WeaponModRangedDamage with invalid range increment";
	var retval = "";
	var i;
	var aMod = 0;
	// Figure out if anything has changed?
	if ( this.isMighty() )
	{
		// I can only allow the difference between the (unmodified) str mod and the max mighty
		// if that difference is positive.
		// Case 1:
		//   orig <= maxMighty  && new <= maxMighty
		//   mod = AbArr[STRindex].curModifierDiff
		// Case 2:
		//   orig <= maxMighty  && new > maxMighty
		//   mod = maxMighty - orig
		// Case 3:
		//   orig > maxMighty  && new <= maxMighty
		//   mod = new - maxMighty
		// Case 4:
		//   orig > maxMighty  && new > maxMighty
		//   mod = 0
		aMod = 0;
		// Case 1:
		if ( AbArr[STRindex].modifier <= this.maxMighty && AbArr[STRindex].curmodifier() <= this.maxMighty )
			aMod = AbArr[STRindex].curModifierDiff();
		// Case 2:
		else if ( AbArr[STRindex].modifier <= this.maxMighty && AbArr[STRindex].curmodifier() > this.maxMighty )
			aMod = this.maxMighty - AbArr[STRindex].modifier;
		// Case 3:
		else if ( AbArr[STRindex].modifier > this.maxMighty && AbArr[STRindex].curmodifier() <= this.maxMighty )
			aMod = AbArr[STRindex].curmodifier() - this.maxMighty;
		// Case 4:
		else // if ( AbArr[STRindex].modifier > this.maxMighty && AbArr[STRindex].curmodifier() > this.maxMighty )
			aMod = 0;
		aMod = aMod + this.miscDamMod + ATKArr[1].miscDamageMod;
	}
	else  // Generally, non-mighty ranged weapons are unaffected by STR mod
		aMod = this.miscDamMod + ATKArr[1].miscDamageMod;
	// OK, go get the data we need
	var dmgArr = this.rangedData[whichAmmo].ammoDamage[whichRange].split("/");
	// We have to abort on "N/A" values or they become "N+1/A+1" and look real funky.
	if((dmgArr[0] == 'N') && (dmgArr[1] == 'A'))
		return "N/A" ;
	// OK, now stitch together the damage string, taking any modifiers into account
	for (i=0; i < dmgArr.length; i++)
	{
		if ( i>0 )
			retval = retval+'/';
		if ( aMod == 0 )
			retval = retval + dmgArr[i];
		else
			retval = retval+modDamageString(dmgArr[i], aMod, "N" );
	}
   return retval;
};

// ********************************************
// This is the function that calculates and applies all the various modifiers for Barbarians
// in each of the Normal, Raged and Fatigued states.
// It is called via a CharState object
// newRageState should be 0 (Normal), 1 (Raging) or 2 (Fatigued)
// ********************************************
function BarbMods( newRageState )
{
	// Choose a safe, default value
	var nRageStatus = "";
	// Edit the values
	if ( newRageState == 0 )
		nRageStatus = "";
	else if ( newRageState == 1 )
		nRageStatus = "Raging";
	else if ( newRageState == 2 )
		nRageStatus = "Fatigued";
	else if ( newRageState == 3 )
		nRageStatus = "Greater Raging";
	else if ( newRageState == 4 )
		nRageStatus = "Mighty Raging";
	var temp = null;
	if ( BarbLvl == null )
		return;
	if ( BarbLvl < 1 )
		return;
	if ( this.internalState == nRageStatus )
		return;
	// Assume normal case...
	var strMod = 0;
	var conMod = 0;
	var dexMod = 0;
	var strModMod = 0;
	var conModMod = 0;
	var dexModMod = 0;
	var acMod = 0;
	var willMod = 0;
	// StatusBgColor = "white"
	// Figure out what we have to do to "back out" old rage state
	if ( this.internalState == "Raging" )  // Raging
	{
|IIF(GAMEMODE:Pathfinder)|
		strMod = -|VAR.RageStrBonus.INTVAL|;
		conMod = -|VAR.RageConBonus.INTVAL|;
		strModMod = -(|VAR.RageStrBonus.INTVAL|/2);
		conModMod = -(|VAR.RageConBonus.INTVAL|/2);
		acMod = |VAR.RageACPenalty.INTVAL|;
		willMod = -|VAR.RageSaveBonus.INTVAL|;
|ELSE|
		strMod = -|VAR.RageStrBonus|;
		conMod = -|VAR.RageConBonus|;
		strModMod = -(|VAR.RageStrBonus|/2);
		conModMod = -(|VAR.RageConBonus|/2);
		acMod = |VAR.RageACPenalty|;
		willMod = -|VAR.RageMorale|;
|ENDIF|
	} 
	else if ( this.internalState == "Fatigued" && BarbLvl<20 )  // Fatigued
	{
		strMod = +2;
		conMod = 0;
		dexMod = +2;
		strModMod = +1;
		conModMod = 0;
		dexModMod = +1;
		acMod = 0;
	}
	else if ( this.internalState == "Greater Raging")  // Greater
	{
|IIF(GAMEMODE:Pathfinder)|
		strMod = -|VAR.RageStrBonus.INTVAL|;
		conMod = -|VAR.RageConBonus.INTVAL|;
		strModMod = -(|VAR.RageStrBonus.INTVAL|/2);
		conModMod = -(|VAR.RageConBonus.INTVAL|/2);
		acMod = |VAR.RageACPenalty.INTVAL|;
		willMod = -|VAR.RageSaveBonus.INTVAL|;
|ELSE|
		strMod = -(|VAR.RageStrBonus| + 2);
		conMod = -(|VAR.RageConBonus| + 2);
		strModMod = -((|VAR.RageStrBonus|+2)/2);
		conModMod = -((|VAR.RageConBonus|+2)/2);
		acMod = |VAR.RageACPenalty|;
		willMod = -(|VAR.RageMorale|+1);
|ENDIF|
	}
	else if ( this.internalState == "Mighty Raging")  // Mighty
	{
|IIF(GAMEMODE:Pathfinder)|
		strMod = -|VAR.RageStrBonus.INTVAL|;
		conMod = -|VAR.RageConBonus.INTVAL|;
		strModMod = -(|VAR.RageStrBonus.INTVAL|/2);
		conModMod = -(|VAR.RageConBonus.INTVAL|/2);
		acMod = |VAR.RageACPenalty.INTVAL|;
		willMod = -|VAR.RageSaveBonus.INTVAL|;
|ELSE|
		strMod = -(|VAR.RageStrBonus| + 4);
		conMod = -(|VAR.RageConBonus| + 4);
		strModMod = -((|VAR.RageStrBonus|+4)/2);
		conModMod = -((|VAR.RageConBonus|+4)/2);
		acMod = |VAR.RageACPenalty|;
		willMod = -(|VAR.RageMorale|+2);
|ENDIF|
	}
  	// OK, figure out various stat changes based on current Barbarian state
	if ( nRageStatus == "Raging" )  // Raging
	{
		this.isActive = TRUE;
		RageStatus = nRageStatus;
		this.internalState = nRageStatus;
// 		StatusBgColor = "LIGHTPINK";
|IIF(GAMEMODE:Pathfinder)|
		strMod = strMod+|VAR.RageStrBonus.INTVAL|;
		conMod = conMod+|VAR.RageConBonus.INTVAL|;
		strModMod = strModMod+(|VAR.RageStrBonus.INTVAL|/2);
		conModMod = conModMod+(|VAR.RageConBonus.INTVAL|/2);
		acMod = acMod-(|VAR.RageACPenalty.INTVAL|);
		willMod = willMod+|VAR.RageSaveBonus.INTVAL|;
|ELSE|
		strMod = strMod+|VAR.RageStrBonus|;
		conMod = conMod+|VAR.RageConBonus|;
		strModMod = strModMod+(|VAR.RageStrBonus|/2);
		conModMod = conModMod+(|VAR.RageConBonus|/2);
		acMod = acMod-(|VAR.RageACPenalty|);
		willMod = willMod+|VAR.RageMorale|;
|ENDIF|
	}
	else if ( nRageStatus == "Fatigued" && BarbLvl<20 )  // Fatigued
	{
		this.isActive = TRUE;
		RageStatus = nRageStatus;
		this.internalState = nRageStatus;
		strMod = strMod-2;
		conMod = conMod+0;
		dexMod = dexMod-2;
		strModMod = strModMod-1;
		conModMod = conModMod+0;
		dexModMod = dexModMod-1;
		acMod = acMod+0;
//		StatusBgColor = "LIGHTBLUE";
	}
	else if ( nRageStatus == "Greater Raging" )  // Raging
	{
		this.isActive = TRUE;
		RageStatus = nRageStatus;
		this.internalState = nRageStatus;
//		StatusBgColor = "LIGHTPINK";
|IIF(GAMEMODE:Pathfinder)|
		strMod = strMod+|VAR.RageStrBonus.INTVAL|;
		conMod = conMod+|VAR.RageConBonus.INTVAL|;
		strModMod = strModMod(|VAR.RageStrBonus.INTVAL|/2);
		conModMod = conModMod(|VAR.RageConBonus.INTVAL|/2);
		acMod = acMod-(|VAR.RageACPenalty.INTVAL|);
		willMod = willMod+|VAR.RageSaveBonus.INTVAL|;
|ELSE|
		strMod = strMod+|VAR.RageStrBonus|+2;
		conMod = conMod+|VAR.RageConBonus|+2;
		strModMod = strModMod+((|VAR.RageStrBonus|+2)/2);
		conModMod = conModMod+((|VAR.RageConBonus|+2)/2);
		acMod = acMod-(|VAR.RageACPenalty|);
		willMod = willMod+|VAR.RageMorale|+1;
|ENDIF|
	}
	else if ( nRageStatus == "Mighty Raging" )  // Raging
	{
		this.isActive = TRUE;
		RageStatus = nRageStatus;
		this.internalState = nRageStatus;
//		StatusBgColor = "LIGHTPINK";
|IIF(GAMEMODE:Pathfinder)|
		strMod = strMod+|VAR.RageStrBonus.INTVAL|;
		conMod = conMod+|VAR.RageConBonus.INTVAL|;
		strModMod = strModMod(|VAR.RageStrBonus.INTVAL|/2);
		conModMod = conModMod(|VAR.RageConBonus.INTVAL|/2);
		acMod = acMod-(|VAR.RageACPenalty.INTVAL|);
		willMod = willMod+|VAR.RageSaveBonus.INTVAL|;
|ELSE|
		strMod = strMod+|VAR.RageStrBonus|+4;
		conMod = conMod+|VAR.RageConBonus|+4;
		strModMod = strModMod+((|VAR.RageStrBonus|+4)/2);
		conModMod = conModMod+((|VAR.RageConBonus|+4)/2);
		acMod = acMod-(|VAR.RageACPenalty|);
		willMod = willMod+|VAR.RageMorale|+2;
|ENDIF|
	}
	else
	{
		this.isActive = FALSE;
		RageStatus = nRageStatus;
		this.internalState = nRageStatus;
	}
	// STR
	AbArr[STRindex].tempvalue = AbArr[STRindex].tempvalue + strMod;
	AbArr[STRindex].tempmodifier = AbArr[STRindex].tempmodifier + strModMod;
	// DEX
	AbArr[DEXindex].tempvalue = AbArr[DEXindex].tempvalue + dexMod;
	AbArr[DEXindex].tempmodifier = AbArr[DEXindex].tempmodifier + dexModMod;
	// CON
	AbArr[CONindex].tempvalue = AbArr[CONindex].tempvalue + conMod;
	AbArr[CONindex].tempmodifier = AbArr[CONindex].tempmodifier + conModMod;
	CheckArr[WILLindex].tempmodifier = CheckArr[WILLindex].tempmodifier+willMod;
	AC.rageMod = AC.rageMod+acMod;
	ABPrint();
	ACPrint();
	ComprehensiveSkillPrint();
	CompactSkillPrint();
	HeaderSkillPrint();
	SavesPrint();
	InitPrint();
	HPPrint();
	CurHPPrint();
	RagePrint();
	ATKPrint();
	WeaponPrint();
	NamePrint();
	return;
};
// **********************************************
// These functions are only needed for Barbarians
// **********************************************
function OneTimeBbnLevelParse()
{
	RageStatus = "";
	BarbLvl = 0;
|IIF(HASVAR:BarbRageTimesLVL)|
	BarbLvl= |VAR.BarbRageTimesLVL.INTVAL|;
|ENDIF|
|IIF(HASVAR:RageLVL)|
	BarbLvl= |VAR.RageLVL.INTVAL|;
|ENDIF|
};
// ********************************************
// ********************************************
function BbnButtons()
{
	if ( BarbLvl > 0 ) {
		document.write( '<tr id="config2"  class="c6"><td class="c6">' );
		document.write( '<center><table border="0"><tr>' );
		document.write( '<td class="c6"><input id=button5 type=button value="Not Raging" name=button5 onclick="SetRage(0);">');
		document.write( '<td class="c6"><input id=button6 type=button value="Raging" name=button6 onclick="SetRage(1);">' );
|IIF(GAMEMODE:Pathfinder)|
|IIF(HASVAR:GreaterRage.OR.HASFEAT:Greater Rage.OR.HASSA:Greater Rage)|
		document.write( '<input id="button8" type=button value="Greater Raging" name=button8 onclick="SetRage(3);">' );
|ENDIF|
|IIF(HASVAR:MightyRage.OR.HASFEAT:Mighty Rage.OR.HASSA:Mighty Rage)|
		document.write( '<input id="button9" type=button value="Mighty Raging" name=button9 onclick="SetRage(4);">' );
|ENDIF|
|ENDIF|
		document.write( '</td' );
		if ( BarbLvl < 20 )
			document.write( '<td><input id="button7" class="activeBtn" type=button value="Fatigued" name=button7 onclick="SetRage(2);"></td>' );
		document.write( "</tr></table><\/td><\/tr>" );
	}
};
// ********************************************
// ********************************************
function SetRage( rglvl )
{
	for ( i=0; i<StateArr.length; ++i )
		if ( StateArr[i].name == "Rage" )
			StateArr[i].activate( rglvl );
	if(rglvl == 0) { 
		document.getElementById('button5').className = '';
		document.getElementById('button6').className = '';
		if (document.getElementById('button7') != null) 
			document.getElementById('button7').className = '';
		if (document.getElementById('button8') != null) 
			document.getElementById('button8').className = '';
		if (document.getElementById('button9') != null) 
			document.getElementById('button9').className = '';
	} 
	if(rglvl == 1) { 
		document.getElementById('button5').className = '';
		document.getElementById('button6').className = 'activeButton';
		if (document.getElementById('button7') != null) 
			document.getElementById('button7').className = '';
		if (document.getElementById('button8') != null) 
			document.getElementById('button8').className = '';
		if (document.getElementById('button9') != null) 
			document.getElementById('button9').className = '';
	} 
	if(rglvl == 2) { 
		document.getElementById('button5').className = '';
		document.getElementById('button6').className = '';
		if (document.getElementById('button7') != null) 
			document.getElementById('button7').className = 'activeButton';
		if (document.getElementById('button8') != null) 
			document.getElementById('button8').className = '';
		if (document.getElementById('button9') != null) 
			document.getElementById('button9').className = '';
	} 
	if(rglvl == 3) { 
		document.getElementById('button5').className = '';
		document.getElementById('button6').className = '';
		if (document.getElementById('button7') != null) 
			document.getElementById('button7').className = '';
		if (document.getElementById('button8') != null) 
			document.getElementById('button8').className = 'activeButton';
		if (document.getElementById('button9') != null) 
			document.getElementById('button9').className = '';
	} 
	if(rglvl == 4) { 
		document.getElementById('button5').className = '';
		document.getElementById('button6').className = '';
		if (document.getElementById('button7') != null) 
			document.getElementById('button7').className = '';
		if (document.getElementById('button8') != null) 
			document.getElementById('button8').className = '';
		if (document.getElementById('button9') != null) 
			document.getElementById('button9').className = 'activeButton';
	} 
};
// End of Barb filter

function printFileNameJPG(full)
{
	if(full == TRUE) {
		document.write( '<td id="BioImage" class="l6s" height="400px" width="1%">');
		document.write( '<a id="#Bio" onclick="ToggleDIV(\'FullWideHeader\');ToggleDIV(\'NarrowLeftHeader\');">');
		document.write( '<img src="' + fileName +'_Full.jpg" height="400px" ');
		document.write( 'onerror="document.getElementById(\'BioImage\').style.display = \'none\';">');
		document.write( '</a></td>');
	} else {
		document.write( '<td id="CharImage" rowspan="6" width="1%" class="c10">');
		document.write( '<a id="#Bio" onclick="ToggleDIV(\'FullWideHeader\');ToggleDIV(\'NarrowLeftHeader\');">');
		document.write( '<img src="' + fileName + '.jpg" height="100px" border="0" onerror="document.getElementById(\'CharImage\').style.display = \'none\'" />');
		document.write( '</a></td>\n');
		}
}
function CheckForMonk()
{
	MonkLvl = 0;
	var lvlStr = "|CLASSLIST|";
	var clses = lvlStr.split(" ");
	for (i=0; i < clses.length; i++) {
		if ( clses[i].substr(0,4) == "Monk" ) {
			MonkLvl = clses[i].substr(4,clses[i].length-4);
		}
	}
};
// ********************************************
// This is the function that calculates and applies all the various modifiers for
// fighting defensively in each of the Normal, defensive and total defense states.
// It is called via a CharState object
// newDefState should be 0 (Normal), 1 (Fighting Defensively) or 2 (Total Defense)
// ********************************************
function DefensiveCombatMods( newDefState )
{
	// Choose a safe, default value
	var nDefStatus = "";
	// Edit the values
	if ( newDefState == 0 )
		nDefStatus = "";
	else if ( newDefState == 1 )
		nDefStatus = "Defensive";
	else if ( newDefState == 2 )
		nDefStatus = "Total Def";
	var temp = null;
	if ( this.internalState == nDefStatus )
		return;
	var i = 0;
	var acMod = 0;
	var acrobaticsRanks = 0;
	for ( i=0; i<SkillArr.length; ++i )
	{
		if ( SkillArr[i].name == "Acrobatics" )
		{
			acrobaticsRanks = SkillArr[i].rank;
			break;
		}
	}
//  	StatusBgColor = "white"
	// Figure out what we have to do to "back out" old defense state
	if ( this.internalState == "Defensive" )
	{
		for ( i=0; i<WeapArr.length; ++i )
		{
			WeapArr[i].miscTHMod = WeapArr[i].miscTHMod + 4;
		}
		if ( acrobaticsRanks >= 3 )
			acMod = -3;
		else
			acMod = -2;
	}
	else if ( this.internalState == "Total Def" )
	{
		for ( i=0; i<WeapArr.length; ++i )
		{
			WeapArr[i].disabled = "";
		}
		for ( i=0; i<ATKArr.length; ++i )
		{
			ATKArr[i].disabled = "";
		}
		if ( acrobaticsRanks >= 3 )
			acMod = -6;
		else
			acMod = -4;
	}
	// OK, figure out various stat changes based on current defensive state
	if ( nDefStatus == "Defensive" )
	{
		this.isActive = TRUE;
 		this.internalState = nDefStatus;
//		StatusBgColor = "LIGHTPINK";
		for ( i=0; i<WeapArr.length; ++i )
		{
			WeapArr[i].miscTHMod = WeapArr[i].miscTHMod - 4;
		}
		if ( acrobaticsRanks >= 3 )
			acMod = acMod+3;
		else
			acMod = acMod+2;
	}
	else if ( nDefStatus == "Total Def" )  // Total
	{
		this.isActive = TRUE;
		this.internalState = nDefStatus;
		for ( i=0; i<WeapArr.length; ++i )
			WeapArr[i].disabled = "Total Defense";
		for ( i=0; i<ATKArr.length; ++i )
			ATKArr[i].disabled = "Total Defense";
		if ( acrobaticsRanks >= 3 )
			acMod = acMod+6;
		else
			acMod = acMod+4;
//		StatusBgColor = "LIGHTBLUE";
	}
	else
	{
		this.isActive = FALSE;
		this.internalState = nDefStatus;
	}
	AC.defFightMod = AC.defFightMod+acMod;
	ABPrint();
	ACPrint();
	ComprehensiveSkillPrint();
	CompactSkillPrint();
	HeaderSkillPrint();
	SavesPrint();
	InitPrint();
	HPPrint();
	CurHPPrint();
	RagePrint();
	ATKPrint();
	WeaponPrint();
	NamePrint();
	return;
};

// ********************************************
// This is the function that calculates and applies all the various modifiers for
// spells affecting AC.  Four different AC values can be modified through this fuction.
// It is called via a CharState object
// ********************************************
function SpellCombatMods( ignored )
{
	if(this.name == "SpellArmor1") {
		this.armor = Math.max(this.armorBase, this.spellACMod);
		this.armorModified = ACObjArmorModified;
	}
	if(this.name == "SpellArmor2") {
		this.deflection = Math.max(this.deflectionBase, this.spellDeflMod);
		this.deflectionModified = ACObjDeflectionModified;
	}
	if(this.name == "SpellArmor3") {
		this.natural = Math.max(this.naturalBase, this.spellNatMod);
		this.naturalModified = ACObjNaturalArmorModified;
	}
	if(this.name == "SpellArmor4") {
		this.shield = Math.max(this.shieldBase, this.spellShieldMod);
		this.shieldModified = ACObjShieldModified;
	}
	if(this.name == "SpellArmor5") {
		this.dodge = Math.max(this.dodgeBase, this.spellDodgeMod);
		this.dodgeModified = ACObjDodgeModified;
	}
	ABPrint();
	ACPrint();
	ComprehensiveSkillPrint();
	CompactSkillPrint();
	HeaderSkillPrint();
	SavesPrint();
	InitPrint();
	HPPrint();
	CurHPPrint();
	RagePrint();
	ATKPrint();
	WeaponPrint();
	NamePrint();
	return;
};
// ********************************************
// ********************************************
function DefFightingButtons()
{
	document.write( '<tr id="config3" class="c6">' );
	document.write( '<td class="c6"><input id=defFightButton1 type=button value="Normal Combat" name=defFightButton1 onclick="SetdefFighting(0);">&nbsp;<input id=defFightButton2 type=button value="Fighting Defensively" name=defFightButton2 onclick="SetdefFighting(1);">&nbsp;<input id=defFightButton3 type=button value="Total Defense" name=defFightButton3 onclick="SetdefFighting(2);">' );
	document.write( '<\/td><\/tr>' );
};
function SpellArmorButtons()
{
	document.write( '<tr id="config4" class="c6"><td class="c6"><center>');
	document.write( '<table border="0" cellpadding="0"><tr valign="top"><td>');
	document.write( '<input id=configSpells type=button value="cfg" name=configSpells onclick="ToggleDIV(\'cfgA\');ToggleDIV(\'cfgB\');ToggleDIV(\'cfgC\');ToggleDIV(\'cfgD\');ToggleDIV(\'cfgE\');"></td><td class="l8">');
//	document.write( '<input id=SpellArmorButton1 type=button value="No Spells" name=SpellArmorButton1 onclick="SetArmorSpell(0);">&nbsp;');
	document.write( '<div style="display:inline;"><input id="SpellArmorButton2" type=button style="width:100px;" value="Spell Armor" name="SpellArmorButton2" onclick="SetArmorSpell(1);">&nbsp;');
	document.write( '<div id="cfgA" style="display:none;"><select id="spell_AC_bonus" autocomplete="off" onchange="setSpellACBonus();">');
	document.write( '<option value="0" selected>0</option><option value="1">1</option><option value="2">2</option>');
	document.write( '<option value="3">3</option><option value="4">4</option><option value="5">5</option>');
	document.write( '<option value="6">6</option><option value="7">7</option><option value="8">8</option>');
	document.write( '<option value="9">9</option><option value="10">10</option></select> <span class="l8">Temp bonus AC due to spells</span><br /></div></div>');
	document.write( '<div style="display:inline;"><input id="SpellArmorButton3" type=button style="width:100px;" value="Deflection" name="SpellArmorButton3" onclick="SetArmorSpell(2);">&nbsp;');
	document.write( '<div id="cfgB" style="display:none;"><select id="spell_deflection_bonus" autocomplete="off" onchange="setSpellDeflBonus();">');
	document.write( '<option value="0" selected>0</option><option value="1">1</option><option value="2">2</option>');
	document.write( '<option value="3">3</option><option value="4">4</option><option value="5">5</option>');
	document.write( '<option value="6">6</option><option value="7">7</option><option value="8">8</option>');
	document.write( '<option value="9">9</option><option value="10">10</option></select> <span class="l8">Select as the total type bonus</span><br /></div></div>');
	document.write( '<div style="display:inline;"><input id="SpellArmorButton4" type=button style="width:100px;" value="Natural Armor" name="SpellArmorButton4" onclick="SetArmorSpell(3);">&nbsp;');
	document.write( '<div id="cfgC" style="display:none;"><select id="spell_natural_bonus" autocomplete="off" onchange="setSpellNatBonus();">');
	document.write( '<option value="0" selected>0</option><option value="1">1</option><option value="2">2</option>');
	document.write( '<option value="3">3</option><option value="4">4</option><option value="5">5</option>');
	document.write( '<option value="6">6</option><option value="7">7</option><option value="8">8</option>');
	document.write( '<option value="9">9</option><option value="10">10</option></select><br /></div></div>');
	document.write( '<div style="display:inline;"><input id="SpellArmorButton5" type=button style="width:100px;" value="Shield" name="SpellArmorButton5" onclick="SetArmorSpell(4);">&nbsp;');
	document.write( '<div id="cfgD" style="display:none;"><select id="spell_shield_bonus" autocomplete="off" onchange="setSpellShieldBonus();">');
	document.write( '<option value="0" selected>0</option><option value="1">1</option><option value="2">2</option>');
	document.write( '<option value="3">3</option><option value="4">4</option><option value="5">5</option>');
	document.write( '<option value="6">6</option><option value="7">7</option><option value="8">8</option>');
	document.write( '<option value="9">9</option><option value="10">10</option></select><br /></div></div>');
	document.write( '<div style="display:inline;"><input id="SpellArmorButton6" type=button style="width:100px;" value="Dodge" name="SpellArmorButton6" onclick="SetArmorSpell(5);">&nbsp;');
	document.write( '<div id="cfgE" style="display:none;"><select id="spell_dodge_bonus" autocomplete="off" onchange="setSpellDodgeBonus();">');
	document.write( '<option value="0" selected>0</option><option value="1">1</option><option value="2">2</option>');
	document.write( '<option value="3">3</option><option value="4">4</option><option value="5">5</option>');
	document.write( '<option value="6">6</option><option value="7">7</option><option value="8">8</option>');
	document.write( '<option value="9">9</option><option value="10">10</option></select></div></div>');
	document.write( '<\/td><\/tr></table>' );
	document.write( '<\/td><\/tr>' );
};

// ********************************************
// ********************************************
function SetdefFighting( defFightLvl )
{
	for ( i=0; i<StateArr.length; ++i )
		if ( StateArr[i].name == "DefFighting" )
			StateArr[i].activate( defFightLvl );
	if(defFightLvl  == 0) { 
		document.getElementById('defFightButton1').className = '';
		document.getElementById('defFightButton2').className = '';
		document.getElementById('defFightButton3').className = '';
	} 
	if(defFightLvl  == 1) { 
		document.getElementById('defFightButton1').className = '';
		document.getElementById('defFightButton2').className = 'activeButton';
		document.getElementById('defFightButton3').className = '';
	} 
	if(defFightLvl  == 2) { 
		document.getElementById('defFightButton1').className = '';
		document.getElementById('defFightButton2').className = '';
		document.getElementById('defFightButton3').className = 'activeButton';
	} 
};
// Activate/Clear spell Armor Class bonuses and turn the button purple.
function SetArmorSpell( level )
{
	if(level == 0) { 
		document.getElementById('SpellArmorButton1').className = '';
		document.getElementById('SpellArmorButton2').className = '';
		document.getElementById('SpellArmorButton3').className = '';
		document.getElementById('SpellArmorButton4').className = '';
		document.getElementById('SpellArmorButton5').className = '';
		document.getElementById('SpellArmorButton6').className = '';
		AC.spellACMod = 0;
		AC.spellDeflMod = 0;
		AC.spellNatMod = 0;
		AC.spellDodgeMod = 0;
		AC.spellShieldMod = 0;
		for ( i=0; i<StateArr.length; ++i ) {
			if ( StateArr[i].name == "SpellArmor1" ) StateArr[i].activate( 0 );
			if ( StateArr[i].name == "SpellArmor2" ) StateArr[i].activate( 0 );
			if ( StateArr[i].name == "SpellArmor3" ) StateArr[i].activate( 0 );
			if ( StateArr[i].name == "SpellArmor4" ) StateArr[i].activate( 0 );
			if ( StateArr[i].name == "SpellArmor5" ) StateArr[i].activate( 0 );
			if ( StateArr[i].name == "SpellArmor6" ) StateArr[i].activate( 0 );
		}
	} else {
		// In this version, we can have multiple active, so we do not shut off except on 0.
		if(level == 1) { 
			if( document.getElementById('SpellArmorButton2').className == '') {
				document.getElementById('SpellArmorButton2').className = 'activeButton';
				AC.spellACMod = spell_AC_bonus;
				if(spell_AC_bonus == 0)
					document.getElementById('SpellArmorButton2').className = 'greyButton';
			} else {
				document.getElementById('SpellArmorButton2').className = '';
				AC.spellACMod = 0;
			}
		} 
		if(level == 2) { 
			if( document.getElementById('SpellArmorButton3').className == '') {
				document.getElementById('SpellArmorButton3').className = 'activeButton';
				AC.spellDeflMod = spell_Defl_bonus;
				if(spell_Defl_bonus == 0)
					document.getElementById('SpellArmorButton3').className = 'greyButton';
			} else {
				document.getElementById('SpellArmorButton3').className = '';
				AC.spellDeflMod = 0;
			}
		} 
		if(level == 3) { 
			if(document.getElementById('SpellArmorButton4').className == '') {
				document.getElementById('SpellArmorButton4').className = 'activeButton';
				AC.spellNatMod = spell_Nat_bonus;
				if(spell_Nat_bonus == 0)
					document.getElementById('SpellArmorButton4').className = 'greyButton';
			} else {
				document.getElementById('SpellArmorButton4').className = '';
				AC.spellNatMod = 0;
			}
		} 
		if(level == 4) { 
			if(document.getElementById('SpellArmorButton5').className == '') {
				document.getElementById('SpellArmorButton5').className = 'activeButton';
				AC.spellShieldMod = spell_Shield_bonus;
				if(spell_Shield_bonus == 0)
					document.getElementById('SpellArmorButton5').className = 'greyButton';
			} else {
				document.getElementById('SpellArmorButton5').className = '';
				AC.spellShieldMod = 0;
			}
		} 
		if(level == 5) { 
			if(document.getElementById('SpellArmorButton6').className == '') {
				document.getElementById('SpellArmorButton6').className = 'activeButton';
				AC.spellDodgeMod = spell_Dodge_bonus;
				if(spell_Dodge_bonus == 0)
					document.getElementById('SpellArmorButton6').className = 'greyButton';
			} else {
				document.getElementById('SpellArmorButton6').className = '';
				AC.spellDodgeMod = 0;
			}
		} 
		// Now that we have set the variables, go execute the changes.
		for ( i=0; i<StateArr.length; ++i )
			if ( StateArr[i].name == "SpellArmor" + level )
				StateArr[i].activate( 1 );
	}
};

function AddStat (attribute) {
	AbArr[attribute].tempmodifier = AbArr[attribute].tempmodifier - ModToStatMod[attribute]; //reset modifier value to normal state
	AbArr[attribute].tempvalue = AbArr[attribute].tempvalue +1; //Add 1 to temporary value of this ability
	ModToStat[attribute] = ModToStat[attribute]+1;
	if ((ModToStat[attribute] % 2) == 0){ //Check if total Change is Even
		ModToStatMod[attribute] = (ModToStat[attribute]/2) //Change is Even, simple calculation
	} else if (((AbArr[attribute].tempvalue) % 2) == 0){ //Change is Odd, Check if TempValue is Even
		ModToStatMod[attribute] = ((ModToStat[attribute]+1)/2) //Change Odd, Tempvalue Even, treat as if Change is one less
	} else {
		ModToStatMod[attribute] = ((ModToStat[attribute]-1)/2) //Change and Tempvalue are Odd, treat as if Change is one greater
	}
	AbArr[attribute].tempmodifier = AbArr[attribute].tempmodifier + ModToStatMod[attribute];
	ABPrint();
	ACPrint();
	ATKPrint();
	WeaponPrint();
	ComprehensiveSkillPrint();
  	CompactSkillPrint();
  	HeaderSkillPrint();
	SavesPrint();
	InitPrint();
	HPPrint();
	CurHPPrint();
	RagePrint();
	NamePrint();
|IIF(HASVAR:TurnLevelBase)|
	TurnTablePrintAll();
|ENDIF|
	return;
}

function RemoveStat (attribute) {
	AbArr[attribute].tempmodifier = AbArr[attribute].tempmodifier - ModToStatMod[attribute]; //reset modifier value to normal state
	AbArr[attribute].tempvalue = AbArr[attribute].tempvalue -1; //Remove 1 from temporary value of this ability
	ModToStat[attribute] = ModToStat[attribute]-1;
	if ((ModToStat[attribute] % 2) == 0){ //Check if total Change is Even
		ModToStatMod[attribute] = (ModToStat[attribute]/2) //Change is Even, simple calculation
	} else if (((AbArr[attribute].tempvalue) % 2) == 0){ //Change is Odd, Check if TempValue is Even
		ModToStatMod[attribute] = ((ModToStat[attribute]+1)/2) //Change Odd, Tempvalue Even, treat as if Change is one less
	} else {
		ModToStatMod[attribute] = ((ModToStat[attribute]-1)/2) //Change and Tempvalue are Odd, treat as if Change is one greater
	}
	AbArr[attribute].tempmodifier = AbArr[attribute].tempmodifier + ModToStatMod[attribute];
	ABPrint();
	ACPrint();
	ComprehensiveSkillPrint();
  	CompactSkillPrint();
  	HeaderSkillPrint();
	SavesPrint();
	InitPrint();
	HPPrint();
	CurHPPrint();
	RagePrint();
	ATKPrint();
	WeaponPrint();
	NamePrint();
|IIF(HASVAR:TurnLevelBase)|
	TurnTablePrintAll();
|ENDIF|
	return;
}
// -->
</script>
</head>
<body onload="Compact();">
<script language="javascript" type="text/javascript">OneTimeBbnLevelParse();</script>
<script language="javascript" type="text/javascript">CheckForMonk();</script>

<div id="FullWideHeader" style="display:none">
	<table id="FullHeader" cellpadding="0" cellspacing="4" border="0" width="100%">
	<tr>
		<td id="charName" colspan="4" class="lb12mB">|NAME|
|%FOLLOWEROF|
~&bull;~ |FOLLOWEROF|
|%|
		</td>
		<td colspan="2" class="lb8">|PLAYERNAME|</td>
		<td class="lb8">|ALIGNMENT|</td>
		<td class="lb8">|DEITY|</td>
		<td class="lb8">|POOL.COST| / |GAMEMODE|</td>
		<td class="lb8">|PERSONALITY1|
|%PERSONALITY1|
|%PERSONALITY2|
	and
|%|
|%|
		       |PERSONALITY2|</td>
	</tr>
	<tr>
		<td colspan="4" class="t6tg">CHARACTER NAME</td>
		<td colspan="2" class="t6tg">PLAYER</td>
		<td class="t6tg">ALIGNMENT</td>
		<td class="t6tg">DEITY</td>
		<td class="t6tg">CREATION POINTS / SETTING</td>
		<td class="t6tg">PERSONALITY TRAITS</td>
	</tr>
	<tr>
		<td colspan="3" class="lb8">|CLASSLIST|</td>
		<td class="lb8">|EXP.CURRENT|</td>
		<td class="lb8">|RACE|
|IIF(RACETYPE:Humanoid)|
|ELSE|
				(|RACETYPE||%RACESUBTYPE| |RACESUBTYPE||%|)
|ENDIF|
		</td>
		<td class="lb8">|SIZELONG| / |FACE|</td>
		<td class="lb8">|HEIGHT|</td>
		<td class="lb8">|WEIGHT|</td>
		<td class="lb8">|VISION|</td>
		<td class="lb8">|PHOBIAS|&nbsp;</td>
	</tr>
	<tr>
		<td colspan="3" class="t6tg">CLASS</td>
		<td class="t6tg">EXPERIENCE</td>
		<td class="t6tg">RACE</td>
		<td class="t6tg">SIZE / FACE</td>
		<td class="t6tg">HEIGHT</td>
		<td class="t6tg">WEIGHT</td>
		<td class="t6tg">VISION</td>
		<td class="t6tg">PHOBIAS</td>
	</tr>
	<tr>
		<td class="lb8">|TOTALLEVELS|</td>
		<td class="lb8">
|IIF(CR:0)|
&mdash;
|ELSE|
|CR|
|ENDIF|
		</td>
		<td class="lb8" width="100px"><input id="button3" type="button" value="Collapse Bio Header" name="button3" onclick="ToggleDIV('FullWideHeader');ToggleDIV('NarrowLeftHeader');" /></td>
		<td class="lb8">|EXP.NEXT|</td>
		<td class="lb8">|AGE|</td>
		<td class="lb8">|GENDER|</td>
		<td class="lb8">|COLOR.EYE|</td>
		<td class="lb8">|COLOR.HAIR||%COLOR.HAIR||%LENGTH.HAIR|, |%||%||LENGTH.HAIR|</td>
		<td class="lb8">|COLOR.SKIN|</td>
|IIF(TOTAL.LOAD:Light)|
		<td class="lb8" style="color:green">|TOTAL.LOAD| Load</td>
|ENDIF|
|IIF(TOTAL.LOAD:Medium)|
		<td class="lb9" style="color:orange; font-weight:bold;">|TOTAL.LOAD| Load</td>
|ENDIF|
|IIF(TOTAL.LOAD:Heavy)|
		<td class="lb9" style="color:#FF5500; font-weight:bold;">|TOTAL.LOAD| Load</td>
|ENDIF|
|IIF(TOTAL.LOAD:Overload)|
		<td class="lb9" style="color:red; font-weight:bold;">|TOTAL.LOAD|</td>
|ENDIF|
	</tr>
	<tr>
		<td class="t6tg">LEVEL</td>
		<td class="t6tg">CR</td>
		<td class="t6tg">&nbsp;</td>
		<td class="t6tg">NEXT LEVEL</td>
		<td class="t6tg">AGE</td>
		<td class="t6tg">GENDER</td>
		<td class="t6tg">EYES</td>
		<td class="t6tg">HAIR</td>
		<td class="t6tg">SKIN COLOR</td>
		<td class="t6tg">STATIC ENCUMBERANCE</td>
	</tr>
	<tr>
		<td class="lb8" colspan="6">|INTERESTS|&nbsp;</td>
		<td class="lb8" colspan="4">|SPEECHTENDENCY||%CATCHPHRASE|, "|CATCHPHRASE|"|%|&nbsp;</td>
	</tr>
	<tr>
		<td class="t6tg" colspan="6">INTERESTS</td>
		<td class="t6tg" colspan="4">SPOKEN STYLE</td>
	</tr>
	</table>  <!-- FullHeader table -->
	<table  width="100%" cellspacing="0" cellpadding="2" border="0">
	<tr>
   	<script language="javascript" type="text/javascript">printFileNameJPG(TRUE);</script>
		<td class="lt6" width="99%">
			<table width="100%" border="0" cellspacing="0" cellpadding="2">
			<tr>
				<td class="r12b" width="10%" colspan="2">Description:</td>
				<td class="l9" width="2%">&nbsp;</td>
				<td class="l9">|DESC|</td>
				<td class="l9" width="10%">&nbsp;</td>
			</tr>
			<tr>
				<td class="r12b" width="10%" colspan="2">Home:</td>
				<td class="l9" width="2%">&nbsp;</td>
				<td class="l9">|%REGION| From |REGION|. |%||%RESIDENCE||RESIDENCE|,|%LOCATION| |%||%||LOCATION|</td>
				<td class="l9" width="10%">&nbsp;</td>
			</tr>
			<tr>
				<td class="r12b" width="10%" colspan="2">Biography:</td>
				<td class="l9" width="2%">&nbsp;</td>
				<td class="l9">|BIO|<br /></td>
				<td class="l9" width="10%">&nbsp;</td>
			<tr>
|%MISC.COMPANIONS|
			<tr>
				<td class="r12b" width="10%" colspan="2">Companions:</td>
				<td class="l9" width="2%">&nbsp;</td>
				<td class="l9">|MISC.COMPANIONS|</td>
				<td class="l9" width="10%">&nbsp;</td>
			<tr>
|%|
			</table>
		</td>
	</table>
</div>
<div id="ColorKey" style="display:none;">
	<table border=0 width="75%" cellpadding="4px" cellspacing="4px">
	<tr valign="top">
		<td class="l9"><b>Description:</b></td>
		<td class="l8">This output sheet is designed for people who game with their laptops open.  
			<b>csheet_fantasy_laptop.htm</b> is for small laptops and netbooks with a 600 to 800 pixel
			wide display.  <b>csheet_fantasy_laptop_ws.htm</b> is for wide screen laptops, as it uses
			two columns for the layout.<br />
			<br />
			Most optional sections that takes up more than a couple of lines have a way to collapse the output, 
			so as to fit something else on the screen.  A person does not need to see the whole spell list 
			or inventory all the time, so they have been stuffed into collapsable sections.  
			Since this sheet is more interactive, one could open the seven spells they have memorized, 
			and then close each spell after it has been cast.  Memorized spells can also be tracked by 
			clicking on the &curren; to mark them as prepared with &sect;.  Current hit points/wound points/power 
			points are now also trackable with the +/- buttons.  For those receive bonuses from 
			spells or auras to hit/damage on either melee or ranged attacks, those can now be temporarily 
			tracked and auto computed.  Spells that temporarily affect armor class can be configured by 
			clicking on the [cfg] button, and then activated by clicking on the AC bonus type.  
			An example is Mage Armor would be configured as Spell Armor, 4.  If clicking an AC type gives you a 
			grey button, it has not been configured yet.
			<br />
			<br />
			The spell blocks display statistics as if they were cast at your current base level with only 
			"all the time" variables from feats/traits/special abilities accounted for like "+1 Caster Level 
			for fire spells".  There is no current mechanism to apply metamagic feats or recalculate stats 
			based upon temporary ability score changes from the plus/minus buttons on the sheet.
		</td>
	</tr>
	<tr valign="top">
		<td class="l9"><b>Setup:</b></td>
		<td class="l8">If you place a <b>|NAME|.jpg</b> small portrait, and a <b>|NAME|_Full.jpg</b> picture of 
			your charcter in the same directory as the .htm file, the portrait will show on the main page, and the _Full
			picture will show on when the Full Header button is clicked to display the charcter's bio and background.<br />
			Large Die Icon: <img src="die.png" onerror="ToggleDIV('large_die_available');">
			<div id="large_die_available" style="display:none; color:red;" class="l8">The large die image is missing.  
					  Copy ...\pcgen\preview\d20\fantasy\images\gold\die.png to your character directory, 
					  usually |DIR.PCG|, where this page is, to activate a dice rolling icon in the Saves and Initiative sections.
			</div>
			<br />
			Small Die Icon: <img src="die_small.png" onerror="ToggleDIV('small_die_available');">
			<div id="small_die_available" style="display:none; color:red;" class="l8">The small die image is missing.  
					  Copy ...\pcgen\preview\d20\fantasy\images\gold\die_small.png to your character directory, 
					  usually |DIR.PCG|, where this page is, to activate a dice rolling icon in the Saves and Initiative sections.
			</div>
			<br />
		</td>
	</tr>
	<tr valign="top">
		<td class="l9"><b>Transfer to another location:</b></td>
		<td class="l8">To carry the character sheet to any web host or file directory, the following files are needed:<br />
			<b>|NAME|.htm</b> ~ This web page.<br />
			<b>die.png</b> ~ The large die graphic used in the attack and initiative areas.<br />
			<b>die_small.png</b> ~ The small die graphic used in the skills area.<br />
			<b>|NAME|.jpg</b> ~ an optional small portrait of the character 100 pixels high.<br />
			<b>|NAME|_full.jpg</b> ~ an optional large portrait of the character in the 400 pixels size range.<br />
		</td>
	</tr>
	<tr valign="top">
		<td class="l9"><b>Color Keys:</b></td>
		<td class="l8">
			<span class="l8"><input class="statmodbutton" type=button value="+" name="DummyPlusButton"> 
				<input class="statmodbutton" type=button value="-" name="DummyMinusButton"> are buttons to add to or subtract from
				the value in their neighboring box and recompute many of the stats.  Temporary changes to stats or short term 
				bonuses to saves can be tracked and recomputed this way.<br />
			<span class="l8" style="background:#FFCCCC;">Red</span> in the Current HP box is damaged, 
			<span class="l8" style="background:#FFFF88">Yellow</span> is for manual tracking of temporary HP bonuses like Aid.
			<br /><span class="l8" style="background:LIGHTBLUE">LightBlue</span> tracks values that have changed due to temporary ability changes including Barbarian Rages.
			<br /><span class="l8" style="background:#CCCCFF">Purple</span> Ability values and modifiers that have changed due to temporary changes.
			<br /><span class="l10" style="color:#FFFF20; background:black">Yellow</span>/<span class="l10" style="color:#20FFFF; background:black">Cyan</span>
		        hovers are section markers that expand/collapse sections when clicked.
			<br /><span class="lh9"><a href="#" onclick="return(false);" class="lh9">Green</a></span> links are spells/feats/special abilities 
				that expand with a larger description block.
			<br /><span class="l8" >Clicking on an expanded spell box's "Spell Name" will close the expanded box.
			<br />
			<br /><span class="extlink"><a href="#">External HTML</a></span> links are decorated a little more than ususal so they stand out as leaving the page.  The only current usage is for linking to the output sheet for a Familiar/Mount/Follower.
			<br />The <img src="die.png" Alt="[Die Image]" width="24px" height="26px" border="0"> and <img src="die_small.png" Alt="[Die Image]" width="15px" height="16px" border="0"> roll results cycle through a rainbow of pastel colors.  It makes them stand out a bit, and since it is possible to roll the same results twice in a row, the color is changed to indicate the new roll.  The roll results and timestamps are recorded below in this section as a temporary record.  They are not saved to a file, and clear if the page is reloaded.
		</td>
	</tr>
	<tr valign="top">
		<td class="l9"><b>Credits:</b></td>
		<td class="l8"><b>csheet_fantasy_combined.htm</b> Richard O'Doherty-Gregg, arcady, Barak, Roger Host, Thomas Jannes, Chuck Pint, Eddy Anthony, Tir-Gwaith, karianna and more I am sure.  A long and glorious list of contributors.<br />
			<b>csheet_fantasy_laptop_ws.htm</b> Forked from the 5.16.0 version of csheet_fantasy_combined.htm by Mike Elliott, aka SatinKnights.
		</td>
	</tr>
	</table>
	<br />
	<div id="evidence" class="l8" style="display:inline;"><b>Recorded Dice Rolls:</b></div>
	<hr>
</div>
<!-- Main sheet layout -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr valign="top">
<td width="620px">
	<div id="NarrowLeftHeader" width="100%" style="display:block">
	<table border="0" width="100%">
	<tr valign="top">
		<td width="50%">
			<table cellpadding="0" cellspacing="4" border="0" width="100%">
			<tr valign="top">
				<td id="charName" colspan="3" class="lb12mB">|NAME|
|%FOLLOWEROF|
~&bull;~ |FOLLOWEROF|
|%|
				</td>
				<td colspan="2" class="lb8">|PLAYERNAME|</td>
	   			<script language="javascript" type="text/javascript">printFileNameJPG(FALSE);</script>
			</tr>
			<tr>
				<td colspan="3" class="t6tg">CHARACTER NAME</td>
				<td colspan="2" class="t6tg">PLAYER</td>
			</tr>
			<tr>
				<td colspan="2" class="lb8">|CLASSLIST|</td>
				<td class="lb8">|EXP.CURRENT|</td>
				<td class="lb8">|RACE|
|IIF(RACETYPE:Humanoid)|
|ELSE|
					(|RACETYPE||%RACESUBTYPE| |RACESUBTYPE||%|)
|ENDIF|
				</td>
				<td class="lb8">|VISION|</td>
			</tr>
			<tr>
				<td colspan="2" class="t6tg">CLASS</td>
				<td class="t6tg">EXPERIENCE</td>
				<td class="t6tg">RACE</td>
				<td class="t6tg">VISION</td>
			</tr>
			<tr>
				<td class="lb8">&nbsp;&nbsp;|TOTALLEVELS|</td>
				<td class="lb8">|ALIGNMENT|</td>
				<td class="lb8">|EXP.NEXT|</td>
|IIF(TOTAL.LOAD:Light)|
				<td class="lb8" style="color:green">|TOTAL.LOAD| Load</td>
|ENDIF|
|IIF(TOTAL.LOAD:Medium)|
				<td class="lb9" style="color:orange; font-weight:bold;">|TOTAL.LOAD| Load</td>
|ENDIF|
|IIF(TOTAL.LOAD:Heavy)|
				<td class="lb9" style="color:#FF5500; font-weight:bold;">|TOTAL.LOAD| Load</td>
|ENDIF|
|IIF(TOTAL.LOAD:Overload)|
				<td class="lb9" style="color:red; font-weight:bold;">|TOTAL.LOAD|</td>
|ENDIF|
				</td>
				<td class="lb8">|DEITY|</td>
			</tr>
			<tr>
				<td class="t6tg">LEVEL</td>
				<td class="t6tg">ALIGNMENT</td>
				<td class="t6tg">NEXT LEVEL</td>
				<td class="t6tg">STATIC ENCUMBERANCE</td>
				<td class="t6tg">DEITY</td>
			</tr>
			</table>  <!-- FullHeader table -->
		</td>
	</tr>
	</table>
	</div>
<!-- Left sheet layout -->
	<table border="0" cellpadding="0" cellspacing="0" width="100%">
	<tr valign="top">
		<td colspan="2" class="lb12mB"><span id="CompactAbilityDivName" class="lb12mB" style="display:none;">&nbsp;|NAME|&nbsp;&nbsp;~&bull;~&nbsp;&nbsp;|CLASSLIST|</span></td>
	</tr>
	<tr valign="top">
		<td class="lt6">
<!-- Ability table (first row of main table) -->
			<div id="AbilityDiv" style="display:block">
			    <script language="javascript" type="text/javascript">ABPrint();</script>
			</div>
			<div id="CompactAbilityDiv" style="display:none">
			    <script language="javascript" type="text/javascript">ABPrint();</script>
			</div>
		</td>
		<td class="lt6">
<!-- HP Table (first row of main table) -->
<!-- This row will contain initiative. base attack, skills -->
|IIF(VAR.IF(var("UseAlternateDamage")==0;1;0):1)|
			<table border="0" width="100%">
			<tr>
				<td class="cm9swB">HP<span class="c5wB"><br />Hit Points</span></td>
				<td id="HP" class="cm9sB" width="30">|HP|</td>
				<td class="c6" width="2%"></td>
				<td id="HPup" width="1%" align="right"><input class="statmodbutton" type=button value="+" name=AddStatButton onclick="HPPlus();"><br />
					<input class="statmodbutton" type=button value="-" name=SubStatButton onclick="HPMinus();"></td>
				<td class="c8wB">CURRENT&nbsp;HP</td>
				<td id="CurHP" class="cm9sB" width="30">&nbsp;&nbsp;&nbsp;</td>
			</tr>
			<td class="c8wB">Damage<br />Reduction</td>
				<td class="cm9sB">&nbsp;|DR|&nbsp;</td>
				<td class="c6" width="2%"></td>
				<td id="Subdualup" width="1%" align="right"><input class="statmodbutton" type=button value="+" name=AddStatButton onclick="SubdualPlus();"><br />
					<input class="statmodbutton" type=button value="-" name=SubStatButton onclick="SubdualMinus();"></td>
				<td class="c8wB">SUBDUAL<br />DAMAGE</td>
				<td id="Subdual" class="cm9sB">&nbsp;</td>
			<tr>
			</tr>
			</table>
|ELSE|
			<table>
			<tr>
				<td class="c6" width="50"></td>
				<td class="cb7" width="27">&nbsp;</td>
				<td class="c6"></td>
				<td class="c6"></td>
				<td class="cb5">CURRENT VITALITY</td>
				<td class="c6"></td>
				<td class="cb5">SUBDUAL DAMAGE</td>
			</tr>
			<tr>
				<td class="cm9swB">VP<span class="c5wB"><br />Vitality</span></td>
				<td id="HP" class="cm9sB" width-"35px">|HP|</td>
				<td class="c6">&nbsp;</td>
				<td id="HPup" width="1%" align="right"><input class="statmodbutton" type=button value="+" name=AddStatButton onclick="HPPlus();"><br />
					<input class="statmodbutton" type=button value="-" name=SubStatButton onclick="HPMinus();"></td>
				<td id="CurHP" class="cm9sB" width="35px">&nbsp;</td>
				<td class="c6">&nbsp;</td>
				<td class="cm9sB">&nbsp;</td>
			</tr>
			<tr>
				<td class="c6"></td>
				<td class="c6"></td>
				<td class="c6"></td>
				<td class="c6"></td>
				<td class="cb5">CURRENT</td>
				<td class="c6"></td>
				<td class="cb5">DAMAGE REDUCTION</td>
			</tr>
			<tr>
				<td class="cm9swB">WP<span class="c5wB"><br />Wound Points</span></td>
				<td id="WP" class="cm9sB" width="35px">|ALTHP|</td>
				<td class="c6">&nbsp;</td>
				<td width="1%" align="right"><input class="statmodbutton" type=button value="+" onclick="WoundPlus();"><br />
					                     <input class="statmodbutton" type=button value="-" onclick="WoundMinus();"></td>
				<td id="WoundPoints" class="cm9sB" width="35px">&nbsp;</td>
				<td class="c6">&nbsp;</td>
				<td class="cm9sB">&nbsp;|DR|&nbsp;</td>
			</tr>
			</table>
|ENDIF|
<!--  START Initiative Table (second row of main table) -->
			<div id="Initdiv">
				 <script language="javascript" type="text/javascript">InitPrint();</script>
			</div>
<!--  END Initiative Table -->
<!--  START Base Attack Table (second row of main table) -->
			<table width="100%">
			<tr>
				<td width="85" class="c9wB">BASE ATTACK<span class="c5w"><br />Bonus</span></td>
				<td class="c10sB">|ATTACK.MELEE|<br /></td>
				<td width="85" class="c9wB">Spell<BR>Resistance</span></td>
				<td class="c10sB">|SR|</td>
			</tr>
<!--  START Movement Table (second row of main table) -->
			<tr>
				<td width="85" class="c9wB">SPEED</span></td>
				<td class="c10sB" colspan="3">|MOVEMENT|</td>
			</tr>
			<tr>
				<td width="85" class="c9wB">Elemental<BR>Resistance</span></td>
				<td class="c10sB" colspan="3">&nbsp;
|%VAR.AcidResistanceBonus.GTEQ.1|
	|VAR.AcidResistanceBonus.INTVAL| Acid&nbsp;&nbsp;
|%|
|%VAR.ColdResistanceBonus.GTEQ.1|
	|VAR.ColdResistanceBonus.INTVAL| Cold&nbsp;&nbsp;
|%|
|%VAR.FireResistanceBonus.GTEQ.1|
	|VAR.FireResistanceBonus.INTVAL| Fire&nbsp;&nbsp;
|%|
|%VAR.ElectricityResistanceBonus.GTEQ.1|
	|VAR.ElectricityResistanceBonus.INTVAL| Electricity&nbsp;&nbsp;
|%|
|%VAR.EvilResistanceBonus.GTEQ.1|
	|VAR.EvilResistanceBonus.INTVAL| Evil&nbsp;&nbsp;
|%|
|%VAR.HolyResistanceBonus.GTEQ.1|
	|VAR.HolyResistanceBonus.INTVAL| Holy&nbsp;&nbsp;
|%|
|%VAR.UnholyResistanceBonus.GTEQ.1|
	|VAR.UnholyResistanceBonus.INTVAL| Unholy&nbsp;
|%|
				</td>
			</tr>
			</table>
<!--  END Movement Table (second row of main table) -->
		</td>
	</tr>
	<tr valign="top">
		<td colspan="2" class="lt6" valign="top"> <!-- Left table bottom -->
			<div id="CompactSavesDiv" style="display:none;">
		</td>
	</tr>
<!--============================================================== end of top left table -->
	<tr valign="top">
		<td colspan="2" class="lt6" valign="top"> <!-- Left table bottom -->
<!--  START AC Table (first row of main table)-->
			<div id="ACDiv" style="display:block;">
				 <script language="javascript" type="text/javascript">ACPrint();</script>
			</div>
<!--  END AC Table -->
<!-- START Saving Throws Table (main table row 3) -->
			<div id="SavesDiv" style="display:block;">
				<script language="javascript" type="text/javascript">SavesPrint();</script>
			</div>
<!-- STOP Saving Throws Table -->
<!-- START Base Combat Stats (main table row 3) -->
			<div id="AttackDiv" style="display:block;">
				<script language="javascript" type="text/javascript">ATKPrint();</script>
			</div>
<!-- STOP Base Combat Stats -->
<!-- START Unarmed Combat Stats (main table row 3) -->
			<div id="UnarmedDiv"> 		<!-- will be filled in by call to WeaponPrint() -->
			</div>
<!-- STOP Unarmed Combat Stats -->
<!-- START Compact Weapon Stats (main table row 3) -->
			<div id="WeaponsCompact" style="display:inline;"> <!-- will be filled in by call to WeaponPrint() -->
			</div>
<!-- START Comprehensive Weapon Stats (part 1) (main table row 3) -->
			<div id="WeaponsComprehensive" style="display:none;"> <!-- will be filled in by call to WeaponPrint() -->
			</div>
<!-- Weapons spillover Table -->
			<div id="WeaponsExtra" style="display:none;">
				<script language="javascript" type="text/javascript">WeaponPrint();</script>
			</div>
<!-- END Weapons spillover Table -->
<!-- STOP Compact Weapon Stats -->
<!-- START Compact Armor stats (main table row 3) -->
			<div id="ArmourCompact" style="display:inline;">
				<table cellpadding="0" width="100%" cellspacing="0" border="0">
				<tr>
					<td class="l7wB">ARMOR<br /></td>
					<td class="c4wB">TYPE<br /></td>
					<td class="c4wB">AC<br /></td>
					<td class="c4wB">MAXDEX<br /></td>
					<td class="c4wB">CHECK<br /></td>
					<td class="c4wB">SPELL FAILURE<br /></td>
				</tr>
|IIF(RACETYPE:Animal.OR.RACETYPE:Companion.OR.RACETYPE:Beast.OR.RACETYPE:Construct.OR.RACETYPE:Dragon.OR.RACETYPE:Magical Beast.OR.RACETYPE:Outsider.OR.RACETYPE:Shapechanger)|
|FOR,%cnt,0,20,1,1|
				<!-- |ARMOR.BARDING.ALL.%cnt.NAME| ~~ forces stop of FOR LOOP when it is empty -->
				<tr><td class="l8mB">|ARMOR.BARDING.ALL.%cnt.NAME|<br /></td>
						  <td class="c8mB">|ARMOR.BARDING.ALL.%cnt.TYPE|<br /></td>
						  <td class="c8mB">|ARMOR.BARDING.ALL.%cnt.TOTALAC|<br /></td>
						  <td class="c8mB">|ARMOR.BARDING.ALL.%cnt.MAXDEX|<br /></td>
						  <td class="c8mB">|ARMOR.BARDING.ALL.%cnt.ACCHECK|<br /></td>
						  <td class="c8mB">|ARMOR.BARDING.ALL.%cnt.SPELLFAIL|<br /></td></tr>
				<tr><td colspan="6" class="c8">|ARMOR.BARDING.ALL.%cnt.SPROP|</td></tr>
|ENDFOR|
|ELSE|
|FOR,%cnt,0,20,1,1|
				<!-- |ARMOR.SUIT.ALL.%cnt.NAME| ~~ forces stop of FOR LOOP when it is empty -->
				<tr><td class="l8mB">|ARMOR.SUIT.ALL.%cnt.NAME|<br /></td>
						  <td class="c8mB">|ARMOR.SUIT.ALL.%cnt.TYPE|<br /></td>
						  <td class="c8mB">|ARMOR.SUIT.ALL.%cnt.TOTALAC|<br /></td>
						  <td class="c8mB">|ARMOR.SUIT.ALL.%cnt.MAXDEX|<br /></td>
						  <td class="c8mB">|ARMOR.SUIT.ALL.%cnt.ACCHECK|<br /></td>
						  <td class="c8mB">|ARMOR.SUIT.ALL.%cnt.SPELLFAIL|<br /></td></tr>
				<tr><td colspan="6" class="c8">|ARMOR.SUIT.ALL.%cnt.SPROP|</td></tr>
|ENDFOR|
|FOR,%cnt,0,20,1,1|
				<!-- |ARMOR.SUIT.ALL.%cnt.NAME| ~~ forces stop of FOR LOOP when it is empty -->
				<tr><td class="l8mB">|ARMOR.SHIRT.ALL.%cnt.NAME|<br /></td>
						  <td class="c8mB">|ARMOR.SHIRT.ALL.%cnt.TYPE|<br /></td>
						  <td class="c8mB">|ARMOR.SHIRT.ALL.%cnt.TOTALAC|<br /></td>
						  <td class="c8mB">|ARMOR.SHIRT.ALL.%cnt.MAXDEX|<br /></td>
						  <td class="c8mB">|ARMOR.SHIRT.ALL.%cnt.ACCHECK|<br /></td>
						  <td class="c8mB">|ARMOR.SHIRT.ALL.%cnt.SPELLFAIL|<br /></td></tr>
				<tr><td colspan="6" class="c8">|ARMOR.SHIRT.ALL.%cnt.SPROP|</td></tr>
|ENDFOR|
|ENDIF|
				<tr><td colspan="6" height="2px"></td></tr>
				<tr>
					<td class="l7wB">SHIELD<br /></td>
					<td class="c4wB">TYPE<br /></td>
					<td class="c4wB">AC<br /></td>
					<td class="c4wB"><br /></td>
					<td class="c4wB">CHECK<br /></td>
					<td class="c4wB">SPELL FAILURE<br /></td>
				</tr>
|FOR,%cnt,0,20,1,1|
				<!-- |ARMOR.SHIELD.ALL.%cnt.NAME| ~~ forces stop of FOR LOOP when it is empty -->
				<tr><td class="l8mB">|ARMOR.SHIELD.ALL.%cnt.NAME|<br /></td>
						  <td class="c8mB">|ARMOR.SHIELD.ALL.%cnt.TYPE|<br /></td>
						  <td class="c8mB">|ARMOR.SHIELD.ALL.%cnt.TOTALAC|<br /></td>
						  <td class="c8mB"><br /></td><td class="c8mB">|ARMOR.SHIELD.ALL.%cnt.ACCHECK|<br /></td>
						  <td class="c8mB">|ARMOR.SHIELD.ALL.%cnt.SPELLFAIL|<br /></td></tr>
				<tr><td colspan="6" class="c8">|ARMOR.SHIELD.ALL.%cnt.SPROP|</td></tr>
|ENDFOR|
				<tr><td colspan="6" height="2px"></td></tr>
				<tr>
					<td class="l7wB">ITEMS<br /></td>
					<td class="c4wB"><br /></td>
					<td class="c4wB">AC<br /></td>
					<td class="c4wB"><br /></td>
					<td class="c4wB"><br /></td>
					<td class="c4wB"><br /></td>
				</tr>
|FOR,%cnt,0,20,1,1|
				<!-- |ARMOR.ITEM.ALL.%cnt.NAME| ~~ forces stop of FOR LOOP when it is empty -->
				<tr><td class="l8mB">|ARMOR.ITEM.ALL.%cnt.NAME|<br /></td>
						  <td class="c8mB"><br /></td><td class="c8mB">|ARMOR.ITEM.ALL.%cnt.ACBONUS|<br /></td>
						  <td class="c8mB"><br /></td><td class="c8mB"><br /></td><td class="c8mB"><br /></td>
				</tr><tr><td colspan="6" class="c8">|ARMOR.ITEM.ALL.%cnt.SPROP|</td></tr>
|ENDFOR|
				<tr><td colspan="6" height="2px"></td></tr>
				</table>
			</div>
<!-- END Compact Armor stats (main table row 3) -->
<!-- STOP Comprehensive Weapon Stats (part 1) -->
<!-- START Comprehensive Armor stats (main table row 3)  -->
			<div id="ArmourComprehensive" style="display:none;">
				<br />
// Barding displays for Animals or other probable mount types
|IIF(RACETYPE:Animal.OR.RACETYPE:Companion.OR.RACETYPE:Beast.OR.RACETYPE:Construct.OR.RACETYPE:Dragon.OR.RACETYPE:Magical Beast.OR.RACETYPE:Outsider.OR.RACETYPE:Shapechanger)|
|FOR,%cnt,0,10,1,1|
				<!-- |ARMOR.BARDING.ALL.%cnt.NAME| ~~ forces stop of FOR LOOP when it is empty -->
				<table cellpadding="0" cellspacing="0" width="100%" border="0">
				<tr>
					<td class="c10wB" height="20" rowspan="2" width="125">|ARMOR.BARDING.ALL.%cnt.NAME|<br /></td>
					<td class="c7wB" width="60" height="15">TYPE</td>
					<td class="c7wB" width="85" height="15">ARMOR BONUS</td>
					<td class="c7wB" width="85" height="15">MAX DEX BONUS</td>
				</tr>
				<tr>
					<td class="c8sB">|ARMOR.BARDING.ALL.%cnt.TYPE|<br /></td>
					<td class="c8sB">|ARMOR.BARDING.ALL.%cnt.TOTALAC|<br /></td>
					<td class="c8sB">|ARMOR.BARDING.ALL.%cnt.MAXDEX|<br /></td>
				</tr>
				</table>
				<table cellpadding="0" cellspacing="0" border="0" width="100%">
				<tr>
					<td class="c6wB" height="15" width="60">CHECK PENALTY</td>
					<td class="c6wB" width="60" height="15">SPELL FAILURE</td>
					<td class="c7wB" width="237" height="15">SPECIAL PROPERTIES</td>
				</tr>
				<tr>
					<td class="c8sB">|ARMOR.BARDING.ALL.%cnt.ACCHECK|<br /></td>
					<td class="c8sB">|ARMOR.BARDING.ALL.%cnt.SPELLFAIL|<br /></td>
					<td class="c8sB">|ARMOR.BARDING.ALL.%cnt.SPROP|<br /></td>
				</tr>
				</table>
|ENDFOR|
|ENDIF|
|FOR,%cnt,0,10,1,1|
				<!-- |ARMOR.SUIT.ALL.%cnt.NAME| ~~ forces stop of FOR LOOP when it is empty -->
				<table cellpadding="0" cellspacing="0" width="100%" border="0">
				<tr>
					<td class="c10wB" height="20" rowspan="2" width="125">|ARMOR.SUIT.ALL.%cnt.NAME|<br /></td>
					<td class="c7wB" width="60" height="15">TYPE</td>
					<td class="c7wB" width="85" height="15">ARMOR BONUS</td>
					<td class="c7wB" width="85" height="15">MAX DEX BONUS</td>
				</tr>
				<tr>
					<td class="c8sB">|ARMOR.SUIT.ALL.%cnt.TYPE|<br /></td>
					<td class="c8sB">|ARMOR.SUIT.ALL.%cnt.TOTALAC|<br /></td>
					<td class="c8sB">|ARMOR.SUIT.ALL.%cnt.MAXDEX|<br /></td>
				</tr>
				</table>
				<table cellpadding="0" cellspacing="0" border="0" width="100%">
				<tr>
					<td class="c6wB" height="15" width="60">CHECK PENALTY</td>
					<td class="c6wB" width="60" height="15">SPELL FAILURE</td>
					<td class="c7wB" width="237" height="15">SPECIAL PROPERTIES</td>
				</tr>
				<tr>
					<td class="c8sB">|ARMOR.SUIT.ALL.%cnt.ACCHECK|<br /></td>
					<td class="c8sB">|ARMOR.SUIT.ALL.%cnt.SPELLFAIL|<br /></td>
					<td class="c8sB">|ARMOR.SUIT.ALL.%cnt.SPROP|<br /></td>
				</tr>
				</table>
|ENDFOR|
|FOR,%cnt,0,10,1,1|
				<!-- |ARMOR.SHIRT.ALL.%cnt.NAME| ~~ forces stop of FOR LOOP when it is empty -->
				<table cellpadding="0" cellspacing="0" width="100%" border="0">
				<tr>
					<td class="c10wB" height="20" rowspan="2" width="125">|ARMOR.SHIRT.ALL.%cnt.NAME|<br /></td>
					<td class="c7wB" width="60" height="15">TYPE</td>
					<td class="c7wB" width="85" height="15">ARMOR BONUS</td>
					<td class="c7wB" width="85" height="15">MAX DEX BONUS</td>
				</tr>
				<tr>
					<td class="c8sB">|ARMOR.SHIRT.ALL.%cnt.TYPE|<br /></td>
					<td class="c8sB">|ARMOR.SHIRT.ALL.%cnt.TOTALAC|<br /></td>
					<td class="c8sB">|ARMOR.SHIRT.ALL.%cnt.MAXDEX|<br /></td>
				</tr>
				</table>
				<table cellpadding="0" cellspacing="0" border="0" width="100%">
				<tr>
					<td class="c6wB" height="15" width="60">CHECK PENALTY</td>
					<td class="c6wB" width="60" height="15">SPELL FAILURE</td>
					<td class="c7wB" width="237" height="15">SPECIAL PROPERTIES</td>
				</tr>
				<tr>
					<td class="c8sB">|ARMOR.SHIRT.ALL.%cnt.ACCHECK|<br /></td>
					<td class="c8sB">|ARMOR.SHIRT.ALL.%cnt.SPELLFAIL|<br /></td>
					<td class="c8sB">|ARMOR.SHIRT.ALL.%cnt.SPROP|<br /></td>
				</tr>
				</table>
|ENDFOR|
				<table cellpadding="0" cellspacing="0" width="100%" border="0"><tr><td height="2px"></td></tr></table>
|FOR,%cnt,0,100,1,1|
				<!-- |ARMOR.SHIELD.ALL.%cnt.NAME| ~~ forces stop of FOR LOOP when it is empty -->
				<table cellpadding="0" cellspacing="0" width="100%" border="0">
				<tr>
					<td class="c10wB" height="20" rowspan="2" width="125">|ARMOR.SHIELD.ALL.%cnt.NAME|<br /></td>
					<td class="c7wB" width="60" height="15">TYPE</td>
					<td class="c7wB" width="85" height="15">ARMOR BONUS</td>
					<td class="c7wB" width="85" height="15">MAX DEX BONUS</td>
				</tr>
				<tr>
					<td class="c8sB">|ARMOR.SHIELD.ALL.%cnt.TYPE|<br /></td>
					<td class="c8sB">|ARMOR.SHIELD.ALL.%cnt.TOTALAC|<br /></td>
					<td class="c8sB">|ARMOR.SHIELD.ALL.%cnt.MAXDEX|<br /></td>
				</tr>
				</table>
				<table cellpadding="0" cellspacing="0" border="0" width="100%">
				<tr>
					<td class="c6wB" height="15" width="60">CHECK PENALTY</td>
					<td class="c6wB" width="60" height="15">SPELL FAILURE</td>
					<td class="c7wB" width="237" height="15">SPECIAL PROPERTIES</td>
				</tr>
				<tr>
					<td class="c8sB">|ARMOR.SHIELD.ALL.%cnt.ACCHECK|<br /></td>
					<td class="c8sB">|ARMOR.SHIELD.ALL.%cnt.SPELLFAIL|<br /></td>
					<td class="c8sB">|ARMOR.SHIELD.ALL.%cnt.SPROP|<br /></td>
				</tr>
				</table>
|ENDFOR|
				<table cellpadding="0" cellspacing="0" width="100%" border="0"><tr><td height="2px"></td></tr></table>
|%ARMOR.ITEM.1|
				<table cellpadding="0" cellspacing="0" border="0" width="100%">
				<tr>
					<td class="l7wB">ITEMS</td>
					<td class="c4wB">&nbsp;</td>
					<td class="c6wB">AC</td>
					<td class="c4wB" width="20px">&nbsp;</td>
				</tr>
|FOR.0,100,1,<tr><td class="l8mB">\ARMOR.ITEM.ALL.%.NAME\</td><td class="c8mB"></td><td class="c8mB">\ARMOR.ITEM.ALL.%.ACBONUS\</td><td class="c8mB"></td></tr><tr><td colspan="4" class="c8">\ARMOR.ITEM.ALL.%.SPROP\</td></tr>, , ,1|
				</table>
|%|
			</div>
<!-- END Comprehensive Armor stats (main table row 3) -->
|%WEAPONPROF|
<!-- PROFICIENCIES table -->
			<div id="ProficienciesHeaderOnly" style="display:inline;">
				<table width="100%" cellspacing="0" cellpadding="3">
				<tr>
					<td class="c10yB"><a name="#" onclick="CycleProficiencies();">WEAPON PROFICIENCIES</a></td>
				</tr>
				</table>
			</div>
			<div id="ProficienciesCompact" style="display:none;">
				<table width="100%" cellspacing="0" cellpadding="3">
				<tr>
					<td class="c10yB"><a name="#" onclick="CycleProficiencies();">WEAPON PROFICIENCIES</a></td>
				</tr>
				<tr>
					<td class="lt8s">|WEAPONPROFS|<br /></td>
				</tr>
				</table>
			</div>
<!-- END PROFICIENCIES table -->
|%|
<!-- Start Compact Equipment (main table row 3) -->
			<div id="EquipmentHeaderOnly" style="display:none">
				<table width="100%" cellspacing="0" cellpadding="3" border="0">
				<tr>
					<td class="c10yB"><a name="#" onclick="CycleEquipment()">EQUIPMENT</a>&nbsp;&nbsp;&nbsp;(<script language="javascript" type="text/javascript">document.write(StripZero('|TOTAL.WEIGHT|'));</script> - <script language="javascript" type="text/javascript">document.write(StripZero('|WEIGHT.LIGHT|'));</script>/<script language="javascript" type="text/javascript">document.write(StripZero('|WEIGHT.MEDIUM|'));</script>/<script language="javascript" type="text/javascript">document.write(StripZero('|WEIGHT.HEAVY|'));</script>)&nbsp;&nbsp;&nbsp;&nbsp;
|IIF(TOTAL.LOAD:Light)|
						<span style="font-size:10pt; font-weight:bold; color:green;">|TOTAL.LOAD| Load</span>
|ENDIF|
|IIF(TOTAL.LOAD:Medium)|
						<span style="font-size:10pt; font-weight:bold; color:yellow;">|TOTAL.LOAD| Load</span>
|ENDIF|
|IIF(TOTAL.LOAD:Heavy)|
						<span style="font-size:10pt; font-weight:bold; color:orange;">|TOTAL.LOAD| Load</span>
|ENDIF|
|IIF(TOTAL.LOAD:Overload)|
						<span style="font-size:10pt; font-weight:bold; color:red;">|TOTAL.LOAD|</span>
|ENDIF|
					</td>
				</tr>
				</table>
			</div>
			<div id="EquipmentCompact" style="display:inline">
				<table width="100%" cellspacing="0" cellpadding="3" border="0">
				<tr>
					<td class="c10yB"><a name="#" onclick="CycleEquipment()">EQUIPMENT</a>&nbsp;&nbsp;&nbsp;(<script language="javascript" type="text/javascript">document.write(StripZero('|TOTAL.WEIGHT|'));</script> - <script language="javascript" type="text/javascript">document.write(StripZero('|WEIGHT.LIGHT|'));</script>/<script language="javascript" type="text/javascript">document.write(StripZero('|WEIGHT.MEDIUM|'));</script>/<script language="javascript" type="text/javascript">document.write(StripZero('|WEIGHT.HEAVY|'));</script>)&nbsp;&nbsp;&nbsp;&nbsp;
|IIF(TOTAL.LOAD:Light)|
						<span style="font-size:10pt; font-weight:bold; color:green;">|TOTAL.LOAD| Load</span>
|ENDIF|
|IIF(TOTAL.LOAD:Medium)|
						<span style="font-size:10pt; font-weight:bold; color:yellow;">|TOTAL.LOAD| Load</span>
|ENDIF|
|IIF(TOTAL.LOAD:Heavy)|
						<span style="font-size:10pt; font-weight:bold; color:orange;">|TOTAL.LOAD| Load</span>
|ENDIF|
|IIF(TOTAL.LOAD:Overload)|
						<span style="font-size:10pt; font-weight:bold; color:red;">|TOTAL.LOAD|</span>
|ENDIF|
					</td>
				</tr>
				<tr>
					<td class="l6s">
						<table cellpadding="0" cellspacing="0" border="0" width="100%">
						<tr style="background:#DDDDDD;">
							<td align="right">QTY&nbsp;</td><td>Name</td><td>WT</td><td>&nbsp;</td><td>&nbsp;</td><td align="right">QTY&nbsp;</td><td>Name</td><td>WT</td>
						</tr>
|FOR,%equip1,0,(COUNT[EQUIPMENT.MERGELOC.Not.Coin.NOT.Gem]-1),1,0|
|OIF(EVEN:%equip1,<tr style="background:#DDDDDD">,<td width="3%">&nbsp;</td>)|
	<td class="rt8" width="5%">&nbsp;<b>|EQ.MERGELOC.Not.Coin.NOT.Gem.%equip1.QTY.INTVAL|</b>&nbsp;</td>
	<td class="lt8">&nbsp;|EQ.MERGELOC.Not.Coin.NOT.Gem.%equip1.NAME.MAGIC~<b>~</b> |</td>
	<td class="ct8"><script language="javascript" type="text/javascript">document.write(StripZero('|EQ.MERGELOC.Not.Coin.NOT.Gem.%equip1.WT|'));</script></td>
|OIF(EVEN:%equip1,<td></td>,</tr>)|
|ENDFOR|
						</tr>
						</table>
					</td>
				</tr>
				</table>
			</div>
<!-- END Compact Equipment (main table row 3) -->
<!-- START of Comprehensive Equipment Table -->
			<div id="EquipmentComprehensive" style="display:none">
			</div>
<!-- STOP Equipment Table -->
<!-- MONEY table -->
			<div id="MoneyHeaderOnly" style="display:inline;">
				<table width="100%" cellspacing="0" cellpadding="3">
				<tr>
					<td class="c10yB"><a name="#" onclick="CycleMoney()">MONEY</a></td>
				</tr>
				</table>
				</div>
			<div id="MoneyCompact" style="display:none;">
				<table width="100%" cellspacing="0" cellpadding="3">
				<tr>
					<td class="c10yB"><a name="#" onclick="CycleMoney()">MONEY</a></td>
				</tr>
				<tr>
					<td class="lt8s">
						<table width="100%" cellspacing="0" cellpadding="0">
|FOR.0,COUNT[EQTYPE.Coin],1,<script language="javascript" type="text/javascript">document.write(StripZero('\EQTYPE.Coin.%.QTY\'));</script></td><td width="2%">&nbsp;</td><td class="l8"> \EQTYPE.Coin.%.NAME\,<tr><td width="5%" class="r8">,</td></tr>,1|
|FOR.0,COUNT[EQTYPE.Gem],1,<script language="javascript" type="text/javascript">document.write(StripZero('\EQTYPE.Gem.%.QTY\'));</script></td><td width="2%">&nbsp;</td><td class="l8">\EQTYPE.Gem.%.NAME\ (Value: <script language="javascript" type="text/javascript">document.write(StripZero('\EQTYPE.Gem.%.COST\'));</script>) ,<tr><td width="5%" class="r8">,</td></tr>,1|
|%VAR.GOLD|
							<tr><td colspan="3"><span class="l8">|GOLD| gp value in unspecified coins</span></td></tr>
|%|
|%MISC.FUNDS|
							<tr><td colspan="3"><span class="notes">|MISC.FUNDS|</span></td></tr>
|%|
						</table>
					</td>
				</tr>
				</table>
			</div>
<!-- END MONEY table -->
<!-- Start of languages table (still inside the SkillsCompact Table) -->
			<table width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="c10yB"><a name="#" onClick="ToggleDIV('languages');">LANGUAGES</a></td>
			</tr>
			<tr>
				<td width="100%" class="t7s">
					<div id="languages" class="l8" style="display:none;">
						&nbsp;&nbsp;|LANGUAGES|<br />
					</div>
					</td>
			</tr>
			</table>
<!-- End of languages table (still inside the SkillsCompact Table) -->
<!-- Start of Archetypes table  == TODO: Benefit if longer than the Description. -->
|IIF(count("ABILITIES";"CATEGORY=Archetype";"TYPE=Archetype";"VISIBILITY=DEFAULT[or]VISIBILITY=OUTPUT_ONLY")>0)|
			<table width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="c10yB"><a name="#" onClick="ToggleDIV('archetypes');">ARCHETYPES</a></td>
			</tr>
			<tr>
				<td width="100%" class="t7s">
					<div id="archetypes" class="l8" style="display:none;">
						<table width="100%" cellspacing="0" cellpadding="5">
|FOR,%archetype,0,count("ABILITIES","CATEGORY=Archetype","TYPE=Archetype","VISIBILITY=DEFAULT[or]VISIBILITY=OUTPUT_ONLY")-1,1,0|
|OIF(EVEN:%archetype,<tr><td class="l8">,<tr><td class="l8g">)|
									&nbsp;<b>|ABILITYALL.Archetype.VISIBLE.%archetype.TYPE=Archetype|&nbsp;&bull;&nbsp;</b>
|IIF(TEXT.LENGTH.ABILITYALL.Archetype.VISIBLE.%archetype.TYPE=Archetype.BENEFIT.GT.TEXT.LENGTH.ABILITYALL.Archetype.VISIBLE.%archetype.TYPE=Archetype.DESC)|
|ABILITYALL.Archetype.VISIBLE.%archetype.TYPE=Archetype.BENEFIT|<BR>
|ELSE|
|ABILITYALL.Archetype.VISIBLE.%archetype.TYPE=Archetype.DESC|<BR>
|ENDIF|
								</td>
						</tr>
|ENDFOR|
						</table>
					</div>
				</td>
			</tr>
			</table>
|ENDIF|
<!-- STOP Archetypes Table -->
<!-- START Afflictions Table -->
|IIF(count("ABILITIES";"CATEGORY=Afflictions";"TYPE=Affliction";"VISIBILITY=DEFAULT[or]VISIBILITY=OUTPUT_ONLY")>0)|
			<table width="100%" cellspacing="0" cellpadding="0" summary="Affliction Table">
			<tr>
				<td class="c10oB"><a name="#" onClick="ToggleDIV('afflictions');">AFFLICTIONS</a></td>
			</tr>
			<tr>
				<td width="100%" class="t7s">
					<div id="afflictions" class="l8" style="display:inline;">
						<table width="100%" cellspacing="0" cellpadding="5">
|FOR,%affliction,0,count("ABILITIES","CATEGORY=Afflictions","TYPE=Affliction","VISIBILITY=DEFAULT[or]VISIBILITY=OUTPUT_ONLY")-1,1,0|
|OIF(EVEN:%affliction,<tr><td class="l8">,<tr><td class="l8g">)|
									&nbsp;<b>|ABILITYALL.Afflictions.VISIBLE.%affliction.TYPE=Affliction|&nbsp;&bull;&nbsp;</b>
|ABILITYALL.Afflictions.VISIBLE.%affliction.TYPE=Affliction.DESC|</td>
								</td>
						</tr>
|ENDFOR|
						</table>
					</div>
				</td>
			</tr>
			</table>
|ENDIF|
<!-- STOP Afflictions Table -->
<!-- START Domains stats (main table row 3) -->
			<div id="DomainsHeaderOnly" style="display:inline;">
|%DOMAIN.1|
				<table width="100%" cellspacing="0" cellpadding="3">
				<tr>
					<td class="c10yB" colspan="2"><a name="#" onclick="CycleDomains()">Cleric of |DEITY| ~ |DEITY.DESCRIPTION|</a></td>
				</tr>
				</table>
|%|
			</div>
			<div id="DomainsCompact" style="display:none;">
|%DOMAIN.1|
				<table width="100%" cellspacing="0" cellpadding="5">
				<tr>
					<td class="c10yB" colspan="2"><a name="#" onclick="CycleDomains()">Cleric of |DEITY| ~ |DEITY.DESCRIPTION|</a></td>
				</tr>
				<tr><td class="lt8sB" colspan="2">
						<table border="0" width="100%"><tr>
							<td class="r8B">Holy Symbol:</td><td class="l8">|DEITY.HOLYITEM|</td>
							<td class="r8B">Favored Weapon:</td><td class="l8">|DEITY.FAVOREDWEAPON|</td>
						</tr></table>
					</td></tr>
				<tr>
					<td class="ct8sB">Domain<br /></td>
					<td class="lt8sB">Granted Power<br /></td>
				</tr>
<!--Bjorn Ehlert: The use of COUNT[DOMAINS]+1 doesn't result in empty tds at the end of the table-->
|FOR.1,COUNT[DOMAINS]+1,1,<tr><td class="ct8s">\DOMAIN.%\<br /></td><td class="lt8s">\DOMAIN.%.POWER\<br /></td></tr>, , ,1|
|%|
|%DEITY.SA|
				<tr>
					<td class="ct8s">Special Abilities<br /></td>
					<td class="lt8s">|DEITY.SA|<br /></td>
				</tr>
|%|
|%DOMAIN.1|
|IIF(count("ABILITIES";"CATEGORY=Special Ability";"TYPE=DomainPower")>0)|
|FOR,%domainPower,0,count("ABILITIES","CATEGORY=Special Ability","TYPE=DomainPower")-1,1,0|
				<tr>
					<td class="ct8s">|ABILITYALL.Special Ability.%domainPower.TYPE=DomainPower|<br /></td>
					<td class="lt8s">
|IIF(TEXT.LENGTH.ABILITYALL.Special Ability.%domainPower.TYPE=DomainPower.BENEFIT:0)|
|ABILITYALL.Special Ability.%domainPower.TYPE=DomainPower.DESC|
|ELSE|
|ABILITYALL.Special Ability.%domainPower.TYPE=DomainPower.BENEFIT|
|ENDIF|
						<br /></td>
					</tr>
|ENDFOR|
|ENDIF|
				</table>
|%|
			</div>
<!-- END Domain stats (main table row 3) -->
<!-- START Companions Tables -->
|%FOLLOWERTYPE.Familiar|
    			<div id="FamiliarHeaderOnly" style="display:inline;">
    				<table cellpadding="0" cellspacing="0" border="0" width="100%" summary="Familiar Table">
     				<tr>
	     				<td class="extlink" colspan="11">&nbsp;&nbsp;Familiar:  <a href="|FOLLOWERTYPE.FAMILIAR.0.NAME|.htm">|FOLLOWERTYPE.FAMILIAR.0.NAME|</a> (|FOLLOWERTYPE.FAMILIAR.0.RACE|)</td>
	     				<td class="c10yB" width="5%"><a name="#" onclick="CycleFamiliar();">Expand</a>&nbsp;</td>
     				</tr>
    				</table>
    				<span class="l2"><br /></span>
    			</div>
    			<div id="FamiliarCompact" style="display:none;">
    				<table cellpadding="0" cellspacing="0" border="0" width="100%" summary="Familiar Table">
     				<tr>
	     				<td class="extlink" colspan="11">&nbsp;&nbsp;Familiar:  <a href="|FOLLOWERTYPE.FAMILIAR.0.NAME|.htm">|FOLLOWERTYPE.FAMILIAR.0.NAME|</a> (|FOLLOWERTYPE.FAMILIAR.0.RACE|)</td>
	     				<td class="c10yB" width="5%"><a name="#" onclick="CycleFamiliar();">Collapse</a>&nbsp;</td>
     				</tr>
     				<tr>
					<td width="8%" class="c8swB">FORT:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.FAMILIAR.0.CHECK.FORTITUDE.TOTAL|</td>
					<td width="8%" class="c8swB">REF:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.FAMILIAR.0.CHECK.REFLEX.TOTAL|</td>
					<td width="8%" class="c8swB">WILL:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.FAMILIAR.0.CHECK.WILL.TOTAL|</td>
					<td width="8%" class="c8swB">HP:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.FAMILIAR.0.HP|</td>
					<td width="8%" class="c8swB">AC:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.FAMILIAR.0.AC.Total|</td>
					<td width="8%" class="c8swB">INIT:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.FAMILIAR.0.INITIATIVEMOD|</td>
				</tr>
|FOR,%wep,0,COUNT[FOLLOWERTYPE.FAMILIAR.0.EQTYPE.WEAPON]-1,1,0|
				<tr>
					<td colspan="2" class="c10swB">|FOLLOWERTYPE.FAMILIAR.0.WEAPON.%wep.NAME|</td>
					<td colspan="2" class="c8s">|FOLLOWERTYPE.FAMILIAR.0.WEAPON.%wep.TOTALHIT|</td>
					<td colspan="2" class="c9swB">DAMAGE:</td>
					<td colspan="2" class="c8s">|FOLLOWERTYPE.FAMILIAR.0.WEAPON.%wep.DAMAGE|</td>
					<td colspan="2" class="c9swB">CRITICAL:</td>
					<td colspan="2" class="c8s">|FOLLOWERTYPE.FAMILIAR.0.WEAPON.%wep.CRIT|/x|FOLLOWERTYPE.FAMILIAR.0.WEAPON.%wep.MULT|</td>
				</tr>
|ENDFOR|
				<tr>
					<td class="c9swB">Special:</td>
					<td class="l9s" colspan="12">&nbsp;&nbsp;|FOLLOWERTYPE.FAMILIAR.0.SPECIALLIST|</td>
				</tr>
				</table>
				<span class="l2"><br /></span>
			</div>
|%|

|%FOLLOWERTYPE.SPECIAL MOUNT|
			<div id="SpecialMountHeaderOnly" style="display:inline;">
				<table cellpadding="0" cellspacing="0" border="0" width="100%" summary="Special Mount Table">
				<tr>
					<td class="extlink" colspan="11">&nbsp;&nbsp;Special Mount: <a href="|FOLLOWERTYPE.SPECIAL MOUNT.0.NAME|.htm">|FOLLOWERTYPE.SPECIAL MOUNT.0.NAME|</a> (|FOLLOWERTYPE.SPECIAL MOUNT.0.RACE|)</td>
					<td class="c10yB" width="5%"><a name="#" onclick="CycleSpecialMount();">Expand</a>&nbsp;</td>
				</tr>
				</table>
				<span class="l2"><br /></span>
			</div>
			<div id="SpecialMountCompact" style="display:none;">
				<table cellpadding="0" cellspacing="0" border="0" width="100%" summary="Special Mount Table">
				<tr>
					<td class="extlink" colspan="11">&nbsp;&nbsp;Special Mount: <a href="|FOLLOWERTYPE.SPECIAL MOUNT.0.NAME|.htm">|FOLLOWERTYPE.SPECIAL MOUNT.0.NAME|</a> (|FOLLOWERTYPE.SPECIAL MOUNT.0.RACE|)</td>
					<td class="c10yB" width="5%"><a name="#" onclick="CycleSpecialMount();">Collapse</a>&nbsp;</td>
				</tr>
				<tr>
					<td width="8%" class="c8swB">FORT:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.SPECIAL MOUNT.0.CHECK.FORTITUDE.TOTAL|</td>
					<td width="8%" class="c8swB">REF:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.SPECIAL MOUNT.0.CHECK.REFLEX.TOTAL|</td>
					<td width="8%" class="c8swB">WILL:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.SPECIAL MOUNT.0.CHECK.WILL.TOTAL|</td>
					<td width="8%" class="c8swB">HP:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.SPECIAL MOUNT.0.HP|</td>
					<td width="8%" class="c8swB">AC:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.SPECIAL MOUNT.0.AC.Total|</td>
					<td width="8%" class="c8swB">INIT:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.SPECIAL MOUNT.0.INITIATIVEMOD|</td>
				</tr>
|FOR,%wep,0,COUNT[FOLLOWERTYPE.SPECIAL MOUNT.0.EQTYPE.WEAPON]-1,1,0|
				<tr>
					<td colspan="2" class="c10swB">|FOLLOWERTYPE.SPECIAL MOUNT.0.WEAPON.%wep.NAME|</td>
					<td colspan="2" class="c8s">|FOLLOWERTYPE.SPECIAL MOUNT.0.WEAPON.%wep.TOTALHIT|</td>
					<td colspan="2" class="c10swB">DAMAGE:</td>
					<td colspan="2" class="c8s">|FOLLOWERTYPE.SPECIAL MOUNT.0.WEAPON.%wep.DAMAGE|</td>
					<td colspan="2" class="c10swB">CRITICAL:</td>
					<td colspan="2" class="c8s">|FOLLOWERTYPE.SPECIAL MOUNT.0.WEAPON.%wep.CRIT|/x|FOLLOWERTYPE.SPECIAL MOUNT.0.WEAPON.%wep.MULT|</td>
				</tr>
|ENDFOR|
				<tr>
					<td class="c9swB">Special:</td>
					<td class="l9s" colspan="12">&nbsp;&nbsp;|FOLLOWERTYPE.SPECIAL MOUNT.0.SPECIALLIST|</td>
				</tr>
				</table>
				<span class="l2"><br /></span>
			</div>
|%|
|%FOLLOWERTYPE.MOUNT|
			<div id="MountHeaderOnly" style="display:inline;">
				<table cellpadding="0" cellspacing="0" border="0" width="100%" summary="Normal Mount Table">
				<tr>
					<td class="extlink" colspan="11">&nbsp;&nbsp;Mount: <a href="|FOLLOWERTYPE.MOUNT.0.NAME|.htm">|FOLLOWERTYPE.MOUNT.0.NAME|</a> (|FOLLOWERTYPE.MOUNT.0.RACE|)</td>
					<td class="c10yB" width="5%"><a name="#" onclick="CycleMount();">Expand</a>&nbsp;</td>
				</tr>
				</table>
				<span class="l2"><br /></span>
			</div>
			<div id="MountCompact" style="display:none;">
				<table cellpadding="0" cellspacing="0" border="0" width="100%" summary="Normal Mount Table">
				<tr>
					<td class="extlink" colspan="11">&nbsp;&nbsp;Mount: <a href="|FOLLOWERTYPE.MOUNT.0.NAME|.htm">|FOLLOWERTYPE.MOUNT.0.NAME|</a> (|FOLLOWERTYPE.MOUNT.0.RACE|)</td>
					<td class="c10yB" width="5%"><a name="#" onclick="CycleMount();">Collapse</a>&nbsp;</td>
				</tr>
				<tr>
					<td width="8%" class="c8swB">FORT:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.MOUNT.0.CHECK.FORTITUDE.TOTAL|</td>
					<td width="8%" class="c8swB">REF:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.MOUNT.0.CHECK.REFLEX.TOTAL|</td>
					<td width="8%" class="c8swB">WILL:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.MOUNT.0.CHECK.WILL.TOTAL|</td>
					<td width="8%" class="c8swB">HP:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.MOUNT.0.HP|</td>
					<td width="8%" class="c8swB">AC:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.MOUNT.0.AC.Total|</td>
					<td width="8%" class="c8swB">INIT:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.MOUNT.0.INITIATIVEMOD|</td>
				</tr>
|FOR,%wep,0,COUNT[FOLLOWERTYPE.MOUNT.0.EQTYPE.WEAPON]-1,1,0|
				<tr>
					<td colspan="2" class="c10swB">|FOLLOWERTYPE.MOUNT.0.WEAPON.%wep.NAME|</td>
					<td colspan="2" class="c8s">|FOLLOWERTYPE.MOUNT.0.WEAPON.%wep.TOTALHIT|</td>
					<td colspan="2" class="c10swB">DAMAGE:</td>
					<td colspan="2" class="c8s">|FOLLOWERTYPE.MOUNT.0.WEAPON.%wep.DAMAGE|</td>
					<td colspan="2" class="c10swB">CRITICAL:</td>
					<td colspan="2" class="c8s">|FOLLOWERTYPE.MOUNT.0.WEAPON.%wep.CRIT|/x|FOLLOWERTYPE.MOUNT.0.WEAPON.%wep.MULT|</td>
				</tr>
|ENDFOR|
				<tr>
					<td class="c9swB">Special:</td>
					<td class="l9s" colspan="12">&nbsp;&nbsp;|FOLLOWERTYPE.MOUNT.0.SPECIALLIST|</td>
				</tr>
				</table>
				<span class="l2"><br /></span>
			</div>
|%|
|%FOLLOWERTYPE.ANIMAL COMPANION|
|FOR,%anm,0,COUNT[FOLLOWERTYPE.ANIMAL COMPANION]-1,1,0|
			<div id="AnimalCompanionHeaderOnly" style="display:inline;">
				<table cellpadding="0" cellspacing="0" border="0" width="100%" summary="Animal Companion Table">
				<tr>
					<td class="extlink" colspan="11">&nbsp;&nbsp;Animal Companion: <a href="|FOLLOWERTYPE.ANIMAL COMPANION.%anm.NAME|.htm">|FOLLOWERTYPE.ANIMAL COMPANION.%anm.NAME|</a> (|FOLLOWERTYPE.ANIMAL COMPANION.%anm.RACE|)</td>
					<td class="c10yB" width="5%"><a name="#" onclick="CycleAnimalCompanion();">Expand</a>&nbsp;</td>
				</tr>
				</table>
				<span class="l2"><br /></span>
			</div>
			<div id="AnimalCompanionCompact" style="display:none;">
				<table cellpadding="0" cellspacing="0" border="0" width="100%" summary="Animal Companion Table">
				<tr>
					<td class="extlink" colspan="11">&nbsp;&nbsp;Animal Companion: <a href="|FOLLOWERTYPE.ANIMAL COMPANION.%anm.NAME|.htm">|FOLLOWERTYPE.ANIMAL COMPANION.%anm.NAME|</a> (|FOLLOWERTYPE.ANIMAL COMPANION.%anm.RACE|)</td>
					<td class="c10yB" width="5%"><a name="#" onclick="CycleAnimalCompanion();">Collapse</a>&nbsp;</td>
				</tr>
				<tr>
					<td width="8%" class="c8swB">FORT:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.ANIMAL COMPANION.%anm.CHECK.FORTITUDE.TOTAL|</td>
					<td width="8%" class="c8swB">REF:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.ANIMAL COMPANION.%anm.CHECK.REFLEX.TOTAL|</td>
					<td width="8%" class="c8swB">WILL:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.ANIMAL COMPANION.%anm.CHECK.WILL.TOTAL|</td>
					<td width="8%" class="c8swB">HP:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.ANIMAL COMPANION.%anm.HP|</td>
					<td width="8%" class="c8swB">AC:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.ANIMAL COMPANION.%anm.AC.Total|</td>
					<td width="8%" class="c8swB">INIT:</td>
					<td width="8%" class="c8wB">|FOLLOWERTYPE.ANIMAL COMPANION.%anm.INITIATIVEMOD|</td>
				</tr>
|FOR,%wep,0,COUNT[FOLLOWERTYPE.ANIMAL COMPANION.%anm.EQTYPE.WEAPON]-1,1,0|
				<tr>
					<td colspan="2" class="c10swB">|FOLLOWERTYPE.ANIMAL COMPANION.%anm.WEAPON.%wep.NAME|</td>
					<td colspan="2" class="c8s">|FOLLOWERTYPE.ANIMAL COMPANION.%anm.WEAPON.%wep.TOTALHIT|</td>
					<td colspan="2" class="c9swB">DAMAGE:</td>
					<td colspan="2" class="c8s">|FOLLOWERTYPE.ANIMAL COMPANION.%anm.WEAPON.%wep.DAMAGE|</td>
					<td colspan="2" class="c9swB">CRITICAL:</td>
					<td colspan="2" class="c8s">|FOLLOWERTYPE.ANIMAL COMPANION.%anm.WEAPON.%wep.CRIT|/x|FOLLOWERTYPE.ANIMAL COMPANION.%anm.WEAPON.%wep.MULT|</td>
				</tr>
|ENDFOR|
				<tr>
					<td class="c9swB">Special:</td>
					<td class="l9s" colspan="11">&nbsp;&nbsp;|FOLLOWERTYPE.ANIMAL COMPANION.%anm.SPECIALLIST|<br /></td>
				</tr>
				</table>
				<span class="l2"><br /></span>
			</div>
|ENDFOR|
<!-- STOP Companions Table1 -->
|%|
|%FOLLOWERTYPE.FOLLOWERS|
			<table width="100%" cellspacing="0" cellpadding="0" summary="Henchmen Table">
			<tr>
				<td class="c10yB"><a name="#" onClick="ToggleDIV('henchmen');">HENCHMEN</a></td>
			</tr>
			<tr>
				<td class="lt8s" width="70%">
					<div id="henchmen" class="lt8s" style="display:none;">
|FOR,%follower,0,COUNT[FOLLOWERTYPE.FOLLOWERS]-1,1,0|
|FOLLOWERTYPE.FOLLOWERS.%follower.NAME|,&nbsp;
|ENDFOR|
					</div>
				</td>
			</tr>
			</table>
|%|
<!-- STOP Companions Table1 -->
<!-- MISC Companions table -->
|%MISC.COMPANIONS|
			<table width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="c10yB"><a name="#" onClick="ToggleDIV('other.companions');">OTHER COMPANIONS</a></td>
			</tr>
			<tr>
				<td class="lt8s">
					<div id="other.companions" style="display:none;">
					<span class="notes">|MISC.COMPANIONS|</span>
					</div>
				</td>
			</tr>
			</table>
|%|
<!-- END MISC Companions table -->
<!-- MISC magic table -->
|%MISC.MAGIC|
			<table width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="c10yB"><a name="#" onClick="ToggleDIV('misc.magic');">MAGIC</a></td>
			</tr>
			<tr>
				<td class="l8">
					<div id="misc.magic" style="display:none;">
						<span class="notes">|MISC.MAGIC|</span>
						<div id="MagicNotes" class="l8" style="display:inline;">|NOTE.ALL.<b>.</b>.<br />|</div>
					</div>
				</td>
			</tr>
			</table>
|%|
<!-- END MISC magic table -->
<!-- PROHIBITED table -->
|%PROHIBITEDLIST|
			<table width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="c10yB"><a name="#" onClick="ToggleDIV('PROHIBITED');">PROHIBITED</a></td>
			</tr>
			<tr>
				<td class="lt8s">
					<div id="PROHIBITED" class="l8" style="display:none;">
						&nbsp;&nbsp;|PROHIBITEDLIST|<br />
					</div>
				</td>
			</tr>
			</table>
|%|
<!-- END PROHIBITED table -->
<!-- Start Turning Tables -->
|IIF(HASFEAT:Turn Undead)|
			<div id="Turn Undead_header" style="display:none;"></div>
			<div id="Turn Undead" style="display:inline;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Turn Undead)|
			<div id="Turn Undead_header" style="display:none;"></div>
			<div id="Turn Undead" style="display:inline;"></div>
|ENDIF|
|ENDIF|
|IIF(HASFEAT:Rebuke Undead)|
			<div id="Rebuke Undead_header" style="display:none;"></div>
			<div id="Rebuke Undead" style="display:inline;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Rebuke Undead)|
			<div id="Rebuke Undead_header" style="display:none;"></div>
			<div id="Rebuke Undead" style="display:inline;"></div>
|ENDIF|
|ENDIF|
|IIF(HASFEAT:Turn Air)|
			<div id="Turn Air_header" style="display:inline;"></div>
			<div id="Turn Air" style="display:none;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Turn Air)|
			<div id="Turn Air_header" style="display:inline;"></div>
			<div id="Turn Air" style="display:none;"></div>
|ENDIF|
|ENDIF|
|IIF(HASFEAT:Rebuke Air)|
			<div id="Rebuke Air_header" style="display:inline;"></div>
			<div id="Rebuke Air" style="display:none;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Rebuke Air)|
			<div id="Rebuke Air_header" style="display:inline;"></div>
			<div id="Rebuke Air" style="display:none;"></div>
|ENDIF|
|ENDIF|
|IIF(HASFEAT:Turn Earth)|
			<div id="Turn Earth_header" style="display:inline;"></div>
			<div id="Turn Earth" style="display:none;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Turn Earth)|
			<div id="Turn Earth_header" style="display:inline;"></div>
			<div id="Turn Earth" style="display:none;"></div>
|ENDIF|
|ENDIF|
|IIF(HASFEAT:Rebuke Earth)|
			<div id="Rebuke Earth_header" style="display:inline;"></div>
			<div id="Rebuke Earth" style="display:none;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Rebuke Earth)|
			<div id="Rebuke Earth_header" style="display:inline;"></div>
			<div id="Rebuke Earth" style="display:none;"></div>
|ENDIF|
|ENDIF|
|IIF(HASFEAT:Turn Fire)|
			<div id="Turn Fire_header" style="display:inline;"></div>
			<div id="Turn Fire" style="display:none;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Turn Fire)|
			<div id="Turn Fire_header" style="display:inline;"></div>
			<div id="Turn Fire" style="display:none;"></div>
|ENDIF|
|ENDIF|
|IIF(HASFEAT:Rebuke Fire)|
			<div id="Rebuke Fire_header" style="display:inline;"></div>
			<div id="Rebuke Fire" style="display:none;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Rebuke Fire)|
			<div id="Rebuke Fire_header" style="display:inline;"></div>
			<div id="Rebuke Fire" style="display:none;"></div>
|ENDIF|
|ENDIF|
|IIF(HASFEAT:Turn Water)|
			<div id="Turn Water_header" style="display:inline;"></div>
			<div id="Turn Water" style="display:none;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Turn Water)|
			<div id="Turn Water_header" style="display:inline;"></div>
			<div id="Turn Water" style="display:none;"></div>
|ENDIF|
|ENDIF|
|IIF(HASFEAT:Rebuke Water)|
			<div id="Rebuke Water_header" style="display:inline;"></div>
			<div id="Rebuke Water" style="display:none;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Rebuke Water)|
			<div id="Rebuke Water_header" style="display:inline;"></div>
			<div id="Rebuke Water" style="display:none;"></div>
|ENDIF|
|ENDIF|
|IIF(HASFEAT:Turn Plant)|
			<div id="Turn Plant_header" style="display:inline;"></div>
			<div id="Turn Plant" style="display:none;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Turn Plant)|
			<div id="Turn Plant_header" style="display:inline;"></div>
			<div id="Turn Plant" style="display:none;"></div>
|ENDIF|
|ENDIF|
|IIF(HASFEAT:Rebuke Plant)|
			<div id="Rebuke Plant_header" style="display:inline;"></div>
			<div id="Rebuke Plant" style="display:none;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Rebuke Plant)|
			<div id="Rebuke Plant_header" style="display:inline;"></div>
			<div id="Rebuke Plant" style="display:none;"></div>
|ENDIF|
|ENDIF|
|IIF(HASFEAT:Turn Outsider)|
			<div id="Turn Outsider_header" style="display:inline;"></div>
			<div id="Turn Outsider" style="display:none;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Turn Outsider)|
			<div id="Turn Outsider_header" style="display:inline;"></div>
			<div id="Turn Outsider" style="display:none;"></div>
|ENDIF|
|ENDIF|
|IIF(HASFEAT:Rebuke Outsider)|
			<div id="Rebuke Outsider_header" style="display:inline;"></div>
			<div id="Rebuke Outsider" style="display:none;"></div>
|ELSE|
|IIF(ABILITYALLLIST.Special Ability.DESC:Rebuke Outsider)|
			<div id="Rebuke Outsider_header" style="display:inline;"></div>
			<div id="Rebuke Outsider" style="display:none;"></div>
|ENDIF|
|ENDIF|
<script language="javascript" type="text/javascript">TurnTablePrintAll();</script>
<!-- Stop Turning Tables -->

<!-- START Ammunition stats (main table row 3) -->
			<!-- This template not intended to be a paper copy, so ammo is fairly useless -->
			<div id="ammunition" style="display:none;"> 
				<table width="100%" cellspacing="0">
				<tr>
					<td colspan="4" class="c8mB">AMMUNITION</td>
				</tr>
				<tr>
					<td width="45%" class="l7b">|EQ.IS.Ammunition.0.NAME| <script language="javascript" type="text/javascript">if('|EQ.IS.Ammunition.0.QTY|'!='') document.write('('+StripZero('|EQ.IS.Ammunition.0.QTY|')+')');</script><br class="l2" /></td>
					<td class="b5" nowrap="nowrap">&#9744;&#9744;&#9744;&#9744;&#9744; &#9744;&#9744;&#9744;&#9744;&#9744;<br class="l2" />&#9744;&#9744;&#9744;&#9744;&#9744; &#9744;&#9744;&#9744;&#9744;&#9744;</td>
					<td width="45%" class="l7b">|EQ.IS.Ammunition.1.NAME| <script language="javascript" type="text/javascript">if('|EQ.IS.Ammunition.1.QTY|'!='') document.write('('+StripZero('|EQ.IS.Ammunition.1.QTY|')+')');</script><br class="l2" /></td>
					<td class="b5" nowrap="nowrap">&#9744;&#9744;&#9744;&#9744;&#9744; &#9744;&#9744;&#9744;&#9744;&#9744;<br class="l2" />&#9744;&#9744;&#9744;&#9744;&#9744; &#9744;&#9744;&#9744;&#9744;&#9744;</td>
				</tr>
<!--				<tr>
					<td width="45%" class="l7b">|EQTYPE.Ammunition.2.NAME| <script language="javascript" type="text/javascript">if('|EQTYPE.Ammunition.2.QTY|'!='') document.write('('+StripZero('|EQTYPE.Ammunition.2.QTY|')+')');</script><br /></td>
			<td class="b5" nowrap="nowrap">&#9744;&#9744;&#9744;&#9744;&#9744; &#9744;&#9744;&#9744;&#9744;&#9744;<br />&#9744;&#9744;&#9744;&#9744;&#9744; &#9744;&#9744;&#9744;&#9744;&#9744;</td>
					<td width="45%" class="l7b">|EQTYPE.Ammunition.3.NAME| <script language="javascript" type="text/javascript">if('|EQTYPE.Ammunition.3.QTY|'!='') document.write('('+StripZero('|EQTYPE.Ammunition.3.QTY|')+')');</script><br /></td>
			<td class="b5" nowrap="nowrap">&#9744;&#9744;&#9744;&#9744;&#9744; &#9744;&#9744;&#9744;&#9744;&#9744;<br />&#9744;&#9744;&#9744;&#9744;&#9744; &#9744;&#9744;&#9744;&#9744;&#9744;</td>
				</tr>
				<tr>
					<td width="45%" class="l7b">|EQTYPE.Ammunition.4.NAME| <script language="javascript" type="text/javascript">if('|EQTYPE.Ammunition.4.QTY|'!='') document.write('('+StripZero('|EQTYPE.Ammunition.4.QTY|')+')');</script><br /></td>
					<td class="b5" nowrap="nowrap">&#9744;&#9744;&#9744;&#9744;&#9744; &#9744;&#9744;&#9744;&#9744;&#9744;<br />&#9744;&#9744;&#9744;&#9744;&#9744; &#9744;&#9744;&#9744;&#9744;&#9744;</td>
					<td width="45%" class="l7b">|EQTYPE.Ammunition.5.NAME| <script language="javascript" type="text/javascript">if('|EQTYPE.Ammunition.5.QTY|'!='') document.write('('+StripZero('|EQTYPE.Ammunition.5.QTY|')+')');</script><br /></td>
					<td class="b5" nowrap="nowrap">&#9744;&#9744;&#9744;&#9744;&#9744; &#9744;&#9744;&#9744;&#9744;&#9744;<br />&#9744;&#9744;&#9744;&#9744;&#9744; &#9744;&#9744;&#9744;&#9744;&#9744;</td>
				</tr>
-->
				</table>
			</div>
<!-- END Ammunition stats (main table row 3) -->
				<br /><span class="header"> PCGen Character Template by ROG, mods/maint by Arcady, Barak &amp; Dimrill.<br />
		       		For suggestions please post to pcgen@yahoogroups.com with "OS Suggestion" in the subject line.</span>
			</td>
		</tr>
<!-- END MAIN table -->
		</td> <!-- Left table bottom -->
	</tr>
	</table>
</td> <!-- Main Table Left finished -->
<td> <!-- Main Table Right Start -->
	<table width="100%" cellspacing="0" cellpadding="0">
	<tr valign="top">
		<td width="100%">
			<table id="config" width="100%" border="0" cellspacing="1" cellpadding="1">
			<tr><td class="c6"><span class="header">Created using <a href="http://pcgen.org/">PCGen</a> |EXPORT.VERSION| on |EXPORT.DATE|</td></tr>
			<tr id="config1" class="c6">
				<td class="c6">
					<input id="button4" type="button" value="Full Bio Header" name="button4" onclick="ToggleDIV('FullWideHeader');ToggleDIV('NarrowLeftHeader');" />&nbsp;
					<input id="button1" type="button" value="Color Key" name="button1" onclick="ToggleDIV('ColorKey');" />
					<input id="button0" type="button" value="Print" name="button0" onclick="window.print();" />
					<input id="button9" type="button" value="Compact Stats" name="button9" onclick="ToggleDIV('AbilityDiv');ToggleDIV('CompactAbilityDivName');ToggleDIV('CompactAbilityDiv');ToggleDIV('ACDiv');ToggleDIV('SavesDiv');ToggleDIV('AttackDiv');ToggleDIV('CompactSavesDiv');ToggleDIV('NarrowLeftHeader');" />
				</td>
			</tr>
|IIF(HASVAR:RageLVL)|
   			<script language="javascript" type="text/javascript">BbnButtons();</script>
|ENDIF|
|%VAR.RageTimes.GTEQ.1|
			<script language="javascript" type="text/javascript">BbnButtons();</script>
|%|
			<script language="javascript" type="text/javascript">DefFightingButtons();</script>
			<script language="javascript" type="text/javascript">SpellArmorButtons();</script>
			</table>
		</td>
	</tr>
	<tr valign="top">
		<td width="100%">
<!-- The table being started here called SkillsCompactNot is really a table containing all sorts of stuff as the right 1/2 of the screen -->
			<table id="SkillsCompactNot" cellpadding="0" cellspacing="0" border="0" width="100%">
			<tr>
				<td>
<!-- START Skills Table, one of the three divs should be inline, while the other two as none -->
					<div id="SkillsHeaderOnly" style="display:none;">
						<script language="javascript" type="text/javascript">HeaderSkillPrint();</script>
					</div>
					<div id="SkillsCompactdiv" style="display:inline;">
						<script language="javascript" type="text/javascript">CompactSkillPrint();</script>
					</div>
					<div id="SkillsComprehensive" style="display:none;">
						<script language="javascript" type="text/javascript">ComprehensiveSkillPrint();</script>
					</div>
<!-- END Skills Table, one of the three divs should be inline, while the other two as none -->
				</td>
			</tr>
<!-- End of table that just contains and aligns the compact skills table -->
|%TEMPLATE.1|
<!-- TEMPLATE table -->
		<tr><td>
			<table width="100%" cellspacing="0" cellpadding="3">
			<tr>
				<td class="c9wB">TEMPLATES</td>
			</tr>
			<tr>
				<td width="70%" class="t7s">|TEMPLATELIST|<br /></td>
			</tr>
			</table>
		</td></tr>
<!-- END TEMPLATE table -->
|%|
<!-- Start of Temporary Bonuses table -->
|%COUNT[TEMPBONUSNAMES]|
		<tr><td>
			<table width="100%" cellspacing="0" cellpadding="2">
			<tr>
				<td class="c9wB">Temporary Bonuses Applied</td>
			</tr>
			<tr>
				<td width="100%" class="l8"> 
|FOR,%temp,0,COUNT[TEMPBONUSNAMES]-1,1,0|
|IIF(%temp:0)|
|ELSE|
	&bull;&nbsp;
|ENDIF|
|TEMPBONUS.%temp|
|ENDFOR|
				</td>
			</tr>
			</table>
		</td></tr>
|%|
<!-- Start of special abilities table (still inside the SkillsCompact Table) -->
|IIF(count("ABILITIES";"CATEGORY=Special Ability";"TYPE=SpecialAttack")>0)|
		<tr><td>
			<table width="100%" cellspacing="0" cellpadding="2">
			<tr>
				<td class="c9wB">SPECIAL ATTACKS</td>
			</tr>
			<tr>
				<td width="100%" class="l7s"> 
|FOR,%specialAttack,0,count("ABILITIES","CATEGORY=Special Ability","TYPE=SpecialAttack")-1,1,0|
|IIF(%specialAttack:0)|
|ELSE|
	&bull;&nbsp;
|ENDIF|
<a class="lh9" name="#" onclick="ToggleLayer('SPECIAL_ATTACKS_Table','SPECIAL_ATTACKS_Details','%specialAttack');">|ABILITYALL.Special Ability.%specialAttack.TYPE=SpecialAttack|</a>&nbsp;
|ENDFOR|
				</td>
			</tr>
			</table>
			<div id="SPECIAL_ATTACKS_Table" style="display:none;">
				<table border=3 bordercolor="#CC00CC" width="100%" cellpadding=3 cellspacing=5>
				<tr>
					<td width="100%" cellpadding=3><span id="SPECIAL_ATTACKS_Details" class="l9">replaced text</span></td>
				</tr>
				</table>
			</div>
		</td></tr>
|ENDIF|
<!-- START Animal Tricks Table -->
|IIF(count("ABILITIES";"CATEGORY=Special Ability";"TYPE=AnimalTrick")>0)|
		<tr>
			<td class="lt9mB" width="100%">
				<table width="100%" cellspacing="0" cellpadding="0">
				<tr>
					<td class="c10yB"><a name="#" onclick="ToggleDIV('AnimalTricks');">ANIMAL TRICKS</a></td>
				</tr>
				<tr>
					<td width="100%" class="l8">
						<div id="AnimalTricks" style="display:inline;" class="l8">
								  |ABILITYALLLIST.Special Ability.TYPE=AnimalTrick|
						</div>
					</td>
				</tr>
				</table>
			</td>
		</tr>
|ENDIF|
<!-- STOP Animal Tricks Table -->
|IIF(count("ABILITIES";"CATEGORY=Special Ability")>0)|
		<tr><td>
			<table width="100%" cellspacing="0" cellpadding="2">
			<tr>
				<td width="20%" class="c9wB">&nbsp;</td>
				<td width="60%" class="c9wB">SPECIAL QUALITIES</td>
				<td width="20%" class="c9wB"><div class="c9wB" id="ShowSources">Show Sources: <a name="#" class="c10yB" onclick="ToggleSources();return('false');">Off</a></div></td>
			</tr>
			<tr>
				<td width="100%" class="l7s" colspan="3">
|FOR,%bar,0,(count("ABILITIES","CATEGORY=Special Ability","VISIBILITY=DEFAULT[or]VISIBILITY=OUTPUT_ONLY")-1),1,0|
|IIF(%bar:0)|
|ELSE|
|IIF(count("ABILITIES";"CATEGORY=Special Ability";"VISIBILITY=DEFAULT[or]VISIBILITY=OUTPUT_ONLY")-count("ABILITIES";"CATEGORY=Special Ability";"TYPE=SpecialAttack")>%bar)|
	&bull;&nbsp;
|ENDIF|
|ENDIF|
					<a class="lh9" name="#" onclick="ToggleLayer('SPECIAL_QUALITIES_Table','SPECIAL_QUALITIES_Details','%bar');">|ABILITYALL.Special Ability.VISIBLE.%bar.!TYPE=SpecialAttack|</a>&nbsp;
|ENDFOR|
				</td>
			</tr>
			</table>
			<div id="SPECIAL_QUALITIES_Table" style="display:none;">
				<table border=3 bordercolor="#00CCCC" width="100%" cellpadding=3 cellspacing=5>
				<tr>
					<td width="100%" cellpadding=3><span id="SPECIAL_QUALITIES_Details" class="l9">replaced text</span></td>
				</tr>
				</table>
			</div>
		</td></tr>
|ENDIF|

|%COUNT[SA]|
		<tr><td>
			<table width="100%" cellspacing="0" cellpadding="2">
			<tr>
				<td class="c9wB">SPECIAL ABILITIES</td>
			</tr>
			<tr>
				<td width="100%" class="l7s">|SPECIALLIST|</td>
			</tr>
			</table>
		</td></tr>
|%|
<!-- End of Special Abilities table (still inside the SkillsCompact Table) -->
<!-- START feats table -->
		<tr><td>
			<div id="FeatsHeaderOnly" style="display:none;">
				<table cellpadding="0" cellspacing="0" border="0" width="100%">
				<tr>
					<td colspan="1" class="c10yB"><a name="#" onClick="CycleFeats();">FEATS</a></td>
				</tr>
				</table>
			</div>
			<div id="FeatsCompactDiv" style="display:inline;">
				<table cellpadding="0" cellspacing="0" border="0" width="100%">
				<tr>
					<td colspan="1" class="c10yB"><a name="#" onClick="CycleFeats();">FEATS</a></td>
				</tr>
				<tr>
					<td class="l8s">|FEATALLLIST|</td>
				</tr>
				</table>
			</div>
			<div id="FeatsComprehensive" style="display:none;">
				<table width="100%" cellspacing="0" cellpadding="2">
    				<tr>
	    				<td class="c10yB" colspan="2"><a name="#" onClick="CycleFeats();">FEATS</a></td>
    				</tr>
    				<tr>
     					<td class="lt8sB" width="20%">NAME</td>
     					<td class="lt8sB" width="80%">SHORT DESCRIPTION</td>
    				</tr>
|FOR,%feat,0,COUNT[FEATSALL.VISIBLE]-1,1,0|
|OIF(EVEN:%feat,<tr bgcolor="#DDDDDD">,<tr bgcolor="white">)|
     					<td valign="top" class="l8s">|FEATALL.VISIBLE.%feat|</td>
     					<td valign="top" align="left" class="l8s">|FEATALL.VISIBLE.%feat.DESC|</td>
    				</tr>
|ENDFOR|
				</table>
			</div>
			<div id="FeatsBenefitDiv" style="display:none;">
				<table width="100%" cellspacing="0" cellpadding="2">
    				<tr>
	    				<td class="c10yB" colspan="2"><a name="#" onClick="CycleFeats();">FEATS</a></td>
    				</tr>
    				<tr>
     					<td class="lt8sB" width="20%">NAME</td>
     					<td class="lt8sB" width="80%">LONGER BENEFIT DESCRIPTION</td>
    				</tr>
|FOR,%feat,0,COUNT[FEATSALL.VISIBLE]-1,1,0|
|OIF(EVEN:%feat,<tr bgcolor="#DDDDDD">,<tr bgcolor="white">)|
     					<td valign="top" class="l8s">|FEATALL.VISIBLE.%feat|</td>
     					<td valign="top" align="left" class="l8s">|FEATALL.VISIBLE.%feat.BENEFIT|</td>
    				</tr>
|ENDFOR|
				</table>
			</div>
		</td></tr>
<!-- STOP Feat Table -->
|%VAR.BarbRageTimesLVL.INTVAL|;
<!-- START Barb Rage Stats (main table row 2) -->
		<tr><td>
			<div id="RageDiv_header" style="display:none;"></div>
			<div id="RageDiv" style="display:inline;">
				<script language="javascript" type="text/javascript">RagePrint();</script>
			</div>
		</td></tr>
<!-- END Barb Rage Stats -->
|%|
<!-- Start of psion abilities table (still inside the Right Table) -->
|%VAR.TOTALPOWERPOINTS.GTEQ.1|
		<tr><td>
			<table width="100%" border="0" cellpadding="2" cellspacing="0">
			<tr>
				<td width="5%" class="r9wB">&nbsp;</td>
				<td width="1%" class="r9wB" id="PowerPointCounter" align="right"><input class="statmodbutton" type=button value="+" name=AddPPBtutton onclick="PowerPointPlus();"><br /><input class="statmodbutton" type=button value="-" name=SubPPButton onclick="PowerPointMinus();"></td>
				<td width="25px" id="CurPowerPointsTD" class="c9s">|VAR.TOTALPOWERPOINTS.INTVAL|</td>
				<td width="15%" class="l9wB">Current<br />Power Points</td>
				<td width="15%" class="r9wB">Total PP</td>
				<td width="25px" class="c9s">|VAR.TOTALPOWERPOINTS.INTVAL|</td>
				<td width="15%" class="r9wB">Base PP</td>
				<td width="25px" class="c9s">|VAR.BASEPOWERPOINTS.INTVAL|</td>
				<td width="15%" class="r9wB">Bonus PP</td>
				<td width="25px" class="c9s">|VAR.BONUSPOWERPOINTS.INTVAL|</td>
				<td width="4%" class="r9wB">&nbsp;</td>
			 </tr>
			</table>
		</td></tr>
|%|
<!-- End of psion abilities table (still inside the SkillsCompact Table) -->
<!-- ================================================================ -->
		<tr><td>
<!-- Start of compact spells (still inside the SkillsCompact Table) -->
<!-- Start Racial Innate Spells -->
|FOR,%spellrace,COUNT[SPELLRACE],COUNT[SPELLRACE],1,0|
|IIF(%spellrace:0)|
	<!-- No innate spells -->
|ELSE|
|FOR,%spellbook,1,1,1,1|
|FOR,%class,0,0,1,1|
|FOR,%level,0,0,1,1|
|%SPELLLISTBOOK.%class.%level.%spellbook|
<!-- START Spell list Header Table (Racial Innate) -->
	<table width="100%" cellspacing="0" cellpadding="2" summary="Spell List">
 	<tr>
  		<td class="c12wB">Racial Innate Spells</td>
 	</tr>
 	<tr>
  		<td class="l9" border="1">
    			<div id="RacialInnateSpellsCompact" style="display:inline;">
    			</div>
		</td>
 	</tr>
	</table>
<!-- End Spell List Header Table (Racial Innate) -->
<!-- Start Racial Innate Spell listing -->
|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,1,0|
	<div id="Racial.Innate.|%spell|" style="display:none;" width="100%">
		<table width="100%" cellspacing="0" cellpadding="2" border=3 bordercolor="#CCCC00">
		<tr>
			<td class="lt9mB" width="30%"><a name="#" onclick="ToggleDIV('Racial.Innate.|%spell|');">|SPELLMEM.%class.%spellbook.%level.%spell.NAME|</a></td>
			<td class="ct8" width="5%"><i>DC:</i><br/>|SPELLMEM.%class.%spellbook.%level.%spell.DC|</td>
			<td class="ct8" width="5%"><i>Save:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO|</td>
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.CASTINGTIME:1 standard action)|
			<td class="ct8" width="5%"><i>Time:</i><br />std</td>
|ELSE|
  			<td class="ct8" width="5%"><i>Time:</i> |SPELLMEM.%class.%spellbook.%level.%spell.CASTINGTIME|<br /></td>
|ENDIF|
			<td class="ct8" width="10%"><i>Duration:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.DURATION|</td>
			<td class="ct8" width="5%"><i>Comp:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.COMPONENTS|</td>
			<td class="ct8" width="5%"><i>SR:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.SR|</td>
			<td class="ct8" width="5%"><i>School:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.SCHOOL|</td>
		</tr>
		<tr>
			<td colspan="4" class="lt8"><i>Target Area:</i>&nbsp;&nbsp; |SPELLMEM.%class.%spellbook.%level.%spell.TARGET|<br /></td>
			<td colspan="2" class="ct8"><i>Range:</i> |SPELLMEM.%class.%spellbook.%level.%spell.RANGE|</td>
			<td colspan="2" class="rt8"><i>Source:</i>&nbsp;&nbsp;|SPELLMEM.%class.%spellbook.%level.%spell.SOURCESHORT| |SPELLMEM.%class.%spellbook.%level.%spell.SOURCEPAGE|</td>
		</tr>
		<tr>
			<td colspan="6" class="lt8"><i>Effect:</i>&nbsp;&nbsp;|SPELLMEM.%class.%spellbook.%level.%spell.EFFECT|</td>
			<td colspan="2" class="rt8"><i>Caster Level:</i> |SPELLMEM.%class.%spellbook.%level.%spell.CASTERLEVEL|<br /></td>
		</tr>
		</table>
	</div>
|ENDFOR|
|%|
|ENDFOR|
|ENDFOR|
|ENDFOR|
<!-- End Racial Innate Spells -->
<!-- Start Other Innate Spells -->
|FOR,%spellbook,2,COUNT[SPELLBOOKS]-1,1,0|
|FOR,%class,0,0,1,1|
|FOR,%level,0,0,1,1|
|%SPELLLISTBOOK.%class.%level.%spellbook|
<!-- START Spell list Header Table (Other Innate) -->
	<table width="100%" cellspacing="0" cellpadding="2">
	<tr>
		<td class="c12wB">|SPELLBOOKNAME.%spellbook| Innate Spells</td>
 	<tr>
  		<td class="l9" border="1">
    			<div id="ClassInnateSpellsCompact" style="display:inline;">
    			</div>
		</td>
	</tr>
	</table>

|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,1,0|
	<div id="Class.Innate.|%spellbook|.|%spell|" style="display:none;" width="100%">
		<table width="100%" cellspacing="0" cellpadding="2" border=3 bordercolor="#8888CC">
		<tr>
			<td class="lt9mB" width="30%"><a name="#" onclick="ToggleDIV('Class.Innate.|%spellbook|.|%spell|');">|SPELLMEM.%class.%spellbook.%level.%spell.NAME|</a></td>
			<td class="ct8" width="5%"><i>DC:</i><br/>|SPELLMEM.%class.%spellbook.%level.%spell.DC|</td>
			<td class="ct8" width="5%"><i>Save:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO|</td>
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.CASTINGTIME:1 standard action)|
			<td class="ct8" width="5%"><i>Time:</i><br />std</td>
|ELSE|
  			<td class="ct8" width="5%"><i>Time:</i> |SPELLMEM.%class.%spellbook.%level.%spell.CASTINGTIME|<br /></td>
|ENDIF|
			<td class="ct8" width="10%"><i>Duration:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.DURATION|</td>
			<td class="ct8" width="5%"><i>Comp:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.COMPONENTS|</td>
			<td class="ct8" width="5%"><i>SR:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.SR|</td>
			<td class="ct8" width="5%"><i>School:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.SCHOOL|</td>
		</tr>
		<tr>
			<td colspan="4" class="lt8"><i>Target Area:</i>&nbsp;&nbsp; |SPELLMEM.%class.%spellbook.%level.%spell.TARGET|<br /></td>
			<td colspan="2" class="ct8"><i>Range:</i> |SPELLMEM.%class.%spellbook.%level.%spell.RANGE|</td>
			<td colspan="2" class="rt8"><i>Source:</i>&nbsp;&nbsp;|SPELLMEM.%class.%spellbook.%level.%spell.SOURCESHORT| |SPELLMEM.%class.%spellbook.%level.%spell.SOURCEPAGE|</td>
		</tr>
		<tr>
			<td colspan="6" class="lt8"><i>Effect:</i>&nbsp;&nbsp;|SPELLMEM.%class.%spellbook.%level.%spell.EFFECT|</td>
			<td colspan="2" class="rt8"><i>Caster Level:</i> |SPELLMEM.%class.%spellbook.%level.%spell.CASTERLEVEL|<br /></td>
		</tr>
		</table>
	</div>
|ENDFOR|

|%|
|ENDFOR|
|ENDFOR|
|ENDFOR|
<!-- End Other Innate Spells -->
|ENDIF|
|ENDFOR|
<!-- End Innate Spells -->

<!-- Start Regular Spells -->
	<table width="100%" cellspacing="0" cellpadding="2">
	<tr>
		<td class="c12wB">Spells</td>
 	<tr>
  		<td class="l9" border="1">
|FOR,%class,COUNT[SPELLRACE],COUNT[CLASSES],1,0|
    			<div id="MainSpellsHeader.|SPELLLISTCLASS.%class|" style="display:inline; border:2px;">
    			</div>
    			<div id="MainSpellsCompact.|SPELLLISTCLASS.%class|" style="display:inline; border:3px;">
    			</div>
|ENDFOR|
		</td>
	</tr>
	</table>
<div id="SpellBookComprehensive">
|FOR,%spellbook,0,0,1,0|
|FOR,%class,COUNT[SPELLRACE],COUNT[SPELLRACE]+COUNT[CLASSES]-1,1,1|
|%SPELLLISTCLASS.%class|
<!-- Start Known Spells -->
<table width="100%" cellspacing="0" cellpadding="2" summary="Spell List">
|FOR,%level,0,MAXSPELLLEVEL.%class,1,1|
|FOR,%spellcount,COUNT[SPELLSINBOOK.%class.%spellbook.%level],COUNT[SPELLSINBOOK.%class.%spellbook.%level],1,0|
|IIF(%spellcount:0)|
|ELSE|
 <tr>
  <td colspan="10" class="c9wB">
|FOR,%spell,0,COUNT[SPELLSINBOOK.%class.%spellbook.%level]-1,1,0|
	<div id="Class.Regular.|%class|.|%spellbook|.|%spell|.|%level|" style="display:none;" width="100%">
		<table width="100%" cellspacing="0" cellpadding="2" border=3 bordercolor="#8888CC">
		<tr>
			<td class="lt9mB" width="25%">|SPELLMEM.%class.%spellbook.%level.%spell.BONUSSPELL| 
				<a name="#" onclick="ToggleDIV('Class.Regular.|%class|.|%spellbook|.|%spell|.|%level|');">|SPELLMEM.%class.%spellbook.%level.%spell.NAME|</a></td>
  			<td class="ct8" width="5%"><i>Lvl:</i><br />|%level|</td>
			<td class="ct8" width="5%"><i>DC:</i><br/>|SPELLMEM.%class.%spellbook.%level.%spell.DC|</td>
			<td class="ct8" width="5%"><i>Save:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.SAVEINFO|</td>
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.CASTINGTIME:1 standard action)|
			<td class="ct8" width="5%"><i>Time:</i><br />std</td>
|ELSE|
  			<td class="ct8" width="5%"><i>Time:</i> |SPELLMEM.%class.%spellbook.%level.%spell.CASTINGTIME|<br /></td>
|ENDIF|
			<td class="ct8" width="10%"><i>Duration:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.DURATION|</td>
			<td class="ct8" width="5%"><i>Comp:&nbsp;</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.COMPONENTS|</td>
			<td class="ct8" width="5%"><i>SR:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.SR|</td>
			<td class="ct8" width="10%"><i>School:</i><br />|SPELLMEM.%class.%spellbook.%level.%spell.SCHOOL|</td>
		</tr>
		<tr>
			<td colspan="5" class="lt8"><i>Target Area:</i>&nbsp;&nbsp; |SPELLMEM.%class.%spellbook.%level.%spell.TARGET|<br /></td>
|IIF(SPELLLISTTYPE.%class:Psionic)|
			<td colspan="1" class="ct8">
|FOR,%ppcost,(%level*2)-1,(%level*2)-1,1,1|
|IIF(%ppcost:-1)|
		<i>PP:</i> 0/1
|ELSE|
		<i>PP:</i> %ppcost
|ENDIF|
|ENDFOR|
  			</td>
			<td colspan="1" class="ct8">
|ELSE|
			<td colspan="2" class="ct8">
|ENDIF|
						    <i>Range:</i> |SPELLMEM.%class.%spellbook.%level.%spell.RANGE|</td>
			<td colspan="2" class="rt8"><i>Source:</i>&nbsp;&nbsp;|SPELLMEM.%class.%spellbook.%level.%spell.SOURCESHORT| |SPELLMEM.%class.%spellbook.%level.%spell.SOURCEPAGE|</td>
		</tr>
		<tr>
|IIF(SPELLMEM.%class.%spellbook.%level.%spell.COST:0)|
			<td colspan="7" class="lt8"><i>Effect:</i>&nbsp;&nbsp;|SPELLMEM.%class.%spellbook.%level.%spell.EFFECT|</td>
|ELSE|
			<td colspan="5" class="lt8"><i>Effect:</i>&nbsp;&nbsp;|SPELLMEM.%class.%spellbook.%level.%spell.EFFECT|</td>
			<td colspan="2" class="lt8"><i>COST:</i>&nbsp;&nbsp;|SPELLMEM.%class.%spellbook.%level.%spell.COST|</td>
|ENDIF|
			<td colspan="2" class="rt8"><i>Caster Level:</i> |SPELLMEM.%class.%spellbook.%level.%spell.CASTERLEVEL|<br /></td>
		</tr>
		</table>
	</div>
|ENDFOR|
|ENDIF|
|ENDFOR|
|ENDFOR|
  </td>
 </tr>
	 <!-- End Class spell block -->
</table>
|%|
|ENDFOR|
|ENDFOR|
<!-- End Known Spells -->
		</td></tr>
	</table>  <!-- End of Right half of page skills table (finally!) -->
	</td>
</tr>
</table>  <!-- End the whole table (finally!) -->
<!-- Hack to get Firefox to run the body.onload script if some images were unavailable and unloadable like die.png -->
<script language="javascript" type="text/javascript">Compact();</script>
</body>
</html>
