/*
 * SelectPanel.java
 *
 * Created on June 23, 2005, 3:04 PM
 */

package plugin.charactersheet.gui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSplitPane;

import pcgen.core.PlayerCharacter;
import pcgen.core.bonus.BonusObj;
import pcgen.core.character.EquipSet;
import pcgen.gui.panes.FlippingSplitPane;

/**
 * <code>SelectPanel</code> implements the two panels used to select
 * which temporary bonus's and which equipment set should be applied
 * to the character that is beeing displayed in thr preview tab.
 *
 * @author <a href="mailto:skaark@yahoo.com">Kenneth Skaar</a>
 * @version 1.0
 */
public class SelectPanel extends JPanel implements ActionListener
{

	/** Creates new form SelectPanel
	 * @param parent
	 */
	public SelectPanel(CharacterPanel parent)
	{
		this.parent = parent;
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents()
	{
		eqSets = new ButtonGroup();
		splitPane1 = new FlippingSplitPane();
		eqSetPanel = new JPanel();
		modifiersPanel = new JPanel();

		setLayout(new BorderLayout());

		splitPane1.setOrientation(JSplitPane.VERTICAL_SPLIT);
		splitPane1.setResizeWeight(0.5);
		eqSetPanel.setLayout(new BoxLayout(eqSetPanel, BoxLayout.Y_AXIS));

		splitPane1.setLeftComponent(eqSetPanel);

		modifiersPanel
			.setLayout(new BoxLayout(modifiersPanel, BoxLayout.Y_AXIS));

		splitPane1.setRightComponent(modifiersPanel);

		add(splitPane1, BorderLayout.CENTER);

	}

	// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JPanel eqSetPanel;
	private ButtonGroup eqSets;
	private JPanel modifiersPanel;
	private FlippingSplitPane splitPane1;
	// End of variables declaration//GEN-END:variables
	private PlayerCharacter pc;
	private int serial = 0;
	private Map<String, Component> tempBonusWidgets =
			new HashMap<String, Component>();
	private Map<String, JRadioButton> eqSetWidgets =
			new HashMap<String, JRadioButton>();
	private CharacterPanel parent;

	/**
	 * <code>setPc</code> updates the currently displayed character.
	 * Should typically be called when the user switches the PC tab.
	 *
	 * @param pc the new <code>PlayerCharacter</code> object
	 * @throws Exception
	 */
	public void setPc(PlayerCharacter pc) throws Exception
	{
		if (this.pc != pc)
		{
			this.pc = pc;
			serial = 0;
			removeAllBoxes();
			updateSelections();
		}
	}

	/**
	 * <code>refresh</code> updates all filters and eqsets. Should typically
	 * be called whenever there is a chance that the user has added/removed
	 * temporary bonuses or equipment sets.
	 *
	 */
	public void refresh()
	{
		if (serial < pc.getSerial())
		{
			updateSelections();
			serial = pc.getSerial();
		}
	}

	/**
	 * <code>actionPerformed</code> is an event callback used
	 * whenever the user changes the selected equipment set.
	 * The <code>ActionEvent</code> object contains the information
	 * about which equipment set has been selected.
	 *
	 * @param e an <code>ActionEvent</code> object
	 */

	public void actionPerformed(ActionEvent e)
	{
		pc.setCalcEquipSetId(e.getActionCommand());
		pc.setCalcEquipmentList(pc.getUseTempMods());
		pc.calcActiveBonuses();
		parent.refresh();
	}

	/**
	 *  <code>removeAllBoxes</code> clears out the GUI panel's
	 *
	 */
	private void removeAllBoxes()
	{
		tempBonusWidgets.clear();
		modifiersPanel.removeAll();
		eqSetPanel.removeAll();
		for (JRadioButton button : eqSetWidgets.values())
		{
			eqSets.remove(button);
		}
		eqSetWidgets.clear();
	}

	/**
	 * transforms a <code>List</code> of temporary bonuses(<code>BonusObj</code>)
	 * to a set containing the names of those bonus.
	 *
	 * @param tempBonuses a <code>List</code> of temporary bonuses
	 * @return a <code>Set</code> of bonus names(<code>String</code>'s)
	 */
	private Set<String> tempBonus2Set(List<BonusObj> tempBonuses)
	{
		final Set<String> ret = new TreeSet<String>();
		for (BonusObj bonus : tempBonuses)
		{
			ret.add(bonus.getName());
		}
		return ret;
	}

	/**
	 * <code>equipSet2Set</code> transforms a list of equipment set items
	 * to a set containing the names of all "root" equipment sets.
	 *
	 * @param eqSetList a <code>List</code> of Equipment set items
	 * @return a <code>Set</code> of equipment set names
	 */
	private Set<String> equipSet2Set(List<EquipSet> eqSetList)
	{
		final Set<String> ret = new TreeSet<String>();
		for (EquipSet e : eqSetList)
		{
			if (e.getRootIdPath().equals(e.getIdPath()))
			{
				ret.add(e.getIdPath());
			}
		}
		return ret;
	}

	private void updateSelections()
	{
		/* Use set intersection/join's to figure out what updates
		 have been done */

		/* First, find which temporary bonuses have been removed,
		 and which have been added */
		Set<String> newValues = tempBonus2Set(pc.getTempBonusList());
		Set<String> oldValues = new TreeSet<String>(tempBonusWidgets.keySet());
		oldValues.removeAll(newValues);
		newValues.removeAll(tempBonusWidgets.keySet());

		if (!newValues.isEmpty())
		{
			addTempBonus(newValues);
		}
		if (!oldValues.isEmpty())
		{
			removeTempBonus(oldValues);
		}

		/* Now, same for equipment sets. */
		newValues.clear();
		oldValues.clear();

		newValues.addAll(equipSet2Set(pc.getEquipSet()));
		oldValues.addAll(eqSetWidgets.keySet());

		oldValues.removeAll(newValues);
		newValues.removeAll(eqSetWidgets.keySet());
		if (!newValues.isEmpty())
		{
			addEquipSets(newValues);
		}
		if (!oldValues.isEmpty())
		{
			removeEquipSets(oldValues);
		}
		
		JRadioButton btn = eqSetWidgets.get(pc.getCalcEquipSetId());
		if (btn != null)
		{
			btn.setSelected(true);
		}
	}

	private void addEquipSets(Set<String> eqSetIds)
	{
		/* just a temporary map to be able to lookup
		 the name of an equipment set, given its ID */
		final Map<String, String> setId2Name = new HashMap<String, String>();

		for (EquipSet eset : pc.getEquipSet())
		{
			setId2Name.put(eset.getIdPath(), eset.getName());
		}

		/* Create the buttons for the equipment sets. Note that we
		 keep an internal reference to the buttons in a map, so that
		 we can later remove them given an equipment set ID */
		for (String eqid : eqSetIds)
		{
			String setName = setId2Name.get(eqid);
			JRadioButton button = new JRadioButton(setName);
			button.setActionCommand(eqid);
			button.addActionListener(this);
			eqSets.add(button);
			eqSetPanel.add(button);
			eqSetWidgets.put(eqid, button);
		}
	}

	private void removeEquipSets(Set<String> eqSetIds)
	{
		for (String key : eqSetIds)
		{
			JRadioButton w = eqSetWidgets.remove(key);
			eqSets.remove(w);
			eqSetPanel.remove(w);
		}
	}

	private static class CheckBoxUpdater implements ItemListener
	{
		private String bonus;
		private PlayerCharacter playerCharacter;
		private CharacterPanel aParent;

		/**
		 * Constructor
		 * @param bonus
		 * @param aPc
		 * @param parent
		 */
		public CheckBoxUpdater(final String bonus, PlayerCharacter aPc,
			CharacterPanel parent)
		{
			this.aParent = parent;
			this.bonus = bonus;
			playerCharacter = aPc;
		}

		public void itemStateChanged(ItemEvent e)
		{
			if (e.getStateChange() == ItemEvent.DESELECTED)
			{
				playerCharacter.setTempBonusFilter(bonus);
			}
			if (e.getStateChange() == ItemEvent.SELECTED)
			{
				playerCharacter.unsetTempBonusFilter(bonus);
			}
			aParent.refresh();
		}
	}

	private void addTempBonus(final Set<String> names)
	{
		for (String name : names)
		{
			JCheckBox aBox =
					new JCheckBox(name, !pc.getTempBonusFilters()
						.contains(name));
			aBox.addItemListener(new CheckBoxUpdater(name, pc, parent));
			modifiersPanel.add(aBox);
			tempBonusWidgets.put(name, aBox);
		}
	}

	private void removeTempBonus(final Set<String> names)
	{
		for (String name : names)
		{
			Component w = tempBonusWidgets.get(name);
			if (w != null)
			{
				modifiersPanel.remove(w);
				tempBonusWidgets.remove(name);
			}
		}
	}
}
