/*
 *  Initiative - A role playing utility to track turns
 *  Copyright (C) 2002 Devon D Jones
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *  The author of this program grants you the ability to use this code
 *  in conjunction with code that is covered under the Open Gaming License
 *
 *  PreferencesTrackingPanel.java
 *
 *  Created on August 29, 2002, 2:41 PM
 */
package plugin.charactersheet.gui;

import pcgen.core.SettingsHandler;
import plugin.charactersheet.CharacterSheetModel;
import plugin.charactersheet.CharacterSheetPlugin;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.util.Vector;

/**
 *  Panel that tracks the misc preferences
 *
 *@author     devon
 *@since    April 7, 2003
 */
public class PreferencesDisplayPanel extends gmgen.gui.PreferencesPanel
{
	private CharacterSheetModel model;
	private final Color blue = new Color(153, 153, 187); //9999BB
	private final Color lightBlue = new Color(187, 187, 238); //BBBBEE
	private final Color green = new Color(153, 187, 153); //99BB99
	private final Color lightGreen = new Color(68, 204, 68); //44CC44
	private final Color red = new Color(187, 153, 153); //BB9999
	private final Color lightRed = new Color(204, 0, 0); //CC0000
	private final Color yellow = new Color(187, 187, 153); //BBBB99
	private final Color lightYellow = new Color(204, 204, 68); //888800
	private final Color grey = new Color(153, 153, 153); //999999
	private final Color lightGrey = new Color(255, 255, 255); //FFFFFF

	private JPanel colorPanel;
	private JComboBox cbColor;

	/**  Creates new form PreferencesMiscPanel
	 * @param model
	 */
	public PreferencesDisplayPanel(CharacterSheetModel model)
	{
		initComponents();
		initCb();
		initPreferences();
		this.model = model;
	}

	/**
	 *  This method is called from within the constructor to initialize the form.
	 *  WARNING: Do NOT modify this code. The content of this method is always
	 *  regenerated by the Form Editor.
	 */
	private void initComponents()
	{//GEN-BEGIN:initComponents
		setLayout(new BorderLayout());

		cbColor = new JComboBox();

		JPanel borderPanel = new JPanel();
		borderPanel.setLayout(new BorderLayout());

		JPanel topPanel = new JPanel();
		topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.Y_AXIS));

		colorPanel = new JPanel();
		colorPanel.setLayout(new BoxLayout(colorPanel, BoxLayout.Y_AXIS));
		colorPanel.setBorder(new TitledBorder("Color"));

		JLabel colorLabel = new JLabel();
		colorLabel.setText("Sheet Color");

		JPanel line1 = new JPanel();
		line1.setLayout(new FlowLayout(FlowLayout.LEFT));
		line1.add(colorLabel);
		line1.add(cbColor);
		colorPanel.add(line1);

		topPanel.add(colorPanel);

		borderPanel.add(topPanel, BorderLayout.NORTH);
		JScrollPane jScrollPane1 = new JScrollPane();
		jScrollPane1.setViewportView(borderPanel);
		add(jScrollPane1, BorderLayout.CENTER);
	}

	private void initCb()
	{
		cbColor.setRenderer(new ColorRenderer());
		Vector<Object> data = new Vector<Object>();
		data.add(new ColorContainer(CharacterPanel.BLUE));
		data.add(new ColorContainer(CharacterPanel.LIGHTBLUE));
		data.add(new ColorContainer(CharacterPanel.GREEN));
		data.add(new ColorContainer(CharacterPanel.LIGHTGREEN));
		data.add(new ColorContainer(CharacterPanel.RED));
		data.add(new ColorContainer(CharacterPanel.LIGHTRED));
		data.add(new ColorContainer(CharacterPanel.YELLOW));
		data.add(new ColorContainer(CharacterPanel.LIGHTYELLOW));
		data.add(new ColorContainer(CharacterPanel.GREY));
		data.add(new ColorContainer(CharacterPanel.LIGHTGREY));
		cbColor.setModel(new DefaultComboBoxModel(data));
	}

	/**
	 *  Sets the maxHP attribute of the PreferencesMiscPanel object
	 *
	 *@param  value  The new maxHP value
	 */
	public void setColor(int value)
	{
		cbColor.setSelectedIndex(value);
	}

	/**
	 *  Gets the value from the Maximum Hit Points text box
	 *
	 *@return    The maxHP value
	 */
	public int getColor()
	{
		Object o = cbColor.getSelectedItem();
		ColorContainer value = new ColorContainer(CharacterPanel.BLUE);
		if (o instanceof ColorContainer)
		{
			value = (ColorContainer) o;
		}

		return value.intValue();
	}

	public void applyPreferences()
	{
		SettingsHandler.setGMGenOption(
			CharacterSheetPlugin.LOG_NAME + ".color", getColor());
		model.applyPrefs();
	}

	public void initPreferences()
	{
		setColor(SettingsHandler.getGMGenOption(CharacterSheetPlugin.LOG_NAME
			+ ".color", CharacterPanel.BLUE));
	}

	public String toString()
	{
		return "Display";
	}

	private class ColorRenderer implements ListCellRenderer
	{

		public ColorRenderer()
		{
			// Do Nothing
		}

		public Component getListCellRendererComponent(JList list, Object value,
			int index, boolean isSelected, boolean cellHasFocus)
		{
			JPanel panel = new JPanel();
			JLabel label = new JLabel();
			ColorContainer colorContainer;
			if (value instanceof ColorContainer)
			{
				colorContainer = (ColorContainer) value;
			}
			else
			{
				colorContainer = new ColorContainer(CharacterPanel.BLUE);
			}
			panel.setBackground(colorContainer.getColor());
			label.setText(colorContainer.toString());
			panel.add(label);
			return panel;
		}
	}

	private class ColorContainer
	{
		private Color color;
		private int constant;

		public ColorContainer(int constant)
		{
			color = getColorFromConstant(constant);
			this.constant = constant;
		}

		public int intValue()
		{
			return constant;
		}

		public String toString()
		{
			switch (constant)
			{
				case CharacterPanel.BLUE:
					return "Blue";
				case CharacterPanel.LIGHTBLUE:
					return "Light Blue";
				case CharacterPanel.GREEN:
					return "Green";
				case CharacterPanel.LIGHTGREEN:
					return "Light Green";
				case CharacterPanel.RED:
					return "Red";
				case CharacterPanel.LIGHTRED:
					return "Light Red";
				case CharacterPanel.YELLOW:
					return "Yellow";
				case CharacterPanel.LIGHTYELLOW:
					return "Light Yellow";
				case CharacterPanel.GREY:
					return "Grey";
				case CharacterPanel.LIGHTGREY:
					return "Light Grey";
				default:
					return "Blue";
			}
		}

		public Color getColor()
		{
			return color;
		}

		private Color getColorFromConstant(int aConstant)
		{
			switch (aConstant)
			{
				case CharacterPanel.BLUE:
					return blue;
				case CharacterPanel.LIGHTBLUE:
					return lightBlue;
				case CharacterPanel.GREEN:
					return green;
				case CharacterPanel.LIGHTGREEN:
					return lightGreen;
				case CharacterPanel.RED:
					return red;
				case CharacterPanel.LIGHTRED:
					return lightRed;
				case CharacterPanel.YELLOW:
					return yellow;
				case CharacterPanel.LIGHTYELLOW:
					return lightYellow;
				case CharacterPanel.GREY:
					return grey;
				case CharacterPanel.LIGHTGREY:
					return lightGrey;
				default:
					return blue;
			}
		}
	}
}
