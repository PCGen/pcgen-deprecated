/*
 * Page1Panel.java
 *
 * Created on February 2, 2004, 7:36 PM
 */

package plugin.charactersheet.gui;

import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.util.Properties;

import javax.swing.JPanel;

import pcgen.core.PlayerCharacter;
import plugin.charactersheet.CharacterSheetUtils;

/**
 *
 * @author  soulcatcher
 */
public class Page1Panel extends JPanel
{
	private PlayerCharacter pc;
	private ArmorPane armorPane = new ArmorPane();
	private ArmorPane shieldPane = new ArmorPane();
	private ArmorPane itemPane = new ArmorPane();
	private AttributePane attributePane = new AttributePane();
	private BaseAttackPane baseAttackPane = new BaseAttackPane();
	private CombatPane1 combatPane1 = new CombatPane1();
	private CombatPane2 combatPane2 = new CombatPane2();
	private DetailsPane detailsPane = new DetailsPane();
	private MusicPane musicPane = new MusicPane();
	private PerDayPane layOnHandsPane = new PerDayPane();
	private PerDayPane stunningFistPane = new PerDayPane();
	private PerDayPane wholenessPane = new PerDayPane();
	private PerDayPane wildshapePane = new PerDayPane();
	private RagePane ragePane = new RagePane();
	private SavingThrowPane savingThrowPane = new SavingThrowPane();
	private SkillsPane skillsPane = new SkillsPane();
	private MasterTurnPane turnPane = new MasterTurnPane();
	private UnarmedPane unarmedPane = new UnarmedPane();
	private WeaponListPane weaponListPane = new WeaponListPane();
	private javax.swing.JPanel col2Panel = new javax.swing.JPanel();
	private javax.swing.JPanel bufferPanel = new javax.swing.JPanel();
	private int serial = 0;
	private int bufferSize = 1;

	/** Creates new form Page1Panel */
	public Page1Panel()
	{
		initComponents();
		setLocalColor();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents()
	{//GEN-BEGIN:initComponents
		setLayout(new java.awt.GridBagLayout());
		addComponentListener(new ComponentListener()
		{
			public void componentHidden(ComponentEvent e)
			{
				updateBuffer();
			}

			public void componentMoved(ComponentEvent e)
			{
				updateBuffer();
			}

			public void componentResized(ComponentEvent e)
			{
				updateBuffer();
			}

			public void componentShown(ComponentEvent e)
			{
				updateBuffer();
			}
		});

		CharacterSheetUtils.addGbComponentCell(this, detailsPane, 0, 0, 1, 3,
			new Insets(0, 0, 0, 0), GridBagConstraints.BOTH,
			GridBagConstraints.CENTER);
		CharacterSheetUtils.addGbComponentCell(this, attributePane, 0, 1, 3, 1,
			new Insets(0, 0, 0, 0), GridBagConstraints.HORIZONTAL,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(this, combatPane1, 1, 1, 1, 2,
			new Insets(5, 3, 0, 0), GridBagConstraints.HORIZONTAL,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(this, combatPane2, 1, 2, 1, 1,
			new Insets(0, 3, 0, 0), GridBagConstraints.NONE,
			GridBagConstraints.NORTHWEST);
		CharacterSheetUtils.addGbComponentCell(this, savingThrowPane, 0, 4, 1,
			2, new Insets(1, 0, 0, 0), GridBagConstraints.NONE,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(this, baseAttackPane, 0, 5, 1,
			2, new Insets(1, 0, 0, 0), GridBagConstraints.NONE,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(this, unarmedPane, 0, 6, 1, 2,
			new Insets(5, 0, 0, 0), GridBagConstraints.HORIZONTAL,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(this, weaponListPane, 0, 7, 1,
			2, new Insets(5, 0, 0, 0), GridBagConstraints.HORIZONTAL,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(this, armorPane, 0, 8, 1, 2,
			new Insets(5, 0, 0, 0), GridBagConstraints.NONE,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(this, shieldPane, 0, 9, 1, 2,
			new Insets(5, 0, 0, 0), GridBagConstraints.NONE,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(this, itemPane, 0, 10, 1, 2,
			new Insets(5, 0, 0, 0), GridBagConstraints.NONE,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(this, ragePane, 0, 11, 1, 2,
			new Insets(5, 0, 0, 0), GridBagConstraints.HORIZONTAL,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(this, layOnHandsPane, 0, 12, 1,
			2, new Insets(5, 0, 0, 0), GridBagConstraints.HORIZONTAL,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(this, stunningFistPane, 0, 13,
			1, 2, new Insets(5, 0, 0, 0), GridBagConstraints.HORIZONTAL,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(this, wholenessPane, 0, 14, 1,
			2, new Insets(5, 0, 0, 0), GridBagConstraints.HORIZONTAL,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(this, wildshapePane, 0, 15, 1,
			2, new Insets(5, 0, 0, 0), GridBagConstraints.HORIZONTAL,
			GridBagConstraints.WEST);

		col2Panel.setLayout(new java.awt.GridBagLayout());
		CharacterSheetUtils.addGbComponentCell(this, col2Panel, 2, 2, 14, 1,
			new Insets(5, 5, 0, 0), GridBagConstraints.NONE,
			GridBagConstraints.WEST);

		CharacterSheetUtils.addGbComponentCell(col2Panel, skillsPane, 0, 0, 1,
			1, new Insets(0, 0, 0, 0), GridBagConstraints.NONE,
			GridBagConstraints.CENTER);
		CharacterSheetUtils.addGbComponentCell(col2Panel, turnPane, 0, 1, 1, 1,
			new Insets(5, 0, 0, 0), GridBagConstraints.NONE,
			GridBagConstraints.WEST);
		CharacterSheetUtils.addGbComponentCell(col2Panel, musicPane, 0, 2, 1,
			1, new Insets(5, 0, 0, 0), GridBagConstraints.HORIZONTAL,
			GridBagConstraints.WEST);

		//Add bottom buffer
		bufferPanel.setMaximumSize(new java.awt.Dimension(Integer.MAX_VALUE,
			Integer.MAX_VALUE));
		bufferPanel.setPreferredSize(new java.awt.Dimension(20, bufferSize));
		CharacterSheetUtils.addGbComponentCell(col2Panel, bufferPanel, 0, 3, 1,
			1, new Insets(5, 0, 0, 0), GridBagConstraints.NONE,
			GridBagConstraints.WEST);
	}//GEN-END:initComponents

	public void setColor()
	{
		setLocalColor();
		armorPane.setColor();
		shieldPane.setColor();
		itemPane.setColor();
		attributePane.setColor();
		baseAttackPane.setColor();
		combatPane1.setColor();
		combatPane2.setColor();
		detailsPane.setColor();
		musicPane.setColor();
		layOnHandsPane.setColor();
		stunningFistPane.setColor();
		wholenessPane.setColor();
		wildshapePane.setColor();
		ragePane.setColor();
		savingThrowPane.setColor();
		skillsPane.setColor();
		turnPane.setColor();
		unarmedPane.setColor();
		weaponListPane.setColor();
	}

	public void setLocalColor()
	{
		setBackground(CharacterPanel.white);
		col2Panel.setBackground(CharacterPanel.white);
		bufferPanel.setBackground(CharacterPanel.white);
	}

	public void setPc(PlayerCharacter pc, Properties pcProperties)
	{
		if (this.pc != pc)
		{
			this.pc = pc;
			serial = 0;
			armorPane.setPc(pc, "ARMOR");
			shieldPane.setPc(pc, "SHIELD");
			attributePane.setPc(pc);
			baseAttackPane.setPc(pc);
			combatPane1.setPc(pc, pcProperties);
			combatPane2.setPc(pc);
			detailsPane.setPc(pc);
			itemPane.setPc(pc, "ITEM");
			layOnHandsPane.setPc(pc, pcProperties, "LayOnHands",
				"LAY ON HANDS", "HP per day");
			musicPane.setPc(pc, pcProperties);
			ragePane.setPc(pc, pcProperties);
			savingThrowPane.setPc(pc);
			skillsPane.setPc(pc);
			stunningFistPane.setPc(pc, pcProperties, "StunningFistAttack",
				"StunningFistDC", "STUNNING FIST", "DC");
			turnPane.setPc(pc, pcProperties);
			unarmedPane.setPc(pc);
			weaponListPane.setPc(pc);
			wholenessPane.setPc(pc, pcProperties, "WholenessBody",
				"WHOLENESS OF BODY", "HP per day");
			wildshapePane.setPc(pc, pcProperties, "Wildshape",
				"DRUID WILDSHAPE", "Uses per day");
			updateBuffer();
		}
	}

	public void refresh()
	{
		if (serial < pc.getSerial())
		{
			armorPane.refresh();
			shieldPane.refresh();
			attributePane.refresh();
			baseAttackPane.refresh();
			combatPane1.refresh();
			combatPane2.refresh();
			detailsPane.refresh();
			itemPane.refresh();
			layOnHandsPane.refresh();
			musicPane.refresh();
			ragePane.refresh();
			savingThrowPane.refresh();
			skillsPane.refresh();
			stunningFistPane.refresh();
			turnPane.refresh();
			unarmedPane.refresh();
			weaponListPane.refresh();
			wholenessPane.refresh();
			wildshapePane.refresh();

			serial = pc.getSerial();
		}
		updateBuffer();
	}

	public void updateProperties()
	{
		combatPane1.updateProperties();
		turnPane.updateProperties();
		ragePane.updateProperties();
		musicPane.updateProperties();
		layOnHandsPane.updateProperties();
		stunningFistPane.updateProperties();
		wholenessPane.updateProperties();
		wildshapePane.updateProperties();
	}

	private void updateBuffer()
	{
		int right =
				skillsPane.getHeight() + turnPane.getHeight()
					+ musicPane.getHeight() + combatPane1.getHeight()
					- attributePane.getHeight();
		int left =
				savingThrowPane.getHeight() + baseAttackPane.getHeight()
					+ unarmedPane.getHeight() + weaponListPane.getHeight()
					+ armorPane.getHeight() + shieldPane.getHeight()
					+ itemPane.getHeight() + ragePane.getHeight()
					+ layOnHandsPane.getHeight() + stunningFistPane.getHeight()
					+ wholenessPane.getHeight() + wildshapePane.getHeight();
		int newBuffer = left - right;
		if (newBuffer > 0)
		{
			bufferSize = newBuffer;
			bufferPanel.setBackground(CharacterPanel.white);
			bufferPanel.setPreferredSize(new java.awt.Dimension(20,
				bufferSize + 10));
		}
	}

	public void destruct()
	{
		armorPane.destruct();
		shieldPane.destruct();
		itemPane.destruct();
		attributePane.destruct();
		baseAttackPane.destruct();
		combatPane1.destruct();
		combatPane2.destruct();
		detailsPane.destruct();
		musicPane.destruct();
		layOnHandsPane.destruct();
		stunningFistPane.destruct();
		wholenessPane.destruct();
		wildshapePane.destruct();
		ragePane.destruct();
		savingThrowPane.destruct();
		skillsPane.destruct();
		turnPane.destruct();
		unarmedPane.destruct();
		weaponListPane.destruct();

		armorPane = null;
		shieldPane = null;
		itemPane = null;
		attributePane = null;
		baseAttackPane = null;
		combatPane1 = null;
		combatPane2 = null;
		detailsPane = null;
		musicPane = null;
		layOnHandsPane = null;
		stunningFistPane = null;
		wholenessPane = null;
		wildshapePane = null;
		ragePane = null;
		savingThrowPane = null;
		skillsPane = null;
		turnPane = null;
		unarmedPane = null;
		weaponListPane = null;
		removeAll();
	}

	public void clear()
	{
		weaponListPane.clear();
	}
}
